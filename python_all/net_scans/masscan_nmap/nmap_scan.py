import csv
import os
import subprocess
import socket
import requests

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
CSV_FILE = "scan_results.csv"

# üîπ –§—É–Ω–∫—Ü–∏—è: –∑–∞–ø–∏—Å—å –≤ CSV
def write_to_csv(data):
    with open(CSV_FILE, "a", newline="") as file:
        writer = csv.writer(file)
        writer.writerow(data)

# üîπ –§—É–Ω–∫—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ netcat
def check_netcat(ip, port):
    try:
        result = subprocess.run(["nc", "-zv", ip, str(port)], capture_output=True, text=True, timeout=3)
        return "Netcat: Open" if "succeeded" in result.stderr else "Netcat: Closed"
    except:
        return "Netcat: Error"

# üîπ –§—É–Ω–∫—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ HTTP(S) —á–µ—Ä–µ–∑ requests
def check_http(ip, port):
    try:
        url = f"http://{ip}:{port}" if port != 443 else f"https://{ip}"
        response = requests.get(url, timeout=3)
        return f"HTTP {response.status_code}" if response.status_code < 400 else f"HTTP Error {response.status_code}"
    except:
        return "HTTP: No Response"

# üîπ –§—É–Ω–∫—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ socket
def check_socket(ip, port):
    try:
        with socket.create_connection((ip, port), timeout=3):
            return "Socket: Open"
    except:
        return "Socket: Closed"

# üîπ –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω IP –∏ –ø–æ—Ä—Ç–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
ip_range = input("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω IP (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.8.10.0/24): ").strip()
port_range = input("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20-1000): ").strip()

# üîπ –ó–∞–ø—É—Å–∫ Nmap
print(f"\n[+] –°–∫–∞–Ω–∏—Ä—É–µ–º {ip_range} –Ω–∞ –ø–æ—Ä—Ç—ã {port_range}...")
nmap_cmd = f"nmap -p {port_range} {ip_range} --open -oG -"
result = subprocess.run(nmap_cmd, shell=True, capture_output=True, text=True)

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Nmap
open_ports = []
for line in result.stdout.split("\n"):
    if "Ports:" in line:
        parts = line.split("\t")
        ip = parts[0].split(" ")[1]
        ports_data = parts[-1].split(":")[-1].strip()

        for port_info in ports_data.split(", "):
            port_details = port_info.split("/")
            if len(port_details) >= 2 and port_details[1] == "open":
                port = port_details[0]
                open_ports.append((ip, port))

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
print(f"\n[+] –ù–∞–π–¥–µ–Ω–æ {len(open_ports)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö...")

# –°–æ–∑–¥–∞—ë–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ CSV
with open(CSV_FILE, "w", newline="") as file:
    writer = csv.writer(file)
    writer.writerow(["IP", "Port", "Nmap", "Netcat", "HTTP", "Socket"])

for ip, port in open_ports:
    netcat_status = check_netcat(ip, port)
    http_status = check_http(ip, port)
    socket_status = check_socket(ip, port)

    print(f"[+] {ip}:{port} - {netcat_status}, {http_status}, {socket_status}")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ CSV
    write_to_csv([ip, port, "Open", netcat_status, http_status, socket_status])

print(f"\n[‚úÖ] –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {CSV_FILE}")
