Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM03.GAZPROM.LOC"",""EventRecordID"":""44394"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""99076"",""ThreadID"":""82464"",""TimeCreated"":""1709709078994"",""UserId"":""CNTR\\GFKKA""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""ping 10.56.238.42 -t"",""ScriptBlockId"":""57d4eb6d-e0ac-4b1e-b439-b3f37c61a93c""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM03.GAZPROM.LOC"",""EventRecordID"":""44388"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""99076"",""ThreadID"":""82464"",""TimeCreated"":""1709708500306"",""UserId"":""CNTR\\GFKKA""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""ping 10.56.238.42 -t"",""ScriptBlockId"":""c185f686-6d70-45f2-95ac-a2cd1b68a237""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM03.GAZPROM.LOC"",""EventRecordID"":""44392"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""99076"",""ThreadID"":""82464"",""TimeCreated"":""1709709077849"",""UserId"":""CNTR\\GFKKA""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""6943fd36-f2f5-452a-89c6-97d22a20ba1d""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM03.GAZPROM.LOC"",""EventRecordID"":""44390"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""99076"",""ThreadID"":""82464"",""TimeCreated"":""1709709077506"",""UserId"":""CNTR\\GFKKA""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""8fb8d8a0-434f-4dd2-9664-558faeab19f5""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM03.GAZPROM.LOC"",""EventRecordID"":""44391"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""99076"",""ThreadID"":""82464"",""TimeCreated"":""1709709077681"",""UserId"":""CNTR\\GFKKA""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""d503c705-654e-4b2b-b35d-37b01e048f43""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM03.GAZPROM.LOC"",""EventRecordID"":""44393"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""99076"",""ThreadID"":""82464"",""TimeCreated"":""1709709078034"",""UserId"":""CNTR\\GFKKA""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""40d35b9c-79c6-4542-8d1b-58dac5099dc9""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120760"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503378"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""\""PS $($executionContext.SessionState.Path.CurrentLocation)$('>' * ($nestedPromptLevel + 1)) \""\n# .Link\n# http://go.microsoft.com/fwlink/?LinkID=225750\n# .ExternalHelp System.Management.Automation.dll-help.xml\n"",""ScriptBlockId"":""72fc996b-abb9-414b-aa01-4ad72eb3b937""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120762"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503585"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""$space = New-Object System.Management.Automation.Host.BufferCell\n$space.Character = ' '\n$space.ForegroundColor = $host.ui.rawui.ForegroundColor\n$space.BackgroundColor = $host.ui.rawui.BackgroundColor\n$rect = New-Object System.Management.Automation.Host.Rectangle\n$rect.Top = $rect.Bottom = $rect.Right = $rect.Left = -1\n$origin = New-Object System.Management.Automation.Host.Coordinates\n$Host.UI.RawUI.CursorPosition = $origin\n$Host.UI.RawUI.SetBufferContents($rect, $space)\n# .Link\n# http://go.microsoft.com/fwlink/?LinkID=225747\n# .ExternalHelp System.Management.Automation.dll-help.xml\n"",""ScriptBlockId"":""556a5da5-fef1-4d90-a0ad-eee274fa2ace""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120763"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503587"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""param([string[]]$paths)\n\n$OutputEncoding = [System.Console]::OutputEncoding\n\nif($paths)\n{\n    foreach ($file in $paths)\n    {\n        Get-Content $file | more.com\n    }\n}\nelse\n{\n    $input | more.com\n}\n"",""ScriptBlockId"":""f0b83ac4-f6ff-487f-a398-50bc0d280973""}}"











Raw Event

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120761"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503584"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""<# Options include:\n     RelativeFilePaths - [bool]\n         Always resolve file paths using Resolve-Path -Relative.\n         The default is to use some heuristics to guess if relative or absolute is better.\n\n   To customize your own custom options, pass a hashtable to CompleteInput, e.g.\n         return [System.Management.Automation.CommandCompletion]::CompleteInput($inputScript, $cursorColumn,\n             @{ RelativeFilePaths=$false }\n#>\n\n[CmdletBinding(DefaultParameterSetName = 'ScriptInputSet')]\nParam(\n    [Parameter(ParameterSetName = 'ScriptInputSet', Mandatory = $true, Position = 0)]\n    [string] $inputScript,\n    \n    [Parameter(ParameterSetName = 'ScriptInputSet', Mandatory = $true, Position = 1)]\n    [int] $cursorColumn,\n\n    [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 0)]\n    [System.Management.Automation.Language.Ast] $ast,\n\n    [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 1)]\n    [System.Management.Automation.Language.Token[]] $tokens,\n\n    [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 2)]\n    [System.Management.Automation.Language.IScriptPosition] $positionOfCursor,\n    \n    [Parameter(ParameterSetName = 'ScriptInputSet', Position = 2)]\n    [Parameter(ParameterSetName = 'AstInputSet', Position = 3)]\n    [Hashtable] $options = $null\n)\n\nEnd\n{\n    if ($psCmdlet.ParameterSetName -eq 'ScriptInputSet')\n    {\n        return [System.Management.Automation.CommandCompletion]::CompleteInput(\n            <#inputScript#>  $inputScript,\n            <#cursorColumn#> $cursorColumn,\n            <#options#>      $options)\n    }\n    else\n    {\n        return [System.Management.Automation.CommandCompletion]::CompleteInput(\n            <#ast#>              $ast,\n            <#tokens#>           $tokens,\n            <#positionOfCursor#> $positionOfCursor,\n            <#options#>          $options)\n    }\n}\n        "",""ScriptBlockId"":""14fe6d1c-c1cb-4898-8a6c-cdba3371ad57""}}"











"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120764"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503614"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""<#\n.FORWARDHELPTARGETNAME Get-Help\n.FORWARDHELPCATEGORY Cmdlet\n#>\n[CmdletBinding(DefaultParameterSetName='AllUsersView', HelpUri='http://go.microsoft.com/fwlink/?LinkID=113316')]\nparam(\n    [Parameter(Position=0, ValueFromPipelineByPropertyName=$true)]\n    [string]\n    ${Name},\n\n    [string]\n    ${Path},\n\n    [ValidateSet('Alias','Cmdlet','Provider','General','FAQ','Glossary','HelpFile','ScriptCommand','Function','Filter','ExternalScript','All','DefaultHelp','Workflow')]\n    [string[]]\n    ${Category},\n\n    [string[]]\n    ${Component},\n\n    [string[]]\n    ${Functionality},\n\n    [string[]]\n    ${Role},\n\n    [Parameter(ParameterSetName='DetailedView', Mandatory=$true)]\n    [switch]\n    ${Detailed},\n\n    [Parameter(ParameterSetName='AllUsersView')]\n    [switch]\n    ${Full},\n\n    [Parameter(ParameterSetName='Examples', Mandatory=$true)]\n    [switch]\n    ${Examples},\n\n    [Parameter(ParameterSetName='Parameters', Mandatory=$true)]\n    [string]\n    ${Parameter},\n\n    [Parameter(ParameterSetName='Online', Mandatory=$true)]\n    [switch]\n    ${Online},\n\n    [Parameter(ParameterSetName='ShowWindow', Mandatory=$true)]\n    [switch]\n    ${ShowWindow})\n\n      #Set the outputencoding to Console::OutputEncoding. More.com doesn't work well with Unicode.\n      $outputEncoding=[System.Console]::OutputEncoding\n\n      Get-Help @PSBoundParameters | more\n"",""ScriptBlockId"":""a0686f8d-8e6a-4e54-a2ae-3365a4145d47""}}"










"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120765"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503615"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""<#\n.FORWARDHELPTARGETNAME New-Item\n.FORWARDHELPCATEGORY Cmdlet\n#>\n[CmdletBinding(DefaultParameterSetName='pathSet',\n    SupportsShouldProcess=$true,\n    SupportsTransactions=$true,\n    ConfirmImpact='Medium')]\n    [OutputType([System.IO.DirectoryInfo])]\nparam(\n    [Parameter(ParameterSetName='nameSet', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Parameter(ParameterSetName='pathSet', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\n    [System.String[]]\n    ${Path},\n\n    [Parameter(ParameterSetName='nameSet', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [AllowNull()]\n    [AllowEmptyString()]\n    [System.String]\n    ${Name},\n\n    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]\n    [System.Object]\n    ${Value},\n\n    [Switch]\n    ${Force},\n\n    [Parameter(ValueFromPipelineByPropertyName=$true)]\n    [System.Management.Automation.PSCredential]\n    ${Credential}\n)\n\nbegin {\n\n    try {\n        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('New-Item', [System.Management.Automation.CommandTypes]::Cmdlet)\n        $scriptCmd = {& $wrappedCmd -Type Directory @PSBoundParameters }\n        $steppablePipeline = $scriptCmd.GetSteppablePipeline()\n        $steppablePipeline.Begin($PSCmdlet)\n    } catch {\n        throw\n    }\n\n}\n\nprocess {\n\n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n\n}\n\nend {\n\n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n\n}\n\n"",""ScriptBlockId"":""58ff34a7-cc0c-456b-86b9-7ef223ccf23e""}}"












"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120766"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503616"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""\nparam(\n    [Parameter(ValueFromPipeline=$true)]\n    [string[]]\n    $verb = '*'\n)\nbegin {\n    $allVerbs = [PSObject].Assembly.GetTypes() |\n        Where-Object {$_.Name -match '^Verbs.'} |\n        Get-Member -type Properties -static |\n        Select-Object @{\n            Name='Verb'\n            Expression = {$_.Name}\n        }, @{\n            Name='Group'\n            Expression = {\n                $str = \""$($_.TypeName)\""\n                $str.Substring($str.LastIndexOf('Verbs') + 5)\n            }\n        }\n}\nprocess {\n    foreach ($v in $verb) {\n        $allVerbs | Where-Object { $_.Verb -like $v }\n    }\n}\n# .Link\n# http://go.microsoft.com/fwlink/?LinkID=160712\n# .ExternalHelp System.Management.Automation.dll-help.xml\n"",""ScriptBlockId"":""ebe6b959-34c2-462b-b6f2-c0053b67dfc1""}}"


Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120767"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503616"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""\n[CmdletBinding()]\nparam(\n    [ValidateRange(2, 2147483647)]\n    [int]\n    ${Width},\n\n    [Parameter(ValueFromPipeline=$true)]\n    [psobject]\n    ${InputObject})\n\nbegin\n{\n    try {\n        $PSBoundParameters['Stream'] = $true\n        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('Out-String',[System.Management.Automation.CommandTypes]::Cmdlet)\n        $scriptCmd = {& $wrappedCmd @PSBoundParameters }\n        $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n        $steppablePipeline.Begin($PSCmdlet)\n    } catch {\n        throw\n    }\n}\n\nprocess\n{\n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n}\n\nend\n{\n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n}\n<#\n.ForwardHelpTargetName Out-String\n.ForwardHelpCategory Cmdlet\n#>"",""ScriptBlockId"":""cd7acab9-4cdc-4021-8986-9627765d3308""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120768"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503616"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location A:"",""ScriptBlockId"":""9e384847-bb41-4345-b847-04c3ea4db349""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120769"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503616"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location B:"",""ScriptBlockId"":""0c86de90-ba32-469d-ac5c-008dbee81ba0""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120771"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503616"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location D:"",""ScriptBlockId"":""d669d2aa-2464-4dce-8036-7914d29dbab7""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120770"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503616"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location C:"",""ScriptBlockId"":""547b488b-3c33-4d4f-8f5c-a5a3e10f0840""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120773"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503616"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location F:"",""ScriptBlockId"":""88822649-04d1-44b8-9438-5512111f0a4c""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120772"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503616"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location E:"",""ScriptBlockId"":""61ed565a-d964-42e8-b3bd-e90e198c7102""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120775"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503616"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location H:"",""ScriptBlockId"":""06726295-e781-45af-a4a7-d32ad0bde805""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120774"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503616"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location G:"",""ScriptBlockId"":""358b550b-645a-4378-8b26-6b123409aab6""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120776"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503616"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location I:"",""ScriptBlockId"":""2711f1f0-c1c1-4a06-aeef-2ec640dd4822""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120777"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503616"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location J:"",""ScriptBlockId"":""4d9f539c-f26f-4ec5-a6c3-0043a96b0685""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120779"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503617"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location L:"",""ScriptBlockId"":""19d3268a-b510-41a9-a8d7-4ca799873d6f""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120778"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503616"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location K:"",""ScriptBlockId"":""904eb31e-187c-4ee9-a003-2e1ac0f2ea51""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120780"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503617"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location M:"",""ScriptBlockId"":""77f14c92-4767-4b46-aa33-d40aa36e7ebe""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120781"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503617"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location N:"",""ScriptBlockId"":""a71e6a27-52b1-4fbc-8b80-719133d17bc4""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120783"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503617"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location P:"",""ScriptBlockId"":""a4507941-784e-4b5f-a3f3-fbdf8109a1bd""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120784"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503617"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location Q:"",""ScriptBlockId"":""bda67220-fd1d-4240-a2c3-af9a706d3bd2""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120785"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503617"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location R:"",""ScriptBlockId"":""cae6b279-ebb4-448e-a149-11df2c523903""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120782"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503617"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location O:"",""ScriptBlockId"":""62954093-c734-4c42-bd8b-926df1bdbdff""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120786"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503617"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location S:"",""ScriptBlockId"":""1763088b-37ae-4873-9925-79a81f7d53fd""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120788"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503617"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location U:"",""ScriptBlockId"":""3b0a626e-b0ab-4c66-b64e-f5a792804647""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120787"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503617"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location T:"",""ScriptBlockId"":""4e8d5c86-1ee4-446f-9270-bafb3027e454""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120789"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503617"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location V:"",""ScriptBlockId"":""b665f2f7-323d-431a-8f26-4bbf2841eef0""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120790"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503617"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location W:"",""ScriptBlockId"":""da814cb4-6fcc-4c0b-bf82-074a895a4afe""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120792"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503617"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location Y:"",""ScriptBlockId"":""1eefd2b9-b05d-462e-810e-2b960b400430""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120793"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503617"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location Z:"",""ScriptBlockId"":""b66d6473-3dad-474c-b323-079e18e6235d""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120791"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503617"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location X:"",""ScriptBlockId"":""0146740b-3d42-49dc-92ef-dd4412d5e757""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120794"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503617"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location .."",""ScriptBlockId"":""d7028191-e9ec-4404-96da-be87da10ad50""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120795"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503617"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location \\"",""ScriptBlockId"":""3f969bbc-2e14-40f6-a3c8-5f8ccfb63ae5""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120796"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503617"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":"""",""ScriptBlockId"":""32e34032-0a0b-4395-874b-246aa56e875d""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120797"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710503617"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Read-Host 'Press Enter to continue...' | Out-Null"",""ScriptBlockId"":""0ec32ad2-463d-46fe-aa00-4f989a9bcfeb""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120798"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15468"",""TimeCreated"":""1709710504048"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""$this.ServiceName"",""ScriptBlockId"":""9e4d74c9-f82f-42ac-b11c-cd838a21108f""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120799"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15468"",""TimeCreated"":""1709710504050"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""[System.Management.ManagementDateTimeConverter]::ToDateTime($args[0])"",""ScriptBlockId"":""7fc6ff39-d965-4c63-82a7-0d536655d84e""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120801"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15468"",""TimeCreated"":""1709710504151"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""$null = [System.Management.Automation.CommandCompletion]::CompleteInput('Set-Location', 12, $null)"",""ScriptBlockId"":""05a76cb2-f0a7-4f3b-9fca-389ea715e417""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120803"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""20728"",""TimeCreated"":""1709710504650"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""0"",""ScriptBlockId"":""6cd3a374-75ba-4035-b6b3-2f83e17acdf0""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120800"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15468"",""TimeCreated"":""1709710504050"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""[System.Management.ManagementDateTimeConverter]::ToDmtfDateTime($args[0])"",""ScriptBlockId"":""08ba3ce7-3a79-4c85-ad87-975d1d049f61""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120804"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""20728"",""TimeCreated"":""1709710504986"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""if ($this.InvocationInfo -eq $null) { return $this.FunctionName }\n                     $commandInfo = $this.InvocationInfo.MyCommand\n                     if ($commandInfo -eq $null) { return $this.InvocationInfo.InvocationName }\n                     if ($commandInfo.Name -ne \""\"") { return $commandInfo.Name }\n                     return $this.FunctionName"",""ScriptBlockId"":""493ba23a-2493-4f6e-810d-6603b2f7057a""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120805"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""20728"",""TimeCreated"":""1709710504986"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""$this.GetScriptLocation()"",""ScriptBlockId"":""cd96ef16-5f0a-4379-af44-6ea6ab2384a2""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120806"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""20728"",""TimeCreated"":""1709710504986"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""$argumentsBuilder = new-object System.Text.StringBuilder\n\n                    $null = $(                    \n                        $argumentsBuilder.Append(\""{\"")\n                        foreach ($entry in $this.InvocationInfo.BoundParameters.GetEnumerator())\n                        {\n                            if ($argumentsBuilder.Length -gt 1)\n                            {\n                                $argumentsBuilder.Append(\"", \"");\n                            }\n                        \n                            $argumentsBuilder.Append($entry.Key).Append(\""=\"")\n                        \n                            if ($entry.Value)\n                            {\n                                $argumentsBuilder.Append([string]$entry.Value)\n                            }\n                        }\n                        \n                        foreach ($arg in $this.InvocationInfo.UnboundArguments.GetEnumerator())\n                        {\n                            if ($argumentsBuilder.Length -gt 1)\n                            {\n                                $argumentsBuilder.Append(\"", \"")\n                            }\n                            if ($arg)\n                            {\n                                $argumentsBuilder.Append([string]$arg)\n                            }\n                            else\n                            {\n                                $argumentsBuilder.Append('$null')\n                            }\n                        }\n                        \n                        $argumentsBuilder.Append('}');\n                    )\n                    \n                    return $argumentsBuilder.ToString();"",""ScriptBlockId"":""71762578-7958-4c59-b085-c9143a3f00b9""}}"










Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120811"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""20728"",""TimeCreated"":""1709710506012"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""mstsc"",""ScriptBlockId"":""03808f76-1ad5-4ced-81d6-3696065f0b36""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120815"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""20728"",""TimeCreated"":""1709710506169"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""10551e4c-72da-49ff-879d-4fca31f7efc2""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120813"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710506127"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""\n        [System.Diagnostics.DebuggerHidden()]\n        param()\n\n        $foundSuggestion = $false\n        \n        if($lastError -and\n            ($lastError.Exception -is \""System.Management.Automation.CommandNotFoundException\""))\n        {\n            $escapedCommand = [System.Management.Automation.WildcardPattern]::Escape($lastError.TargetObject)\n            $foundSuggestion = @(Get-Command ($ExecutionContext.SessionState.Path.Combine(\"".\"", $escapedCommand)) -ErrorAction Ignore).Count -gt 0\n        }\n\n        $foundSuggestion\n        "",""ScriptBlockId"":""515abd67-553e-4ebc-acda-609181fc2dfb""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120807"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""20728"",""TimeCreated"":""1709710505499"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""@{\nGUID=\""EEFCB906-B326-4E99-9F54-8B4BB6EF3C6D\""\nAuthor=\""Microsoft Corporation\""\nCompanyName=\""Microsoft Corporation\""\nCopyright=\""© Microsoft Corporation. All rights reserved.\""\nModuleVersion=\""3.1.0.0\""\nPowerShellVersion=\""3.0\""\nCLRVersion=\""4.0\""\nNestedModules=\""Microsoft.PowerShell.Commands.Management.dll\""\nHelpInfoURI = 'http://go.microsoft.com/fwlink/?linkid=285756'\nCmdletsToExport=@(\""Add-Content\"",\n    \""Clear-Content\"",\n    \""Clear-ItemProperty\"",\n    \""Join-Path\"",\n    \""Convert-Path\"",\n    \""Copy-ItemProperty\"",\n    \""Get-EventLog\"",\n    \""Clear-EventLog\"",\n    \""Write-EventLog\"",\n    \""Limit-EventLog\"",\n    \""Show-EventLog\"",\n    \""New-EventLog\"",\n    \""Remove-EventLog\"",\n    \""Get-ChildItem\"",\n    \""Get-Content\"",\n    \""Get-ItemProperty\"",\n    \""Get-WmiObject\"",\n    \""Invoke-WmiMethod\"",\n    \""Move-ItemProperty\"",\n    \""Get-Location\"",\n    \""Set-Location\"",\n    \""Push-Location\"",\n    \""Pop-Location\"",\n    \""New-PSDrive\"",\n    \""Remove-PSDrive\"",\n    \""Get-PSDrive\"",\n    \""Get-Item\"",\n    \""New-Item\"",\n    \""Set-Item\"",\n    \""Remove-Item\"",\n    \""Move-Item\"",\n    \""Rename-Item\"",\n    \""Copy-Item\"",\n    \""Clear-Item\"",\n    \""Invoke-Item\"",\n    \""Get-PSProvider\"",\n    \""New-ItemProperty\"",\n    \""Split-Path\"",\n    \""Test-Path\"",\n    \""Get-Process\"",\n    \""Stop-Process\"",\n    \""Wait-Process\"",\n    \""Debug-Process\"",\n    \""Start-Process\"",\n    \""Remove-ItemProperty\"",\n    \""Remove-WmiObject\"",\n    \""Rename-ItemProperty\"",\n    \""Register-WmiEvent\"",\n    \""Resolve-Path\"",\n    \""Get-Service\"",\n    \""Stop-Service\"",\n    \""Start-Service\"",\n    \""Suspend-Service\"",\n    \""Resume-Service\"",\n    \""Restart-Service\"",\n    \""Set-Service\"",\n    \""New-Service\"",\n    \""Set-Content\"",\n    \""Set-ItemProperty\"",\n    \""Set-WmiInstance\"",\n    \""Get-Transaction\"",\n    \""Start-Transaction\"",\n    \""Complete-Transaction\"",\n    \""Undo-Transaction\"",\n    \""Use-Transaction\"",\n    \""New-WebServiceProxy\"",\n    \""Get-HotFix\"",\n    \""Test-Connection\"",\n    \""Enable-ComputerRestore\"",\n    \""Disable-ComputerRestore\"",\n    \""Checkpoint-Computer\"",\n    \""Get-ComputerRestorePoint\"",\n    \""Restart-Computer\"",\n    \""Stop-Computer\"",\n    \""Restore-Computer\"",\n    \""Add-Computer\"",\n    \""Remove-Computer\"",\n    \""Test-ComputerSecureChannel\"",\n    \""Reset-ComputerMachinePassword\"",\n    \""Rename-Computer\"",\n    \""Get-ControlPanelItem\"",\n    \""Show-ControlPanelItem\"")\n}\n"",""ScriptBlockId"":""bf83186b-df77-4c8e-90e8-30e60ce113d9""}}"













"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120814"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""15208"",""TimeCreated"":""1709710506127"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""\""The command $($lastError.TargetObject) was not found, but does exist in the current location. Windows PowerShell does not load commands from the current location by default. If you trust this command, instead type `\"".\\$($lastError.TargetObject)`\"". See `\""get-help about_Command_Precedence`\"" for more details.\"""",""ScriptBlockId"":""a2cba627-e37e-4464-b1ca-679bbb130581""}}"

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM03.GAZPROM.LOC"",""EventRecordID"":""44396"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""99076"",""ThreadID"":""82464"",""TimeCreated"":""1709712731384"",""UserId"":""CNTR\\GFKKA""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""b863361d-9615-4f3e-b612-8b51c48cd0a2""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM03.GAZPROM.LOC"",""EventRecordID"":""44521"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""99076"",""ThreadID"":""82464"",""TimeCreated"":""1709712732798"",""UserId"":""CNTR\\GFKKA""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""ping 10.56.238.42 -t"",""ScriptBlockId"":""dfaa8d11-9206-4a59-873f-3981610485f2""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM03.GAZPROM.LOC"",""EventRecordID"":""44532"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""99076"",""ThreadID"":""82464"",""TimeCreated"":""1709713601608"",""UserId"":""CNTR\\GFKKA""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""7de4ba49-dc41-43e7-aba7-8787ede4c3ea""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120818"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""20728"",""TimeCreated"":""1709713385764"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""e9a9ee8a-7b9d-4403-95c7-a1c337116f58""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120816"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""10520"",""ThreadID"":""20728"",""TimeCreated"":""1709713385694"",""UserId"":""CNTR\\IvP.Romanov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""mstsc"",""ScriptBlockId"":""980a6d38-0873-41f1-8359-512d5e2f93e3""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389874"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714551933"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""filter more { $_ }"",""ScriptBlockId"":""98b2ab7b-2a51-4108-a68e-3d4b13d23ec4"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389872"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714551920"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""[Microsoft.Windows.PowerShell.Gui.Internal.HostTextWriter]::RegisterHost($host.ui)"",""ScriptBlockId"":""a5184894-0e90-4a41-8036-7afca9d5bd6e"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389878"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714552021"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""$OutputEncoding = [System.Console]::OutputEncoding"",""ScriptBlockId"":""49f23f32-38ca-418b-bcb7-a0fb9f6849e3"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389876"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714552017"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""\nfunction psEdit([Parameter(Mandatory=$true)]$filenames)\n{\n    foreach ($filename in $filenames)\n    {\n        dir $filename | where {!$_.PSIsContainer} | %{\n            $psISE.CurrentPowerShellTab.Files.Add($_.FullName) > $null\n        }\n    }\n}"",""ScriptBlockId"":""83ef147a-6e93-48fe-a658-85abdf443220"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389884"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714552482"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""a1d36664-b5c6-4d2f-8e53-e23ec71716b5"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389885"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714552508"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""@(Get-Command  -CommandType Cmdlet, Function, Script, ExternalScript, Workflow),@(get-module)"",""ScriptBlockId"":""a13f8e53-986b-4563-ab77-d13003e435a1"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389880"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714552084"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""ipmo ISE"",""ScriptBlockId"":""22b10e44-5649-48b1-a97b-271a2e6560f4"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389889"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714558689"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":"".\""\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\RemoteExchange.ps1\""; Connect-ExchangeServer -auto -ClientApplication:ManagementShell"",""ScriptBlockId"":""1b951ffd-5883-4756-8548-8293a2d4fe27"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389892"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714558711"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""# Localized\t04/18/2019 10:50 PM (GMT)\t303:4.80.0411 \tRemoteExchange.strings.psd1\nConvertFrom-StringData @'\n###PSLOC\nres_types_file_not_loaded=The Exchange types file wasn't loaded because not all of the required files could be found.\nres_welcome_message=\\n         Welcome to the Exchange Management Shell!\\n\nres_full_list=Full list of cmdlets:\nres_0003=Get-Command\nres_only_exchange_cmdlets=Only Exchange cmdlets:\nres_0005=Get-ExCommand\nres_cmdlets_specific_role=Cmdlets that match a specific string:\nres_0007=Help *<string>*\nres_general_help=Get general help:\nres_0009=Help\nres_help_for_cmdlet=Get help for a cmdlet:\nres_0011=Help <cmdlet name> or <cmdlet name> -?\nres_updatable_help=Show quick reference guide:\nres_team_blog=Exchange team blog:\nres_0015=Get-ExBlog\nres_show_full_output=Show full output for a command:\nres_0017=<command> | Format-List\\n\nres_0018=QuickRef\n\n###PSLOC\n'@\n"",""ScriptBlockId"":""78903554-e7ff-4c60-808d-f8dca86d86e9"",""Path"":""""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389891"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714558704"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""2"",""MessageTotal"":""2"",""ScriptBlockText"":""1DB7LA0FCyORWiKSkHGRL4RdIjOltrZp++dExfsst7Z6vJz4+U9\n# eZNI58fVY3KRzbm73OjplfSAB3iNSkHN0wuccK0TrZsvY87TRyYAmyK2qBqi/7eU\n# Wt93Sw8ALBMY72LKaUmVvaxq/COpKePlHMbhHEbqtTaLt61udBOjNHvc4cwY5QID\n# AQABo4IBGzCCARcwHQYDVR0OBBYEFGRzJT/1HI+SftAGhdk5NDzA3jFnMB8GA1Ud\n# IwQYMBaAFNVjOlyKMZDzQ3t8RhvFM2hahW1VMFYGA1UdHwRPME0wS6BJoEeGRWh0\n# dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1RpbVN0\n# YVBDQV8yMDEwLTA3LTAxLmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKG\n# Pmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljVGltU3RhUENB\n# XzIwMTAtMDctMDEuY3J0MAwGA1UdEwEB/wQCMAAwEwYDVR0lBAwwCgYIKwYBBQUH\n# AwgwDQYJKoZIhvcNAQELBQADggEBAAAAbex8WBtSLDiBYxXxU7GVsgb8IgxKJyIO\n# 0hmc8vzg4w3iUl5Xkt4mv4dgFyjHmu5Zmbj0rb2IGYm/pWJcy0/zWlhnUQUzvfTp\n# j7MsiH+1Lnvg95awe88PRA7FDgc4zYY0+8UB1S+jzPmmBX/kT6U+7rW5QIgFMMRK\n# Ic743utqCpvcwRM+pEo8s0Alwo8NxqUrOeYY+WfNjo/XOin/tr3RVwEdEopD+FO+\n# f/wLxjpv4y+TmRgmHrso1tVVy64FbIVIxlMcZ6cee4dWD2y8fv6Wb9X/AhtlQook\n# k7QdCbKh3JJ4P8ksLs02wNhGkU37b10tG3HR5bJmiwmZPyopsEgwggZxMIIEWaAD\n# AgECAgphCYEqAAAAAAACMA0GCSqGSIb3DQEBCwUAMIGIMQswCQYDVQQGEwJVUzET\n# MBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV\n# TWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQDEylNaWNyb3NvZnQgUm9vdCBD\n# ZXJ0aWZpY2F0ZSBBdXRob3JpdHkgMjAxMDAeFw0xMDA3MDEyMTM2NTVaFw0yNTA3\n# MDEyMTQ2NTVaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAw\n# DgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x\n# JjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMIIBIjANBgkq\n# hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqR0NvHcRijog7PwTl/X6f2mUa3RUENWl\n# CgCChfvtfGhLLF/Fw+Vhwna3PmYrW/AVUycEMR9BGxqVHc4JE458YTBZsTBED/Fg\n# iIRUQwzXTbg4CLNC3ZOs1nMwVyaCo0UN0Or1R4HNvyRgMlhgRvJYR4YyhB50YWeR\n# X4FUsc+TTJLBxKZd0WETbijGGvmGgLvfYfxGwScdJGcSchohiq9LZIlQYrFd/Xcf\n# PfBXday9ikJNQFHRD5wGPmd/9WbAA5ZEfu/QS/1u5ZrKsajyeioKMfDaTgaRtogI\n# Neh4HLDpmc085y9Euqf03GS9pAHBIAmTeM38vMDJRF1eFpwBBU8iTQIDAQABo4IB\n# 5jCCAeIwEAYJKwYBBAGCNxUBBAMCAQAwHQYDVR0OBBYEFNVjOlyKMZDzQ3t8RhvF\n# M2hahW1VMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIBhjAP\n# BgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjRPZSQW9fOmhjE\n# MFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kv\n# Y3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBaBggrBgEF\n# BQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9w\n# a2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MIGgBgNVHSABAf8E\n# gZUwgZIwgY8GCSsGAQQBgjcuAzCBgTA9BggrBgEFBQcCARYxaHR0cDovL3d3dy5t\n# aWNyb3NvZnQuY29tL1BLSS9kb2NzL0NQUy9kZWZhdWx0Lmh0bTBABggrBgEFBQcC\n# AjA0HjIgHQBMAGUAZwBhAGwAXwBQAG8AbABpAGMAeQBfAFMAdABhAHQAZQBtAGUA\n# bgB0AC4gHTANBgkqhkiG9w0BAQsFAAOCAgEAB+aIUQ3ixuCYP4FxAz2do6Ehb7Pr\n# psz1Mb7PBeKp/vpXbRkws8LFZslq3/Xn8Hi9x6ieJeP5vO1rVFcIK1GCRBL7uVOM\n# zPRgEop2zEBAQZvcXBf/XPleFzWYJFZLdO9CEMivv3/Gf/I3fVo/HPKZeUqRUgCv\n# OA8X9S95gWXZqbVr5MfO9sp6AG9LMEQkIjzP7QOllo9ZKby2/QThcJ8ySif9Va8v\n# /rbljjO7Yl+a21dA6fHOmWaQjP9qYn/dxUoLkSbiOewZSnFjnXshbcOco6I8+n99\n# lmqQeKZt0uGc+R38ONiU9MalCpaGpL2eGq4EQoO4tYCbIjggtSXlZOz39L9+Y1kl\n# D3ouOVd2onGqBooPiRa6YacRy5rYDkeagMXQzafQ732D8OE7cQnfXXSYIghh2rBQ\n# Hm+98eEA3+cxB6STOvdlR3jo+KhIq/fecn5ha293qYHLpwmsObvsxsvYgrRyzR30\n# uIUBHoD7G4kqVDmyW9rIDVWZeodzOwjmmC3qjeAzLhIp9cAvVCch98isTtoouLGp\n# 25ayp0Kiyc8ZQU3ghvkqmqMRZjDTu3QyS99je/WZii8bxyGvWbWu3EQ8l1Bx16HS\n# xVXjad5XwdHeMMD9zOZN+w2/XU/pnR4ZOC+8z1gFLu8NoFA12u8JJxzVs341Hgi6\n# 2jbb01+P3nSISRKhggLSMIICOwIBATCB/KGB1KSB0TCBzjELMAkGA1UEBhMCVVMx\n# EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT\n# FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEpMCcGA1UECxMgTWljcm9zb2Z0IE9wZXJh\n# dGlvbnMgUHVlcnRvIFJpY28xJjAkBgNVBAsTHVRoY"






























"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389901"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714558960"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""{ [System.Reflection.Assembly]::LoadFrom((join-path $global:exbin $_)) }"",""ScriptBlockId"":""90546d57-c58d-4fe1-8dd9-12727b866c63"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\RemoteExchange.ps1""}}"


Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389895"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714558759"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function WidenWindow([int]$preferredWidth)\n{\n  [int]$maxAllowedWindowWidth = $host.ui.rawui.MaxPhysicalWindowSize.Width\n  if ($preferredWidth -lt $maxAllowedWindowWidth)\n  {\n    # first, buffer size has to be set to windowsize or more\n    # this operation does not usually fail\n    $current=$host.ui.rawui.BufferSize\n    $bufferWidth = $current.width\n    if ($bufferWidth -lt $preferredWidth)\n    {\n      $current.width=$preferredWidth\n      $host.ui.rawui.BufferSize=$current\n    }\n    # else not setting BufferSize as it is already larger\n    \n    # setting window size. As we are well within max limit, it won't throw exception.\n    $current=$host.ui.rawui.WindowSize\n    if ($current.width -lt $preferredWidth)\n    {\n      $current.width=$preferredWidth\n      $host.ui.rawui.WindowSize=$current\n    }\n    #else not setting WindowSize as it is already larger\n  }\n}"",""ScriptBlockId"":""9264ae2f-5e16-4d02-be64-0fb3c63595da"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\RemoteExchange.ps1""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389908"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714559028"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""# Localized\t04/18/2019 10:50 PM (GMT)\t303:4.80.0411 \tCommonConnectFunctions.strings.psd1\nConvertFrom-StringData @'\n###PSLOC\nres_0000=Tip of the day #{0}:\\n\nres_0001=Clearing session cache and registry entry...\nres_0002=Can't generate Export-Module for the current session using Import-PSSession.\nres_0003=Connected to {0}.\nres_0004=Machine: {0}\nres_0005=Exchange tips file {0} not found!\n###PSLOC\n'@\n"",""ScriptBlockId"":""916c5fd3-4bf0-461f-9759-5114a51e5a10"",""Path"":""""}}"





























Raw Event

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389907"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714559025"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""3"",""MessageTotal"":""3"",""ScriptBlockText"":""UzET\n# MBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV\n# TWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQDEylNaWNyb3NvZnQgUm9vdCBD\n# ZXJ0aWZpY2F0ZSBBdXRob3JpdHkgMjAxMDAeFw0xMDA3MDEyMTM2NTVaFw0yNTA3\n# MDEyMTQ2NTVaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAw\n# DgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x\n# JjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMIIBIjANBgkq\n# hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqR0NvHcRijog7PwTl/X6f2mUa3RUENWl\n# CgCChfvtfGhLLF/Fw+Vhwna3PmYrW/AVUycEMR9BGxqVHc4JE458YTBZsTBED/Fg\n# iIRUQwzXTbg4CLNC3ZOs1nMwVyaCo0UN0Or1R4HNvyRgMlhgRvJYR4YyhB50YWeR\n# X4FUsc+TTJLBxKZd0WETbijGGvmGgLvfYfxGwScdJGcSchohiq9LZIlQYrFd/Xcf\n# PfBXday9ikJNQFHRD5wGPmd/9WbAA5ZEfu/QS/1u5ZrKsajyeioKMfDaTgaRtogI\n# Neh4HLDpmc085y9Euqf03GS9pAHBIAmTeM38vMDJRF1eFpwBBU8iTQIDAQABo4IB\n# 5jCCAeIwEAYJKwYBBAGCNxUBBAMCAQAwHQYDVR0OBBYEFNVjOlyKMZDzQ3t8RhvF\n# M2hahW1VMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIBhjAP\n# BgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjRPZSQW9fOmhjE\n# MFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kv\n# Y3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBaBggrBgEF\n# BQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9w\n# a2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MIGgBgNVHSABAf8E\n# gZUwgZIwgY8GCSsGAQQBgjcuAzCBgTA9BggrBgEFBQcCARYxaHR0cDovL3d3dy5t\n# aWNyb3NvZnQuY29tL1BLSS9kb2NzL0NQUy9kZWZhdWx0Lmh0bTBABggrBgEFBQcC\n# AjA0HjIgHQBMAGUAZwBhAGwAXwBQAG8AbABpAGMAeQBfAFMAdABhAHQAZQBtAGUA\n# bgB0AC4gHTANBgkqhkiG9w0BAQsFAAOCAgEAB+aIUQ3ixuCYP4FxAz2do6Ehb7Pr\n# psz1Mb7PBeKp/vpXbRkws8LFZslq3/Xn8Hi9x6ieJeP5vO1rVFcIK1GCRBL7uVOM\n# zPRgEop2zEBAQZvcXBf/XPleFzWYJFZLdO9CEMivv3/Gf/I3fVo/HPKZeUqRUgCv\n# OA8X9S95gWXZqbVr5MfO9sp6AG9LMEQkIjzP7QOllo9ZKby2/QThcJ8ySif9Va8v\n# /rbljjO7Yl+a21dA6fHOmWaQjP9qYn/dxUoLkSbiOewZSnFjnXshbcOco6I8+n99\n# lmqQeKZt0uGc+R38ONiU9MalCpaGpL2eGq4EQoO4tYCbIjggtSXlZOz39L9+Y1kl\n# D3ouOVd2onGqBooPiRa6YacRy5rYDkeagMXQzafQ732D8OE7cQnfXXSYIghh2rBQ\n# Hm+98eEA3+cxB6STOvdlR3jo+KhIq/fecn5ha293qYHLpwmsObvsxsvYgrRyzR30\n# uIUBHoD7G4kqVDmyW9rIDVWZeodzOwjmmC3qjeAzLhIp9cAvVCch98isTtoouLGp\n# 25ayp0Kiyc8ZQU3ghvkqmqMRZjDTu3QyS99je/WZii8bxyGvWbWu3EQ8l1Bx16HS\n# xVXjad5XwdHeMMD9zOZN+w2/XU/pnR4ZOC+8z1gFLu8NoFA12u8JJxzVs341Hgi6\n# 2jbb01+P3nSISRKhggLSMIICOwIBATCB/KGB1KSB0TCBzjELMAkGA1UEBhMCVVMx\n# EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT\n# FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEpMCcGA1UECxMgTWljcm9zb2Z0IE9wZXJh\n# dGlvbnMgUHVlcnRvIFJpY28xJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOkM0QkQt\n# RTM3Ri01RkZDMSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNl\n# oiMKAQEwBwYFKw4DAhoDFQARLfhJYnsN9tIb+BshDBOvOBnw8qCBgzCBgKR+MHwx\n# CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt\n# b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1p\n# Y3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMA0GCSqGSIb3DQEBBQUAAgUA5JE9\n# gTAiGA8yMDIxMDcwODEzMDE1M1oYDzIwMjEwNzA5MTMwMTUzWjB3MD0GCisGAQQB\n# hFkKBAExLzAtMAoCBQDkkT2BAgEAMAoCAQACAh+TAgH/MAcCAQACAhFgMAoCBQDk\n# ko8BAgEAMDYGCisGAQQBhFkKBAIxKDAmMAwGCisGAQQBhFkKAwKgCjAIAgEAAgMH\n# oSChCjAIAgEAAgMBhqAwDQYJKoZIhvcNAQEFBQADgYEADNnFMRuGt2zHHgo/l9Yv\n# gtCqT40Wdbv6ucvIrnZFSIJLeSLjDSDiuCBbCWiabmoaBw3l1vrTOBp0VP6Hx7a8\n# Tcx4oRpOsAOhU7nxuQCRYD/NElglpi7yKq4OUBakBV6sow7RsjUmYSRXdzaBCaYK\n# JRJmMro/Rvk2XABV+ofgkIIxggMNMIIDCQIBATCBkzB8MQswCQYDVQQGEwJVUzET\n# MBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV\n# TWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1T\n# dGFtcCBQQ0EgMjAxMAITMwAAAVdEB2Lcb+i+KgAAAAABVzANBglghkgBZQMEAgEF\n# AKCCAUowGgYJKoZIhvcN"










































Raw Event

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389912"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714559034"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""2"",""MessageTotal"":""4"",""ScriptBlockText"":""ptionsTimeout -OpenTimeout $sessionOptionsTimeout;\n\t$setupRegistryEntry = get-itemproperty HKLM:\\SOFTWARE\\Microsoft\\ExchangeServer\\v15\\Setup -erroraction:silentlycontinue\n\tif ( $setupRegistryEntry -ne $null)\n\t{\n\t\t$clientVersion = \""{0}.{1}.{2}.{3}\"" -f $setupRegistryEntry.MsiProductMajor, $setupRegistryEntry.MsiProductMinor, $setupRegistryEntry.MsiBuildMajor, $setupRegistryEntry.MsiBuildMinor\n\t\t$connectionUri = \""http://$fqdn/powershell?serializationLevel=Full;ExchClientVer=$clientVersion\""\n\t}\n\telse\n\t{\n\t\t$connectionUri = \""http://$fqdn/powershell?serializationLevel=Full\""\n\t}\n\t\n\tif ($ClientApplication -ne $null)\n\t{\n\t\t$connectionUri = $connectionUri + \"";clientApplication=$ClientApplication\""\n\t}\n\n\tif ($targetServerUriParameter -ne $null)\n\t{\n\t\t$connectionUri = $connectionUri + \"";TargetServer=$targetServerUriParameter\""\n\t}\n\t\n\t$contents = 'New-PSSession -ConnectionURI \""$connectionUri\"" -ConfigurationName Microsoft.Exchange -SessionOption $so'\n\t\n\tif (-not $UseWIA)\n\t{\n\t\t$contents = $contents + ' -Authentication Kerberos -Credential $credential'\n\t}\n\tif ($SuppressError)\n\t{\n\t\t$contents = $contents + ' -erroraction silentlycontinue'\n\t}\n\tif ($AllowRedirection)\n\t{\n\t\t$contents = $contents + ' -AllowRedirection'\n\t}\n\t[ScriptBlock] $command = $executioncontext.InvokeCommand.NewScriptBlock([string]::join(\""`n\"", $contents))\n\t$session=invoke-command -Scriptblock $command\n\t\n  if (!$?)\n\t{\n\t  # ERROR_ACCESS_DENIED = 5\n\t  # ERROR_LOGON_FAILURE = 1326\n\t  if (!(5 -eq $error[0].exception.errorcode) -and\n\t\t  !(1326 -eq $error[0].exception.errorcode))\n\t  {\n\t\t\t#Write-Verbose ($ConnectFunctions_LocalizedStrings.res_0006 -f $fqdn)\n\t\t\treturn\n\t  }\n\t  else\n\t  {\n\t    # no retries if we get 5 (access denied) or 1326 (logon failure)\n\t    #$REVIEW$ connectedFqdn is not set. Is it okay?\n\t    break connectScope\n\t  }\n\t}\n  $session\n}\n\nfunction _OpenExchangeRunspace([String]$fqdn, \n\t\t\t\t[System.Management.Automation.PSCredential] $credential, \n\t\t\t\t[bool]$UseWIA=$true, \n\t\t\t\t[bool]$SuppressError=$false,\n\t\t\t\t$ClientApplication=$null,\n\t\t\t\t$AllowRedirection=$false)\n{\n  $global:remoteSession = _NewExchangeRunspace $fqdn $credential $UseWIA $SuppressError $ClientApplication $AllowRedirection\n\n  if ($global:remoteSession -ne $null)\n  {\n\t  $global:connectedFqdn = $fqdn\n\t  break connectScope\n  }\n}\n\nfunction CreateOrGetExchangeSession(\n\t\t\t[String]$fqdn, \n\t\t\t[System.Management.Automation.PSCredential] $credential=$null, \n\t\t\t[bool]$UseWIA=$true, \n\t\t\t[bool]$SuppressError=$false,\n\t\t\t[String]$targetServerUriParameter=$null)\n{\n   $existingSession = @(Get-PSSession | Where {$_.ComputerName -eq $fqdn -and $_.Availability -eq 'Available' -and $_.ConfigurationName -eq 'Microsoft.Exchange'})\n\n   if (($existingSession.Count -gt 0) -and ($targetServerUriParameter -eq $null))\n   {\n    if ($existingSession.Count -gt 1)\n    {\n      Write-Warning ($ConnectFunctions_LocalizedStrings.res_0007 -f $fqdn)\n    }\n    Write-Verbose ($ConnectFunctions_LocalizedStrings.res_0008 -f $fqdn)\n    return $existingSession[0]\n   }\n   else\n   {\n    Write-Verbose ($ConnectFunctions_LocalizedStrings.res_0009 -f $fqdn)\n    _NewExchangeRunspace $fqdn $credential $UseWIA $SuppressError $null $false $targetServerUriParameter\n   }\n}\n\nfunction _ConnectToAnyServer ($servers, \n\t\t\t\t$credential, \n\t\t\t\t[bool]$UseWIA=$false, \n\t\t\t\t[bool]$SuppressError=$false, \n\t\t\t\t[Microsoft.Exc"




















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389906"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714559025"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""2"",""MessageTotal"":""3"",""ScriptBlockText"":""am>\n        /// <param name=\""pUiInfo\"">\n        /// A pointer to a CREDUI_INFO structure that contains information \n        /// for customizing the appearance of the dialog box.\n        /// </param>\n        /// <param name=\""dwAuthError\"">\n        /// A Windows error code, defined in WinError.h, that is displayed in the dialog box.\n        /// If credentials previously collected were not valid, the caller uses this parameter\n        /// to pass the error message from the API that collected the credentials (for example, Winlogon)\n        /// to this function. The corresponding error message is formatted and displayed in the dialog box.\n        /// Set the value of this parameter to zero to display no error message.\n        /// </param>\n        /// <param name=\""pszPackage\"">\n        /// contains the name of authentication package\n        /// </param>\n        /// <param name=\""pInputAuthIdentity\""></param>\n        /// <param name=\""ppAuthIdentity\""></param>\n        /// <param name=\""pfSave\"">\n        /// A pointer to a Boolean value that, on input, specifies whether the Save check box is \n        /// selected in the dialog box that this function displays. On output, the value of this \n        /// parameter specifies whether the Save check box was selected when the user clicks the\n        /// Submit button in the dialog box. Set this parameter to NULL to ignore the Save check box.\n        /// \n        /// This parameter is ignored if the CREDUIWIN_CHECKBOX flag is not set in the dwFlags parameter.\n        /// </param>\n        /// <param name=\""dwFlags\"">\n        /// 1. SSPIPFC_CHECKBOX  0x1 -- If applications need to show the \n        /// checkbox to save credentials, the SSPIPFC_CHECKBOX should be set.\n        /// 2. SSPIPRFC_SAVE_CRED_BY_CALLER 0x2 \n        /// By default, the credential provier() saves the credentials to Credman/KeyRing \n        /// with CRED_PERSIST_ENTERPRISE persistence(http://msdn2.microsoft.com/en-us/library/aa374788(VS.85).aspx),\n        /// but the caller can overrides this behavior by supplying SSPIPFC_SAVE_CRED_BY_CALLER.\n        /// When this flag is set, the credential provider does not save the credentials to credman/keyring. \n        /// </param>\n        /// <returns></returns>\n        [DllImport(\""credui\"", SetLastError = false, CharSet = CharSet.Unicode)]\n        private static extern int SspiPromptForCredentials(\n            string pszTargetName,\n            ref CREDUI_INFO pUiInfo,\n            int dwAuthError,\n            string pszPackage,\n            IntPtr pInputAuthIdentity,\n            ref IntPtr ppAuthIdentity,\n            ref bool pfSave,\n            int dwFlags);\n\n        [DllImport(\""sspicli\"", SetLastError = false, CharSet = CharSet.Unicode)]\n        private static extern int SspiEncodeAuthIdentityAsStrings(\n            IntPtr pAuthIdentity,\n            ref StringBuilder pszUserName,\n            ref StringBuilder pszDomainName,\n            ref StringBuilder pszPackedCredentialsString);\n    }\n}\n\""@\n\n######### END: PInvoke #####################################################################\n\nfunction EnsureLiveIDCredentialTypeIsLoaded\n{\n    if (!('Microsoft.PowerShell.Commands.GetLiveIDCredential' -as [type]))\n    {\n        # LiveIDCredential Type is not loaded. So load it using Add-Type\n        try\n        {\n\t\t\tadd-type -TypeDefinition $getLiveIDCredCode\n\t\t}\n\t\tcatch\n\t\t{\n\t\t\t# We can ignore any TYPE_ALREADY_EXISTS exception\n\t\t\tif ($error[0].FullyQualifiedErrorId -notmatch \"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389914"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714559034"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""4"",""MessageTotal"":""4"",""ScriptBlockText"":""SIG # End signature block\n"",""ScriptBlockId"":""e3a53c5c-ab5e-4223-9d68-1f1e6b288777"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\ConnectFunctions.ps1""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389905"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714559025"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""3"",""ScriptBlockText"":""# Copyright (c) 2010 Microsoft Corporation. All rights reserved. \n# This script contains all the common Powershell functions required to connect to remote PS, both in Enterprise and Datacenter\n\n#load hashtable of localized string\nImport-LocalizedData -BindingVariable CommonConnectFunctions_LocalizedStrings -FileName CommonConnectFunctions.strings.psd1\n\n## PROMPT ####################################################################\n\n## PowerShell can support very rich prompts, this simple one prints the current\n## working directory and updates the console window title to show the machine \n## name and directory.  \n\nfunction prompt \n{ \n\t$cwd = (get-location).Path\n\t$host.UI.RawUI.WindowTitle = ($CommonConnectFunctions_LocalizedStrings.res_0004 -f $global:connectedFqdn)\n\t$host.UI.Write(\""Yellow\"", $host.UI.RawUI.BackGroundColor, \""[PS]\"")\n\t\"" $cwd>\"" \n}\n\n## generates a tip of the day \n\nfunction get-tip\n{\n    param($local:number=$null) \n\n    if( ($global:exrandom -eq $null) -or ($exrandom -isnot [System.Random]))\n    {\n        $global:exrandom = new-object System.Random\n    }\n\n    $exchculture = [System.Threading.Thread]::CurrentThread.CurrentUICulture\n    $foundculture = $false\n    while($exchculture -ne [Globalization.CultureInfo]::InvariantCulture -and !$foundculture)\n    {\n    \tif ( test-path \""$($global:exbin)\\$($exchculture.Name)\\extips.xml\"" )\n    \t{\n    \t\t$foundculture = $true\n    \t}\n    \telse\n    \t{\n    \t\t$exchculture = $exchculture.Parent\n    \t}\n    }\n\n\tif($foundculture -eq $true)\n    {\n\t$exchculture = $exchculture.Name \n    }\n    else \n    {\n\t$exchculture = 'en'\n    } \n\n    if (test-path \""$($global:exbin)\\$exchculture\\extips.xml\"")\n    {\n\n        $local:tips = [xml](get-content $global:exbin\\$exchculture\\extips.xml)\n        if($local:number -eq $null)\n        {\n            $local:temp = $global:exrandom.Next( 0, $local:tips.topic.developerConceptualDocument.introduction.table.row.Count )\n        }\n        else\n        {\n            $local:temp = $local:number\n        }\n        $local:nav = $tips.topic.developerConceptualDocument.introduction.table.row[$local:temp].entry.CreateNavigator()\n        write-host -fore Yellow ( $CommonConnectFunctions_LocalizedStrings.res_0000 -f $local:temp )\n        [void] $nav.MoveToFirstChild()\n        do\n        {\n             write-host $nav.Value\n        }\n        while( $nav.MoveToNext() )\n        \""\""\n    }\n    else\n    {\n        ($CommonConnectFunctions_LocalizedStrings.res_0005 -f \""$($global:exbin)\\$exchculture\\extips.xml\"")\n    }\n\n    trap\n    {\n\tcontinue\n    }\n}\n\nfunction ImportPSSession ([bool]$ClearCache, [switch]$AllowClobber)\n{\n\tif (!($global:remoteSession -eq $null))\n\t{\n\t    # do not display all the commands - turn off verbose output\n\t    set-variable VerbosePreference -value SilentlyContinue\n\n\t    $serverName = $global:remoteSession.ComputerName\n\t    $modulePath = \""$env:APPDATA\\Microsoft\\Exchange\\RemotePowerShell\\$serverName\""\n\t    $remotePSSettinsPath = \""HKCU:Software\\Microsoft\\ExchangeServer\\v15\\RemotePowerShell\\$serverName\""\n\n\t    if ($ClearCache)\n\t    {\n\t        Write-Host -fore Yellow $CommonConnectFunctions_LocalizedStrings.res_0001\n\t        ClearRegistryEntryAndModule $remotePSSettinsPath $modulePath\n\t    }\n\t    \n\t    try\n\t    {\n\t        if ($AllowClobber)\n\t        {\n\t            ExportPSSessionAndImportModule $remotePSSettinsPath $modulePath -AllowClobber\n\t        }\n\t        e"







































Raw Event

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389911"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714559034"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""4"",""ScriptBlockText"":""#load hashtable of localized string\nImport-LocalizedData -BindingVariable ConnectFunctions_LocalizedStrings -FileName ConnectFunctions.strings.psd1\n\n## Default and minimum timeout value for sessions  = 3 minutes\n## Maximum timeout value for sessions              = 15 minutes\n##\n$sessionOptionsTimeout = 180000;\nif (($env:MsExchEmsTimeout -ne $null) -and ($env:MsExchEmsTimeout -gt 180000) -and ($env:MsExchEmsTimeout -lt 900001))\n{\n    $sessionOptionsTimeout = $env:MsExchEmsTimeout;\n}\n##\n\n# help file specific for the function Connect-ExchangeServer.\n# can be viewed by running: get-help Connect-ExchangeServer\nfunction Connect-ExchangeServer ($ServerFqdn, [switch]$Auto, [switch]$Prompt, $UserName, $Forest,[switch]$ClearCache, $ClientApplication=$null, [switch]$AllowClobber)\n{\n#.EXTERNALHELP Connect-ExchangeServer-help.xml\n\tset-variable VerbosePreference -value Continue\n\t:connectScope do\n\t{\n\t\tif (!$Auto -and ($ServerFqdn -eq $null) -and !$Prompt)\n\t\t{\n\t\t\t_PrintUsageAndQuit\n\t\t}\n\n\t\t$useWIA = $true\n\t\tif (!($userName -eq $null))\n\t\t{\n\t\t    $credential = get-credential $username\n\t\t    $useWIA = $false\n\t\t}\n\n\n\t\tif (!($ServerFqdn -eq $null))\n\t\t{\n\t\t\tif ($Auto -or !($Forest -eq $null)) { _PrintUsageAndQuit }\n\n\t\t\t_OpenExchangeRunspace $ServerFqdn $credential $useWIA -ClientApplication:$ClientApplication\n\t\t}\n\n\t\tif ($Auto)\n\t\t{\n\t\t\t# We should provide the $credential before $Forest, and we cannot assume useWIA $true here. It should be read from $useWIA\n\t\t\t_AutoDiscoverAndConnect $credential $Forest -useWIA:$useWIA -ClientApplication:$ClientApplication\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!($Forest -eq $null)) { _PrintUsageAndQuit }\n\t\t}\n\n\t\tWrite-Host $ConnectFunctions_LocalizedStrings.res_0000\n\t\t$fqdn=read-host -prompt $ConnectFunctions_LocalizedStrings.res_0001\n\t\t_OpenExchangeRunspace $fqdn $credential $useWIA -ClientApplication:$ClientApplication\n\t}\n\twhile ($false) #connectScope\n\t\n\tif ($ClearCache)\n\t{\n\t\tif ($AllowClobber)\n\t\t{\n\t\t\tImportPSSession -ClearCache:$true -AllowClobber\n\t\t}\n\t\telse\n\t\t{\n\t\t\tImportPSSession -ClearCache:$true\n\t\t}\n\t}\n\telse\n\t{\n\t\tif ($AllowClobber)\n\t\t{\n\t\t\tImportPSSession -ClearCache:$false -AllowClobber\n\t\t}\n\t\telse\n\t\t{\n\t\t\tImportPSSession -ClearCache:$false\n\t\t}\n\t}\n}\n\nfunction Discover-ExchangeServer ([System.Management.Automation.PSCredential] $Credential, \n\t\t\t\t\t\t\t\t\t$Forest, \n\t\t\t\t\t\t\t\t\t[bool]$UseWIA=$false, \n\t\t\t\t\t\t\t\t\t[bool]$SuppressError=$false, \n\t\t\t\t\t\t\t\t\t[Microsoft.Exchange.Data.ServerVersion]$CurrentVersion=$null,\n\t\t\t\t\t\t\t\t\t$ClientApplication = \""EMC\"",\n\t\t\t\t\t\t\t\t\t$AllowRedirection=$true)\n{\n\tset-variable VerbosePreference -value Continue\n\t:connectScope do\n\t{\n\t\t_AutoDiscoverAndConnect $Credential $Forest $UseWIA $SuppressError $CurrentVersion $ClientApplication $AllowRedirection\n\t}\n\twhile ($false) #connectScope\n\n\tif (!($global:remoteSession -eq $null))\n\t{\n\t\t$global:remoteSession.ComputerName\n\t\tremove-pssession $global:remoteSession\n\t}\n\telse\n\t{\n\t\tif ($SuppressError -and ($error.Count -ne 0))\n\t\t{\n\t\t\t# When we suppress the error message, we still want the last error\n\t\t\tWrite-Error $error[0]\n\t\t}\n\t}\n}\n\nfunction _AutoDiscoverAndConnect ([System.Management.Automation.PSCredential]$Credential, \n\t\t\t\t\t\t\t\t\t$Forest, \n\t\t\t\t\t\t\t\t\t[bool]$UseWIA=$false, \n\t\t\t\t\t\t\t\t\t[bool]$SuppressError=$false, \n\t\t\t\t\t\t\t\t\t[Micro"




















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389915"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714559038"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""# Localized\t04/18/2019 10:50 PM (GMT)\t303:4.80.0411 \tConnectFunctions.strings.psd1\nConvertFrom-StringData @'\n###PSLOC\nres_0000=Failed to connect to an Exchange server in the current site.\nres_0001=Enter the server FQDN where you want to connect.\nres_0002=No Exchange servers are available in the Active Directory site {0}. Connecting to an Exchange server in another Active Directory site.\nres_0003=No Exchange servers are available in any Active Directory sites. You can't connect to remote Powershell on a computer that only has the Management Tools role installed.\nres_0004=An exception was thrown while trying to find the host name in DNS topology. Connecting to local host will be skipped.\nres_0005=Connecting to {0}.\nres_0006=Could not connect to {0}.\nres_0007=There's more than one available PowerShell session for {0}. Reusing the first one.\nres_0008=Reusing an existing PowerShell session for {0}.\nres_0009=Creating a new PowerShell session for {0}.\nres_0010=The service {0} isn't running. Connecting to remote Powershell requires this service to be running.\nres_0011=Select from server {0}.\nres_0012=The parameters you specified are incorrect. To view Help, run: Get-Help Connect-ExchangeServer.\nres_0013=Service Instance\nres_0014=There are multiple service instances in the envrionment. Please select one.\n###PSLOC\n'@\n"",""ScriptBlockId"":""b5caaabc-d98f-47d9-9bde-4f5c2eab19ff"",""Path"":""""}}"





















Raw Event

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389913"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714559034"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""3"",""MessageTotal"":""4"",""ScriptBlockText"":""F0MJoW3Naw9V\n# EV1UL8PydKPlEMhZWvwhMpjSrhykT6CCDYEwggX/MIID56ADAgECAhMzAAAB32vw\n# LpKnSrTQAAAAAAHfMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNVBAYTAlVTMRMwEQYD\n# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy\n# b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p\n# bmcgUENBIDIwMTEwHhcNMjAxMjE1MjEzMTQ1WhcNMjExMjAyMjEzMTQ1WjB0MQsw\n# CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u\n# ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMR4wHAYDVQQDExVNaWNy\n# b3NvZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB\n# AQC2uxlZEACjqfHkuFyoCwfL25ofI9DZWKt4wEj3JBQ48GPt1UsDv834CcoUUPMn\n# s/6CtPoaQ4Thy/kbOOg/zJAnrJeiMQqRe2Lsdb/NSI2gXXX9lad1/yPUDOXo4GNw\n# PjXq1JZi+HZV91bUr6ZjzePj1g+bepsqd/HC1XScj0fT3aAxLRykJSzExEBmU9eS\n# yuOwUuq+CriudQtWGMdJU650v/KmzfM46Y6lo/MCnnpvz3zEL7PMdUdwqj/nYhGG\n# 3UVILxX7tAdMbz7LN+6WOIpT1A41rwaoOVnv+8Ua94HwhjZmu1S73yeV7RZZNxoh\n# EegJi9YYssXa7UZUUkCCA+KnAgMBAAGjggF+MIIBejAfBgNVHSUEGDAWBgorBgEE\n# AYI3TAgBBggrBgEFBQcDAzAdBgNVHQ4EFgQUOPbML8IdkNGtCfMmVPtvI6VZ8+Mw\n# UAYDVR0RBEkwR6RFMEMxKTAnBgNVBAsTIE1pY3Jvc29mdCBPcGVyYXRpb25zIFB1\n# ZXJ0byBSaWNvMRYwFAYDVQQFEw0yMzAwMTIrNDYzMDA5MB8GA1UdIwQYMBaAFEhu\n# ZOVQBdOCqhc3NyK1bajKdQKVMFQGA1UdHwRNMEswSaBHoEWGQ2h0dHA6Ly93d3cu\n# bWljcm9zb2Z0LmNvbS9wa2lvcHMvY3JsL01pY0NvZFNpZ1BDQTIwMTFfMjAxMS0w\n# Ny0wOC5jcmwwYQYIKwYBBQUHAQEEVTBTMFEGCCsGAQUFBzAChkVodHRwOi8vd3d3\n# Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NlcnRzL01pY0NvZFNpZ1BDQTIwMTFfMjAx\n# MS0wNy0wOC5jcnQwDAYDVR0TAQH/BAIwADANBgkqhkiG9w0BAQsFAAOCAgEAnnqH\n# tDyYUFaVAkvAK0eqq6nhoL95SZQu3RnpZ7tdQ89QR3++7A+4hrr7V4xxmkB5BObS\n# 0YK+MALE02atjwWgPdpYQ68WdLGroJZHkbZdgERG+7tETFl3aKF4KpoSaGOskZXp\n# TPnCaMo2PXoAMVMGpsQEQswimZq3IQ3nRQfBlJ0PoMMcN/+Pks8ZTL1BoPYsJpok\n# t6cql59q6CypZYIwgyJ892HpttybHKg1ZtQLUlSXccRMlugPgEcNZJagPEgPYni4\n# b11snjRAgf0dyQ0zI9aLXqTxWUU5pCIFiPT0b2wsxzRqCtyGqpkGM8P9GazO8eao\n# mVItCYBcJSByBx/pS0cSYwBBHAZxJODUqxSXoSGDvmTfqUJXntnWkL4okok1FiCD\n# Z4jpyXOQunb6egIXvkgQ7jb2uO26Ow0m8RwleDvhOMrnHsupiOPbozKroSa6paFt\n# VSh89abUSooR8QdZciemmoFhcWkEwFg4spzvYNP4nIs193261WyTaRMZoceGun7G\n# CT2Rl653uUj+F+g94c63AhzSq4khdL4HlFIP2ePv29smfUnHtGq6yYFDLnT0q/Y+\n# Di3jwloF8EWkkHRtSuXlFUbTmwr/lDDgbpZiKhLS7CBTDj32I0L5i532+uHczw82\n# oZDmYmYmIUSMbZOgS65h797rj5JJ6OkeEUJoAVwwggd6MIIFYqADAgECAgphDpDS\n# AAAAAAADMA0GCSqGSIb3DQEBCwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMK\n# V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0\n# IENvcnBvcmF0aW9uMTIwMAYDVQQDEylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0\n# ZSBBdXRob3JpdHkgMjAxMTAeFw0xMTA3MDgyMDU5MDlaFw0yNjA3MDgyMTA5MDla\n# MH4xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdS\n# ZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMT\n# H01pY3Jvc29mdCBDb2RlIFNpZ25pbmcgUENBIDIwMTEwggIiMA0GCSqGSIb3DQEB\n# AQUAA4ICDwAwggIKAoICAQCr8PpyEBwurdhuqoIQTTS68rZYIZ9CGypr6VpQqrgG\n# OBoESbp/wwwe3TdrxhLYC/A4wpkGsMg51QEUMULTiQ15ZId+lGAkbK+eSZzpaF7S\n# 35tTsgosw6/ZqSuuegmv15ZZymAaBelmdugyUiYSL+erCFDPs0S3XdjELgN1q2jz\n# y23zOlyhFvRGuuA4ZKxuZDV4pqBjDy3TQJP4494HDdVceaVJKecNvqATd76UPe/7\n# 4ytaEB9NViiienLgEjq3SV7Y7e1DkYPZe7J7hhvZPrGMXeiJT4Qa8qEvWeSQOy2u\n# M1jFtz7+MtOzAz2xsq+SOH7SnYAs9U5WkSE1JcM5bmR/U7qcD60ZI4TL9LoDho33\n# X/DQUr+MlIe8wCF0JV8YKLbMJyg4JZg5SjbPfLGSrhwjp6lm7GEfauEoSZ1fiOIl\n# XdMhSz5SxLVXPyQD8NF6Wy/VI+NwXQ9RRnez+ADhvKwCgl/bwBWzvRvUVUvnOaEP\n# 6SNJvBi4RHxF5MHDcnrgcuck379GmcXvwhxX24ON7E1JMKerjt/sW5+v/N2wZuLB\n# l4F77dbtS+dJKacTKKanfWeA5opieF+yL4TXV5xcv3coKPHtbcMojyyPQDdPweGF\n# RInECUzF1KVDL3SV9274eCBYLBNdYJWaPk8zhNqwiBfenk70lrC8RqBsmNLg1oiM\n# CwIDAQABo4IB7TCCAekwEAYJKwYBBAGCNxUBBAMCAQAwHQYDVR0OBBYEFEhuZOVQ\n# BdOCqhc3NyK1"






























"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389919"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714559050"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function GetTypeListFromXmlFile( [string] $typeFileName ) \n{\n\t$xmldata = [xml](Get-Content $typeFileName)\n\t$returnList = $xmldata.Types.Type | where { (($_.Name.StartsWith(\""Microsoft.Exchange\"") -or $_.Name.StartsWith(\""Microsoft.Office.CompliancePolicy\"")) -and !$_.Name.Contains(\""[[\"")) } | foreach { $_.Name }\n\treturn $returnList\n}"",""ScriptBlockId"":""f86c3746-829c-4cb9-b4e9-d2ac10bc0b20"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\RemoteExchange.ps1""}}"

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389921"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714559354"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""{ (($_.Name.StartsWith(\""Microsoft.Exchange\"") -or $_.Name.StartsWith(\""Microsoft.Office.CompliancePolicy\"")) -and !$_.Name.Contains(\""[[\"")) }"",""ScriptBlockId"":""eafb43d5-65c5-476b-a767-5949193c5de3"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\RemoteExchange.ps1""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389935"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714563232"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function get-exbanner\n{\n\twrite-host $RemoteExchange_LocalizedStrings.res_welcome_message\n\n\twrite-host -no $RemoteExchange_LocalizedStrings.res_full_list\n\twrite-host -no \"" \""\n\twrite-host -fore Yellow $RemoteExchange_LocalizedStrings.res_0003\n\n\twrite-host -no $RemoteExchange_LocalizedStrings.res_only_exchange_cmdlets\n\twrite-host -no \"" \""\n\twrite-host -fore Yellow $RemoteExchange_LocalizedStrings.res_0005\n\n\twrite-host -no $RemoteExchange_LocalizedStrings.res_cmdlets_specific_role\n\twrite-host -no \"" \""\n\twrite-host -fore Yellow $RemoteExchange_LocalizedStrings.res_0007\n\n\twrite-host -no $RemoteExchange_LocalizedStrings.res_general_help\n\twrite-host -no \"" \""\n\twrite-host -fore Yellow $RemoteExchange_LocalizedStrings.res_0009\n\n\twrite-host -no $RemoteExchange_LocalizedStrings.res_help_for_cmdlet\n\twrite-host -no \"" \""\n\twrite-host -fore Yellow $RemoteExchange_LocalizedStrings.res_0011\n\n\twrite-host -no $RemoteExchange_LocalizedStrings.res_team_blog\n\twrite-host -no \"" \""\n\twrite-host -fore Yellow $RemoteExchange_LocalizedStrings.res_0015\n\n\twrite-host -no $RemoteExchange_LocalizedStrings.res_show_full_output\n\twrite-host -no \"" \""\n\twrite-host -fore Yellow $RemoteExchange_LocalizedStrings.res_0017\n\n\twrite-host -no $RemoteExchange_LocalizedStrings.res_updatable_help\n\twrite-host -no \"" \""\n\twrite-host -fore Yellow $RemoteExchange_LocalizedStrings.res_0018\n}"",""ScriptBlockId"":""9e6bccf9-1334-40b8-98b2-bf56ab7abce6"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\RemoteExchange.ps1""}}"











"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389922"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714559364"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""{ $_.Name }"",""ScriptBlockId"":""4e6cf838-e341-4312-9059-f31b62ee8418"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\RemoteExchange.ps1""}}"

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389971"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714563527"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function _AutoDiscoverAndConnect ([System.Management.Automation.PSCredential]$Credential, \n\t\t\t\t\t\t\t\t\t$Forest, \n\t\t\t\t\t\t\t\t\t[bool]$UseWIA=$false, \n\t\t\t\t\t\t\t\t\t[bool]$SuppressError=$false, \n\t\t\t\t\t\t\t\t\t[Microsoft.Exchange.Data.ServerVersion]$CurrentVersion=$null,\n\t\t\t\t\t\t\t\t\t$ClientApplication=$null,\n\t\t\t\t\t\t\t\t\t$AllowRedirection=$false)\n{\n\tif ($Forest -eq $null)\n\t{\n\t\t$fqdn = _GetHostFqdn $CurrentVersion\n\t\tif ($fqdn -ne $null)\n\t\t{\n\t\t\t_OpenExchangeRunspace $fqdn $credential $UseWIA $SuppressError $ClientApplication $AllowRedirection\n\t\t}\n\n\t\t$forestName = _GetLocalForest\n\t\t$siteList   = _GetSites\n\t\t# Find servers in sites and connect, assuming the default behavior (connect to current site, \n\t\t# if failed then connect to adjacent sites, if failed then connect to any random site that has exchange server)\n\t\tforeach ($siteDN in $SiteList)\n\t\t{\n\t\t\t# E14: 184676 - MSIT: Tools only installation cannot find a remote PowerShell endpoint\n\t\t\t# when the Forest name of the current site is not available, then we need to pass null value for forest  \n\t\t\tif (($siteDN -ne \""*\"") -and ($forestName -ne $null))\n\t\t\t{\n\t\t\t\t$servers = _GetExchangeServersInSite $siteDN \""/$forestName\""\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$servers = _GetExchangeServersInSite $siteDN \n\t\t\t}\n\t\t\tif (($siteDN -ne \""*\"")-and ($servers -eq $null))\n\t\t\t{\n\t\t\t\t$siteName = $siteDN.ToString().SubString(3).Split(\"",\"")[0]\n\t\t\t\tWrite-Warning ($ConnectFunctions_LocalizedStrings.res_0002 -f $siteName)\n\t\t\t}\n\t\t\tif (($siteDN -eq \""*\"")-and ($servers -eq $null))\n\t\t\t{\n\t\t\t        Write-Error $ConnectFunctions_LocalizedStrings.res_0003\n\t\t\t}\n\t\t\t_ConnectToAnyServer $servers $credential $UseWIA $SuppressError $CurrentVersion $ClientApplication $AllowRedirection\n\t\t}\n\t}\n\telse\n\t{\n\t\t$servers = _GetExchangeServersInSite \""*\"" \""/$Forest\""\n\t\t_ConnectToAnyServer $servers $credential $UseWIA $SuppressError $CurrentVersion $ClientApplication $AllowRedirection\n\t}\n}"",""ScriptBlockId"":""47d38fc5-e0e7-41bd-aa70-b5971677fea6"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\ConnectFunctions.ps1""}}"


























Raw Event

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389969"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714563487"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function Connect-ExchangeServer ($ServerFqdn, [switch]$Auto, [switch]$Prompt, $UserName, $Forest,[switch]$ClearCache, $ClientApplication=$null, [switch]$AllowClobber)\n{\n#.EXTERNALHELP Connect-ExchangeServer-help.xml\n\tset-variable VerbosePreference -value Continue\n\t:connectScope do\n\t{\n\t\tif (!$Auto -and ($ServerFqdn -eq $null) -and !$Prompt)\n\t\t{\n\t\t\t_PrintUsageAndQuit\n\t\t}\n\n\t\t$useWIA = $true\n\t\tif (!($userName -eq $null))\n\t\t{\n\t\t    $credential = get-credential $username\n\t\t    $useWIA = $false\n\t\t}\n\n\n\t\tif (!($ServerFqdn -eq $null))\n\t\t{\n\t\t\tif ($Auto -or !($Forest -eq $null)) { _PrintUsageAndQuit }\n\n\t\t\t_OpenExchangeRunspace $ServerFqdn $credential $useWIA -ClientApplication:$ClientApplication\n\t\t}\n\n\t\tif ($Auto)\n\t\t{\n\t\t\t# We should provide the $credential before $Forest, and we cannot assume useWIA $true here. It should be read from $useWIA\n\t\t\t_AutoDiscoverAndConnect $credential $Forest -useWIA:$useWIA -ClientApplication:$ClientApplication\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!($Forest -eq $null)) { _PrintUsageAndQuit }\n\t\t}\n\n\t\tWrite-Host $ConnectFunctions_LocalizedStrings.res_0000\n\t\t$fqdn=read-host -prompt $ConnectFunctions_LocalizedStrings.res_0001\n\t\t_OpenExchangeRunspace $fqdn $credential $useWIA -ClientApplication:$ClientApplication\n\t}\n\twhile ($false) #connectScope\n\t\n\tif ($ClearCache)\n\t{\n\t\tif ($AllowClobber)\n\t\t{\n\t\t\tImportPSSession -ClearCache:$true -AllowClobber\n\t\t}\n\t\telse\n\t\t{\n\t\t\tImportPSSession -ClearCache:$true\n\t\t}\n\t}\n\telse\n\t{\n\t\tif ($AllowClobber)\n\t\t{\n\t\t\tImportPSSession -ClearCache:$false -AllowClobber\n\t\t}\n\t\telse\n\t\t{\n\t\t\tImportPSSession -ClearCache:$false\n\t\t}\n\t}\n}"",""ScriptBlockId"":""2379ea63-4cd2-404a-ae79-2376949cffb3"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\ConnectFunctions.ps1""}}"












"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389972"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714563534"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function _GetHostFqdn([Microsoft.Exchange.Data.ServerVersion]$CurrentVersion=$null)\n{\n\tif (@(get-item HKLM:\\SOFTWARE\\Microsoft\\ExchangeServer\\v15\\*role -erroraction:silentlycontinue).length -gt 0)\n\t{\n\t\t$setupRegistryEntry = get-itemproperty HKLM:\\SOFTWARE\\Microsoft\\ExchangeServer\\v15\\Setup -erroraction:silentlycontinue\n\t\tif ($CurrentVersion -ne $null -and $setupRegistryEntry -ne $null -and\n\t\t\t($CurrentVersion.Major -ne $setupRegistryEntry.MsiProductMajor -or\n\t\t\t$CurrentVersion.Minor -ne $setupRegistryEntry.MsiProductMinor -or\n\t\t\t$CurrentVersion.Build -ne $setupRegistryEntry.MsiBuildMajor -or\n\t\t\t$CurrentVersion.Revision -ne $setupRegistryEntry.MsiBuildMinor))\n\t\t{\n\t\t\treturn $null\n\t\t}\n\t\ttry\n\t\t{\n\t\t\treturn [System.Net.Dns]::GetHostByName(\""LocalHost\"").HostName\n\t\t}\n\t\tcatch\n\t\t{\n\t\t\tWrite-Verbose $ConnectFunctions_LocalizedStrings.res_0004\n\t\t\treturn $null\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn $null\n\t}\n}"",""ScriptBlockId"":""a515f9ca-ff7b-4e57-b2d7-41a2f98f1e14"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\ConnectFunctions.ps1""}}"








"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389974"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714563576"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function _GetLocalForest()\n{\n\t[System.DirectoryServices.ActiveDirectory.Domain]::GetComputerDomain().Forest.Name\n}"",""ScriptBlockId"":""489d7f7b-54e5-41cc-87b3-24000cb30b5e"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\ConnectFunctions.ps1""}}"

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389961"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714563404"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function get-tip\n{\n    param($local:number=$null) \n\n    if( ($global:exrandom -eq $null) -or ($exrandom -isnot [System.Random]))\n    {\n        $global:exrandom = new-object System.Random\n    }\n\n    $exchculture = [System.Threading.Thread]::CurrentThread.CurrentUICulture\n    $foundculture = $false\n    while($exchculture -ne [Globalization.CultureInfo]::InvariantCulture -and !$foundculture)\n    {\n    \tif ( test-path \""$($global:exbin)\\$($exchculture.Name)\\extips.xml\"" )\n    \t{\n    \t\t$foundculture = $true\n    \t}\n    \telse\n    \t{\n    \t\t$exchculture = $exchculture.Parent\n    \t}\n    }\n\n\tif($foundculture -eq $true)\n    {\n\t$exchculture = $exchculture.Name \n    }\n    else \n    {\n\t$exchculture = 'en'\n    } \n\n    if (test-path \""$($global:exbin)\\$exchculture\\extips.xml\"")\n    {\n\n        $local:tips = [xml](get-content $global:exbin\\$exchculture\\extips.xml)\n        if($local:number -eq $null)\n        {\n            $local:temp = $global:exrandom.Next( 0, $local:tips.topic.developerConceptualDocument.introduction.table.row.Count )\n        }\n        else\n        {\n            $local:temp = $local:number\n        }\n        $local:nav = $tips.topic.developerConceptualDocument.introduction.table.row[$local:temp].entry.CreateNavigator()\n        write-host -fore Yellow ( $CommonConnectFunctions_LocalizedStrings.res_0000 -f $local:temp )\n        [void] $nav.MoveToFirstChild()\n        do\n        {\n             write-host $nav.Value\n        }\n        while( $nav.MoveToNext() )\n        \""\""\n    }\n    else\n    {\n        ($CommonConnectFunctions_LocalizedStrings.res_0005 -f \""$($global:exbin)\\$exchculture\\extips.xml\"")\n    }\n\n    trap\n    {\n\tcontinue\n    }\n}"",""ScriptBlockId"":""28ed5a25-97e8-41af-b9a2-8448b69a3d98"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\CommonConnectFunctions.ps1""}}"













Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389975"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714563761"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function _GetSites()\n{\n\t$localSite=[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite()\n\tif ($localSite -eq $null)\n\t{\n\t\treturn #no site - no auto discovery\n\t}\n\t$siteDN=$localSite.GetDirectoryEntry().DistinguishedName\n\t$siteList = New-Object System.Collections.ArrayList\n\tif ($siteDN -ne $null)\n\t{\n\t\t[void] $SiteList.Add($siteDN)\n\t}\n\t# DCR 231555: TAp DCR:Respect site-link costs with remote powershell.\n\t# Now go one level to find adjacent sites based on site link and add them in the site list\n\tif ($localSite.SiteLinks -ne $null)\n\t{\n\t\tforeach ($siteLink in $localSite.SiteLinks)\n\t\t{\n\t\t\t$siteDN = $null\n\t\t\t# block going backwords\n\t\t\tif (($siteLink.Sites[0] -ne $null) -and ($siteLink.Sites[0].Name -ne $localSite.Name))\n\t\t\t{\n\t\t\t\t$siteDN = $siteLink.Sites[0].GetDirectoryEntry().DistinguishedName\n\t\t\t}\n\t\t\telseif ($siteLink.Sites[1] -ne $null)\n\t\t\t{\n\t\t\t\t$siteDN = $siteLink.Sites[1].GetDirectoryEntry().DistinguishedName\n\t\t\t}\n\t\t\tif ($siteDN -ne $null)\n\t\t\t{ \n\t\t\t\t[void] $SiteList.Add($siteDN)\n\t\t\t}\n\t\t}\n\t}\n\t# When no exchange server will be found in the current site or adjacent sites, then we should search in all sites\n\t[void] $SiteList.Add(\""*\"")\n\t$siteList\n}"",""ScriptBlockId"":""835cbd12-1b58-48e4-b92d-84ce4f35c5ca"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\ConnectFunctions.ps1""}}"








"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389977"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714564234"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function _GetExchangeServersInSite($siteDN, $Forest=$null)\n{\n\t$configNC=([ADSI]\""LDAP:/$Forest/RootDse\"").configurationNamingContext\n\t$search = new-object DirectoryServices.DirectorySearcher([ADSI]\""LDAP:/$Forest/$configNC\"")\n\t$search.Filter = \""(&(objectClass=msExchExchangeServer)(versionNumber>=1937801568)(msExchServerSite=$siteDN))\""\n\t$search.PageSize=1000\n\t$search.PropertiesToLoad.Clear()\n\t[void] $search.PropertiesToLoad.Add(\""msexchcurrentserverroles\"")\n\t[void] $search.PropertiesToLoad.Add(\""networkaddress\"")\n\t[void] $search.PropertiesToLoad.Add(\""serialnumber\"")\n\t$search.FindAll()\n}"",""ScriptBlockId"":""94b30e68-c4e9-43bf-8b45-6f8541aeb2e0"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\ConnectFunctions.ps1""}}"

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389979"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714564287"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function _ConnectToAnyServer ($servers, \n\t\t\t\t$credential, \n\t\t\t\t[bool]$UseWIA=$false, \n\t\t\t\t[bool]$SuppressError=$false, \n\t\t\t\t[Microsoft.Exchange.Data.ServerVersion]$CurrentVersion=$null,\n\t\t\t\t$ClientApplication=$null,\n\t\t\t\t$AllowRedirection=$false)\n{\n\tif (($servers -eq $null) -or ($servers.Length -eq 0))\n\t{\n\t\treturn\n\t}\n\n\t$cafe=@(_GetCAFEServers $servers $CurrentVersion)\n\n\tfor($i=0;$i -lt $cafe.Length;$i++)\n\t{\n\t\t$fqdn = _GetServerFqdnFromNetworkAddress $cafe[($i+$start) % $cafe.Length]\n\t\t_OpenExchangeRunspace $fqdn $credential $UseWIA $SuppressError $ClientApplication $AllowRedirection\n\t}\n\n\t$webServiceServers=@(_GetWebServiceServers $servers $CurrentVersion)\n\n\tfor($i=0;$i -lt $webServiceServers.Length;$i++)\n\t{\n\t\t$fqdn = _GetServerFqdnFromNetworkAddress $webServiceServers[($i+$start) % $webServiceServers.Length]\n\t\t_OpenExchangeRunspace $fqdn $credential $UseWIA $SuppressError $ClientApplication $AllowRedirection\n\t}\n\n\t$cas=@(_GetCASServers $servers)\n\n\tfor($i=0;$i -lt $cas.Length;$i++)\n\t{\n\t\t$fqdn = _GetServerFqdnFromNetworkAddress $cas[($i+$start) % $cas.Length]\n\t\t_OpenExchangeRunspace $fqdn $credential $UseWIA $SuppressError $ClientApplication $AllowRedirection\n\t}\n\n\t$other=@(_GetHubMailboxUMServers $servers $CurrentVersion)\n\n\tfor($i=0;$i -lt $other.Length;$i++)\n\t{\n\t\t$fqdn = _GetServerFqdnFromNetworkAddress $other[($i+$start) % $other.Length]\n\t\t_OpenExchangeRunspace $fqdn $credential $UseWIA $SuppressError $ClientApplication $AllowRedirection\n\t}\n}"",""ScriptBlockId"":""a34ac938-8366-45dd-96c5-96744d6a1133"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\ConnectFunctions.ps1""}}"











"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389980"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714564295"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function _GetCAFEServers($servers, [Microsoft.Exchange.Data.ServerVersion]$CurrentVersion=$null)\n{\n\t$allCafes = $servers | where {($_.properties[\""msexchcurrentserverroles\""][0] -band 1)}\n\tif ($allCafes -eq $null)\n\t{\n\t\treturn @()\n\t}\n\tif ($CurrentVersion -eq $null)\n\t{\n\t\treturn $allCafes\n\t}\n\telse\n\t{\n\t\treturn @(_GetCurrentVersionServers $allCafes $CurrentVersion)\n\t}\n}"",""ScriptBlockId"":""8f6897f2-33bd-444c-9e7f-0e038fdf853b"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\ConnectFunctions.ps1""}}"

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389981"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714564297"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""{($_.properties[\""msexchcurrentserverroles\""][0] -band 1)}"",""ScriptBlockId"":""72cb055c-4221-4e46-828f-d76199556eab"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\ConnectFunctions.ps1""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389983"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714564315"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function _GetServerFqdnFromNetworkAddress($server)\n{\n   $server.properties[\""networkaddress\""] |\n      where {$_.ToString().StartsWith(\""ncacn_ip_tcp\"")} | %{$_.ToString().SubString(13)}\n}"",""ScriptBlockId"":""149b50fb-8e4b-4d86-85ef-9ad7fe257227"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\ConnectFunctions.ps1""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389985"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714564321"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""{$_.ToString().SubString(13)}"",""ScriptBlockId"":""c30baefa-4607-4718-b520-9d029dae3f5a"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\ConnectFunctions.ps1""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389984"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714564318"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""{$_.ToString().StartsWith(\""ncacn_ip_tcp\"")}"",""ScriptBlockId"":""02a91a7a-da79-4eca-811c-7a165c690602"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\ConnectFunctions.ps1""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389987"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714564331"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function _OpenExchangeRunspace([String]$fqdn, \n\t\t\t\t[System.Management.Automation.PSCredential] $credential, \n\t\t\t\t[bool]$UseWIA=$true, \n\t\t\t\t[bool]$SuppressError=$false,\n\t\t\t\t$ClientApplication=$null,\n\t\t\t\t$AllowRedirection=$false)\n{\n  $global:remoteSession = _NewExchangeRunspace $fqdn $credential $UseWIA $SuppressError $ClientApplication $AllowRedirection\n\n  if ($global:remoteSession -ne $null)\n  {\n\t  $global:connectedFqdn = $fqdn\n\t  break connectScope\n  }\n}"",""ScriptBlockId"":""44403b56-eead-447d-b789-257ee68c9890"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\ConnectFunctions.ps1""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389993"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714564446"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-PSSession -ConnectionURI \""$connectionUri\"" -ConfigurationName Microsoft.Exchange -SessionOption $so"",""ScriptBlockId"":""d116224a-b4cb-41fd-a9b5-dc18fd20386d"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48389988"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714564368"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function _NewExchangeRunspace(\n\t\t\t\t[String]$fqdn, \n\t\t\t\t[System.Management.Automation.PSCredential] $credential=$null, \n\t\t\t\t[bool]$UseWIA=$true, \n\t\t\t\t[bool]$SuppressError=$false,\n\t\t\t\t$ClientApplication=$null,\n\t\t\t\t$AllowRedirection=$false,\n\t\t\t\t[String]$targetServerUriParameter=$null)\n{\n\t$hostFQDN = _GetHostFqdn\n\tif (($fqdn -ne $null) -and ($hostFQDN -ne $null) -and ($hostFQDN.ToLower() -eq $fqdn.ToLower()))\n\t{\n\t    $ServicesRunning = _CheckServicesStarted\n\t    if ($ServicesRunning -eq $false)\n\t    {\n\t        return\n\t    }\n\t}\n\tWrite-Verbose ($ConnectFunctions_LocalizedStrings.res_0005 -f $fqdn)\n\t$so = New-PSSessionOption -OperationTimeout $sessionOptionsTimeout -IdleTimeout $sessionOptionsTimeout -OpenTimeout $sessionOptionsTimeout;\n\t$setupRegistryEntry = get-itemproperty HKLM:\\SOFTWARE\\Microsoft\\ExchangeServer\\v15\\Setup -erroraction:silentlycontinue\n\tif ( $setupRegistryEntry -ne $null)\n\t{\n\t\t$clientVersion = \""{0}.{1}.{2}.{3}\"" -f $setupRegistryEntry.MsiProductMajor, $setupRegistryEntry.MsiProductMinor, $setupRegistryEntry.MsiBuildMajor, $setupRegistryEntry.MsiBuildMinor\n\t\t$connectionUri = \""http://$fqdn/powershell?serializationLevel=Full;ExchClientVer=$clientVersion\""\n\t}\n\telse\n\t{\n\t\t$connectionUri = \""http://$fqdn/powershell?serializationLevel=Full\""\n\t}\n\t\n\tif ($ClientApplication -ne $null)\n\t{\n\t\t$connectionUri = $connectionUri + \"";clientApplication=$ClientApplication\""\n\t}\n\n\tif ($targetServerUriParameter -ne $null)\n\t{\n\t\t$connectionUri = $connectionUri + \"";TargetServer=$targetServerUriParameter\""\n\t}\n\t\n\t$contents = 'New-PSSession -ConnectionURI \""$connectionUri\"" -ConfigurationName Microsoft.Exchange -SessionOption $so'\n\t\n\tif (-not $UseWIA)\n\t{\n\t\t$contents = $contents + ' -Authentication Kerberos -Credential $credential'\n\t}\n\tif ($SuppressError)\n\t{\n\t\t$contents = $contents + ' -erroraction silentlycontinue'\n\t}\n\tif ($AllowRedirection)\n\t{\n\t\t$contents = $contents + ' -AllowRedirection'\n\t}\n\t[ScriptBlock] $command = $executioncontext.InvokeCommand.NewScriptBlock([string]::join(\""`n\"", $contents))\n\t$session=invoke-command -Scriptblock $command\n\t\n  if (!$?)\n\t{\n\t  # ERROR_ACCESS_DENIED = 5\n\t  # ERROR_LOGON_FAILURE = 1326\n\t  if (!(5 -eq $error[0].exception.errorcode) -and\n\t\t  !(1326 -eq $error[0].exception.errorcode))\n\t  {\n\t\t\t#Write-Verbose ($ConnectFunctions_LocalizedStrings.res_0006 -f $fqdn)\n\t\t\treturn\n\t  }\n\t  else\n\t  {\n\t    # no retries if we get 5 (access denied) or 1326 (logon failure)\n\t    #$REVIEW$ connectedFqdn is not set. Is it okay?\n\t    break connectScope\n\t  }\n\t}\n  $session\n}"",""ScriptBlockId"":""a9988477-28ac-42d8-93e5-edf3481b1d63"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\ConnectFunctions.ps1""}}"



















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48390013"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714565742"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""{$_.Extension -eq \"".psm1\"" -or $_.Extension -eq \"".psd1\"" -or $_.Extension -eq \"".ps1xml\""}"",""ScriptBlockId"":""da02c4a7-2851-407f-b969-8cfe1c1ad3b7"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\CommonConnectFunctions.ps1""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48390009"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714565688"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function ImportPSSession ([bool]$ClearCache, [switch]$AllowClobber)\n{\n\tif (!($global:remoteSession -eq $null))\n\t{\n\t    # do not display all the commands - turn off verbose output\n\t    set-variable VerbosePreference -value SilentlyContinue\n\n\t    $serverName = $global:remoteSession.ComputerName\n\t    $modulePath = \""$env:APPDATA\\Microsoft\\Exchange\\RemotePowerShell\\$serverName\""\n\t    $remotePSSettinsPath = \""HKCU:Software\\Microsoft\\ExchangeServer\\v15\\RemotePowerShell\\$serverName\""\n\n\t    if ($ClearCache)\n\t    {\n\t        Write-Host -fore Yellow $CommonConnectFunctions_LocalizedStrings.res_0001\n\t        ClearRegistryEntryAndModule $remotePSSettinsPath $modulePath\n\t    }\n\t    \n\t    try\n\t    {\n\t        if ($AllowClobber)\n\t        {\n\t            ExportPSSessionAndImportModule $remotePSSettinsPath $modulePath -AllowClobber\n\t        }\n\t        else\n\t        {\n\t            ExportPSSessionAndImportModule $remotePSSettinsPath $modulePath\n\t        }\n\t    }\n\t    catch\n\t    {\n\t        Write-Warning $CommonConnectFunctions_LocalizedStrings.res_0002\n\t    }\n\t    $global:importResults = Get-Module\n\t    if ($global:importResults -eq $null)\n\t    {\n\t        if ($AllowClobber)\n\t        {\n\t                $global:importResults=Import-PSSession $global:remoteSession -WarningAction SilentlyContinue -DisableNameChecking -AllowClobber\n\t        }\n\t        else\n\t        {\n\t                $global:importResults=Import-PSSession $global:remoteSession -WarningAction SilentlyContinue -DisableNameChecking\n\t        }\n\t    }\n\t    set-variable VerbosePreference -value Continue\n\n\t    Write-Verbose ($CommonConnectFunctions_LocalizedStrings.res_0003 -f $global:connectedFqdn)\n\t}\n}"",""ScriptBlockId"":""7f899098-7a30-4c21-875e-61e44268b6a0"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\CommonConnectFunctions.ps1""}}"











"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48390011"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714565703"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function ExportPSSessionAndImportModule ($remotePSSettinsPath, $modulePath, [switch]$AllowClobber)\n{\n\t$hashValue = $global:remoteSession.ApplicationPrivateData.ImplicitRemoting.Hash\n\t$CurrentUserRemotePSSettings = Get-ItemProperty -path $remotePSSettinsPath -ErrorAction SilentlyContinue\n\n\t# PS3.0, Get-ItemProperty will return DWORD data as UInt32, instead of Int32 in PS2.0.\n\t# If $hashValue is negative, (CurrentUserRemotePSSettings.Hash -ne $hashValue) will always be $true\n\t# We use bitwise xor operation to work around\n\tif (($CurrentUserRemotePSSettings -eq $null) `\n\t\t-or ($CurrentUserRemotePSSettings.Hash -eq $null) `\n\t\t-or (-not ($CurrentUserRemotePSSettings.ModulePath)) `\n\t\t-or (($hashValue -bxor $CurrentUserRemotePSSettings.Hash) -ne 0))\n\t{\n\t\t# Redo Everything, when:\n\t\t# 1. No registry entry found, or\n\t\t# 2. Registry entry exists, but hash value or ModulePath is empty (which is very unlikely) or\n\t\t# 3. Hash value of the saved module didn't match with the hash value of the current session\n\t\tif ($AllowClobber)\n\t\t{\n\t\t\tCreateRegistryEntryAndImportModule $remotePSSettinsPath $hashValue $modulePath -AllowClobber\n\t\t}\n\t\telse\n\t\t{\n\t\t\tCreateRegistryEntryAndImportModule $remotePSSettinsPath $hashValue $modulePath\n\t\t}\n\t}\n\telse\n\t{\n\t\t$modulePath = $CurrentUserRemotePSSettings.ModulePath\n\t\t$module =  Get-ChildItem $modulePath -ErrorAction SilentlyContinue | where-object{$_.Extension -eq \"".psm1\"" -or $_.Extension -eq \"".psd1\"" -or $_.Extension -eq \"".ps1xml\""}\n\t\tif (($module -eq $null) -or ($module.Count -lt 3))\n\t\t{\n\t\t\t# If the module folder exists, but any module file is missing, then we should just export the session and import module\n\t\t\tif ($AllowClobber)\n\t\t\t{\n\t\t\t\tExport-PSSession -Session $global:remoteSession -OutputModule $modulePath -force -AllowClobber | out-null\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tExport-PSSession -Session $global:remoteSession -OutputModule $modulePath -force | out-null\n\t\t\t}\n\t\t\tImport-Module -Name $modulePath -ArgumentList $global:remoteSession -DisableNameChecking\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif  ((New-TimeSpan -Start $module[0].LastWriteTime -End (get-date)).TotalHours -gt 72)\n\t\t\t{\n\t\t\t\t# If the module is expired, then we should redo everything\n\t\t\t\tif ($AllowClobber)\n\t\t\t\t{\n\t\t\t\t\tCreateRegistryEntryAndImportModule $remotePSSettinsPath $hashValue $modulePath -AllowClobber\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tCreateRegistryEntryAndImportModule $remotePSSettinsPath $hashValue $modulePath\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tImport-Module -Name $modulePath -ArgumentList $global:remoteSession -DisableNameChecking\n\t\t\t}\n\t\t}\n\t}\n}"",""ScriptBlockId"":""f699b68b-3d2d-4b8d-bd6f-82aa8dc29690"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\CommonConnectFunctions.ps1""}}"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392238"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571085"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""\n                param($sourcePath, $destinationPath)\n                Copy-Item -Recurse $sourcePath\\\\* -Destination $destinationPath\\\\\n                Remove-item $sourcePath -Recurse -Force \n            "",""ScriptBlockId"":""a1cfff16-f85f-4901-876d-b8406e86b05a"",""Path"":""""}}"


Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48390017"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714565769"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function CreateRegistryEntryAndImportModule ($remotePSSettinsPath, $hashValue, $modulePath, [switch]$AllowClobber )\n{\n\tClearRegistryEntryAndModule $remotePSSettinsPath $modulePath\n\tnew-item $remotePSSettinsPath -force | out-null\n\tNew-ItemProperty -Path $remotePSSettinsPath -Name Hash -Value $hashValue -PropertyType DWord -force | out-null\n\tNew-ItemProperty -Path $remotePSSettinsPath -Name ModulePath -value $modulePath -PropertyType ExpandString -force | out-null\n\tif ($AllowClobber)\n\t{\n\t\tExport-PSSession -Session $global:remoteSession -OutputModule $modulePath -force -AllowClobber | out-null\n\t}\n\telse\n\t{\n\t\tExport-PSSession -Session $global:remoteSession -OutputModule $modulePath -force | out-null\n\t}\n\tImport-Module -Name $modulePath -ArgumentList $global:remoteSession -DisableNameChecking\n}"",""ScriptBlockId"":""fdac912c-a4c6-4204-8e02-1c259e0dc6d3"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\CommonConnectFunctions.ps1""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48390018"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714565773"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function ClearRegistryEntryAndModule ($remotePSSettinsPath, $modulePath)\n{\n\tclear-item $remotePSSettinsPath -force -ErrorAction SilentlyContinue\n\tGet-ChildItem $modulePath -ErrorAction SilentlyContinue | Remove-Item -force -recurse -ErrorAction SilentlyContinue\n}"",""ScriptBlockId"":""efe589f0-95a9-4374-b24c-dd301c865c53"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\CommonConnectFunctions.ps1""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392241"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571114"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""\n                param($path)\n                Get-ChildItem -LiteralPath $path\n            "",""ScriptBlockId"":""e7e1fbdd-1551-46b6-bb07-863ccd5abeef"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392244"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571122"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""<#\n # Implicit remoting module\n # generated on 06.03.2024 11:42:51\n # by Export-PSSession cmdlet\n # Invoked with the following command line: \t\tExport-PSSession -Session $global:remoteSession -OutputModule $modulePath -force | out-null\n\n #>\n        \n@{\n    GUID = '99a0a207-6462-4202-a333-db1da180caa9'\n    Description = 'Implicit remoting for http://c1p1-ex01.gazprom.loc/powershell?serializationLevel=Full;ExchClientVer=15.0.1497.2;clientApplication=ManagementShell;TargetServer='\n    ModuleToProcess = @('c1p1-ex01.gazprom.loc.psm1')\n    FormatsToProcess = @('c1p1-ex01.gazprom.loc.format.ps1xml')\n\n    ModuleVersion = '1.0'\n\n    PrivateData = @{\n        ImplicitRemoting = $true\n    }\n}\n        "",""ScriptBlockId"":""257036f5-46d7-437f-8764-b5b26e546698"",""Path"":""C:\\Users\\ent-av.levin\\AppData\\Roaming\\Microsoft\\Exchange\\RemotePowerShell\\c1p1-ex01.gazprom.loc\\c1p1-ex01.gazprom.loc.psd1""}}"


















Raw Event

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392246"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571715"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""2"",""MessageTotal"":""162"",""ScriptBlockText"":""},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    ${UseServiceAccount},\n\n    ${AccessMethod},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Add-AvailabilityAddressSpace') `\n                            -Arg ('Add-AvailabilityAddressSpace', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Add-AvailabilityAddressSpace\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Add-ContentFilterPhrase' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('Identity')]\n    ${Phrase},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    ${Influence},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Add-ContentFilterPhrase') "


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392248"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571715"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""4"",""MessageTotal"":""162"",""ScriptBlockText"":"" $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Add-MailboxDatabaseCopy\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Add-MailboxFolderPermission' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${AccessRights},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${User},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Add-MailboxFolderPermission') `\n                            -Arg ('Add-MailboxFolderPermission', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Add-MailboxFolderPermission\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Add-MailboxPermission' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${AccessRights},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392245"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571715"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""162"",""ScriptBlockText"":""<#\n # Implicit remoting module\n # generated on 06.03.2024 11:42:50\n # by Export-PSSession cmdlet\n # Invoked with the following command line: \t\tExport-PSSession -Session $global:remoteSession -OutputModule $modulePath -force | out-null\n\n #>\n        \nparam(\n    <# Optional parameter that can be used to specify the session on which this proxy module works #>    \n    [System.Management.Automation.Runspaces.PSSession] $PSSessionOverride,\n    [System.Management.Automation.Remoting.PSSessionOption] $PSSessionOptionOverride\n)\n\n$script:__psImplicitRemoting_versionOfScriptGenerator = [Microsoft.PowerShell.Commands.ExportPSSessionCommand, Microsoft.PowerShell.Commands.Utility, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]::VersionOfScriptGenerator\nif ($script:__psImplicitRemoting_versionOfScriptGenerator.Major -ne 1.0)\n{\n    throw 'The module cannot be loaded because it has been generated with an incompatible version of the Export-PSSession cmdlet. Generate the module with the Export-PSSession cmdlet from the current session, and try loading the module again.'\n}\n\n\n$script:WriteHost = $executionContext.InvokeCommand.GetCommand('Write-Host', [System.Management.Automation.CommandTypes]::Cmdlet)\n$script:WriteWarning = $executionContext.InvokeCommand.GetCommand('Write-Warning', [System.Management.Automation.CommandTypes]::Cmdlet)\n$script:WriteInformation = $executionContext.InvokeCommand.GetCommand('Write-Information', [System.Management.Automation.CommandTypes]::Cmdlet)\n$script:GetPSSession = $executionContext.InvokeCommand.GetCommand('Get-PSSession', [System.Management.Automation.CommandTypes]::Cmdlet)\n$script:NewPSSession = $executionContext.InvokeCommand.GetCommand('New-PSSession', [System.Management.Automation.CommandTypes]::Cmdlet)\n$script:ConnectPSSession = $executionContext.InvokeCommand.GetCommand('Connect-PSSession', [System.Management.Automation.CommandTypes]::Cmdlet)\n$script:NewObject = $executionContext.InvokeCommand.GetCommand('New-Object', [System.Management.Automation.CommandTypes]::Cmdlet)\n$script:RemovePSSession = $executionContext.InvokeCommand.GetCommand('Remove-PSSession', [System.Management.Automation.CommandTypes]::Cmdlet)\n$script:InvokeCommand = $executionContext.InvokeCommand.GetCommand('Invoke-Command', [System.Management.Automation.CommandTypes]::Cmdlet)\n$script:SetItem = $executionContext.InvokeCommand.GetCommand('Set-Item', [System.Management.Automation.CommandTypes]::Cmdlet)\n$script:ImportCliXml = $executionContext.InvokeCommand.GetCommand('Import-CliXml', [System.Management.Automation.CommandTypes]::Cmdlet)\n$script:NewPSSessionOption = $executionContext.InvokeCommand.GetCommand('New-PSSessionOption', [System.Management.Automation.CommandTypes]::Cmdlet)\n$script:JoinPath = $executionContext.InvokeCommand.GetCommand('Join-Path', [System.Management.Automation.CommandTypes]::Cmdlet)\n$script:ExportModuleMember = $executionContext.InvokeCommand.GetCommand('Export-ModuleMember', [System.Management.Automation.CommandTypes]::Cmdlet)\n$script:SetAlias = $executionContext.InvokeCommand.GetCommand('Set-Alias', [System.Management.Automation.CommandTypes]::Cmdlet)\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n        \n##############################################################################\n\nfunction Write-PSImplicitRemotingMessage\n{\n    param(\n        [Parameter(Mandatory = $true, Position = 0)]\n        [string]\n        $message)\n        \n    try { & $script:WriteHost -Object $message -ErrorAction Silently"










































Raw Event

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392247"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571715"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""3"",""MessageTotal"":""162"",""ScriptBlockText"":"".Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Add-GlobalMonitoringOverride') `\n                            -Arg ('Add-GlobalMonitoringOverride', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Add-GlobalMonitoringOverride\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Add-IPAllowListEntry' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${IPAddress},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${IPRange},\n\n    ${Comment},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${Server},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${ExpirationTime},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Add-IPAllowListEntry') `\n                            -Arg ('Add-IPAllowListEntry', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHe"

















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392249"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571715"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""5"",""MessageTotal"":""162"",""ScriptBlockText"":""} catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Add-ResubmitRequest\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Add-RoleGroupMember' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${BypassSecurityGroupManagerCheck},\n\n    ${Member},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Add-RoleGroupMember') `\n                            -Arg ('Add-RoleGroupMember', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Add-RoleGroupMember\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Add-ServerMonitoringOverride' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${PropertyValue},\n\n    ${Server},\n\n    ${ItemType},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${Duration},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${ApplyVersion},\n\n    ${PropertyName},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parame"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392250"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571715"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""6"",""MessageTotal"":""162"",""ScriptBlockText"":""Variable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Compare-TextMessagingVerificationCode') `\n                            -Arg ('Compare-TextMessagingVerificationCode', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Compare-TextMessagingVerificationCode\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Complete-MigrationBatch' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    ${NotificationEmails},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Complete-MigrationBatch') `\n                            -Arg ('Complete-MigrationBatch', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($n"

















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392251"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571715"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""7"",""MessageTotal"":""162"",""ScriptBlockText"":""$null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Disable-CmdletExtensionAgent') `\n                            -Arg ('Disable-CmdletExtensionAgent', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Disable-CmdletExtensionAgent\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Disable-DistributionGroup' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [switch]\n    ${IgnoreDefaultScope},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Disable-DistributionGroup') `\n                            -Arg ('Disable-DistributionGroup', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392252"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571715"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""8"",""MessageTotal"":""162"",""ScriptBlockText"":"") & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Disable-MailboxQuarantine\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Disable-MailContact' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [switch]\n    ${IgnoreDefaultScope},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Disable-MailContact') `\n                            -Arg ('Disable-MailContact', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Disable-MailContact\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Disable-MailPublicFolder' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392254"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571715"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""10"",""MessageTotal"":""162"",""ScriptBlockText"":""        -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Disable-UMAutoAttendant') `\n                            -Arg ('Disable-UMAutoAttendant', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Disable-UMAutoAttendant\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Disable-UMCallAnsweringRule' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${Mailbox},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Disable-UMCallAnsweringRule') `\n                            -Arg ('Disable-UMCallAnsweringRule', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Disable-UMCallAnsweringRule\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Disable-UMIPGateway' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias("





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392253"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571715"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""9"",""MessageTotal"":""162"",""ScriptBlockText"":""bug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Disable-PushNotificationProxy') `\n                            -Arg ('Disable-PushNotificationProxy', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Disable-PushNotificationProxy\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Disable-RemoteMailbox' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [switch]\n    ${Archive},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [switch]\n    ${IgnoreDefaultScope},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [switch]\n    ${IgnoreLegalHold},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Disable-RemoteMailbox') `\n                     "


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392255"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571715"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""11"",""MessageTotal"":""162"",""ScriptBlockText"":""ram(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${CacheKeys},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [switch]\n    ${GlobalCache},\n\n    ${Server},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [switch]\n    ${CurrentOrganization},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${Organizations},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${Application},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Dump-ProvisioningCache') `\n                            -Arg ('Dump-ProvisioningCache', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Dump-ProvisioningCache\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Enable-AddressListPaging' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scrip"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392256"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571715"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""12"",""MessageTotal"":""162"",""ScriptBlockText"":"")\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Enable-DistributionGroup') `\n                            -Arg ('Enable-DistributionGroup', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Enable-DistributionGroup\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Enable-ExchangeCertificate' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${Thumbprint},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [switch]\n    ${DoNotRequireSsl},\n\n    ${Services},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [switch]\n    ${NetworkServiceAllowed},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${Server},\n\n    ${DomainController},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [switch]\n    ${Force},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Enable-ExchangeCertificate') `\n                            -Arg ('Enable-ExchangeCertificate', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392257"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571716"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""13"",""MessageTotal"":""162"",""ScriptBlockText"":""      $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Enable-MailboxQuarantine') `\n                            -Arg ('Enable-MailboxQuarantine', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Enable-MailboxQuarantine\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Enable-MailContact' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${DisplayName},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${Alias},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${MessageBodyFormat},\n\n    ${PrimarySmtpAddress},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    ${MessageFormat},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${MacAttachmentFormat},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    ${UsePreferMessageFormat},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${ExternalEmailAddress},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Enable-MailContact') `\n                            -Arg ('Enable-MailContact', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } ca"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392258"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571716"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""14"",""MessageTotal"":""162"",""ScriptBlockText"":""criptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Enable-OutlookProtectionRule\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Enable-PushNotificationProxy' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${Uri},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${Organization},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Enable-PushNotificationProxy') `\n                            -Arg ('Enable-PushNotificationProxy', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Enable-PushNotificationProxy\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Enable-RemoteMailbox' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${PrimarySmtpAddress},\n\n    ${DisplayName},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${Equipment},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${RemoteRoutingAddress},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [switch]\n    ${ACLableSyncedObjectEnabled},\n\n    [switch]\n    ${Archive},\n\n    ${Alias},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${Out"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392259"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571716"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""15"",""MessageTotal"":""162"",""ScriptBlockText"":""\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Enable-UMAutoAttendant') `\n                            -Arg ('Enable-UMAutoAttendant', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Enable-UMAutoAttendant\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Enable-UMCallAnsweringRule' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${Mailbox},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Enab"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392262"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571716"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""18"",""MessageTotal"":""162"",""ScriptBlockText"":""\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${UMDialPlan},\n\n    ${DomainController},\n\n    ${UMAutoAttendant},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Export-UMPrompt') `\n                            -Arg ('Export-UMPrompt', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Export-UMPrompt\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-AcceptedDomain' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-AcceptedDomain') `\n          "


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392260"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571716"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""16"",""MessageTotal"":""162"",""ScriptBlockText"":""      $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Export-ActiveSyncLog') `\n                            -Arg ('Export-ActiveSyncLog', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Export-ActiveSyncLog\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Export-AutoDiscoverConfig' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${SourceForestCredential},\n\n    ${TargetForestDomainController},\n\n    ${MultipleExchangeDeployments},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${DeleteConfig},\n\n    ${TargetForestCredential},\n\n    ${PreferredSourceFqdn},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Export-AutoDiscoverConfig') `\n                            -Arg ('Export-AutoDiscoverConfig', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } "





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392261"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571716"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""17"",""MessageTotal"":""162"",""ScriptBlockText"":""$PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Export-MailboxDiagnosticLogs\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Export-Message' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Export-Message') `\n                            -Arg ('Export-Message', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Export-Message\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Export-MigrationReport' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${StartingRowIndex},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392263"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571716"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""19"",""MessageTotal"":""162"",""ScriptBlockText"":""iveSyncDeviceClass', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-ActiveSyncDeviceClass\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-ActiveSyncDeviceStatistics' `\n{\n    param(\n    \n    [switch]\n    ${ShowRecoveryPassword},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Mailbox},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [switch]\n    ${GetMailboxLog},\n\n    ${Identity},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    ${NotificationEmailAddresses},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ActiveSyncDeviceStatistics') `\n                            -Arg ('Get-ActiveSyncDeviceStatistics', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-ActiveSyncDeviceStatistics\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-ActiveSyncMailboxPolicy' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Id"




















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392266"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571716"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""22"",""MessageTotal"":""162"",""ScriptBlockText"":""      $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-AuthServer\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-AutodiscoverVirtualDirectory' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [switch]\n    ${ShowMailboxVirtualDirectories},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Server},\n\n    [switch]\n    ${ADPropertiesOnly},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-AutodiscoverVirtualDirectory') `\n                            -Arg ('Get-AutodiscoverVirtualDirectory', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-AutodiscoverVirtualDirectory\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-AvailabilityAddressSpace' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $P"

















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392265"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571716"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""21"",""MessageTotal"":""162"",""ScriptBlockText"":""em 'function:script:Get-AgentLog' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${TransportService},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${EndDate},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${Location},\n\n    ${StartDate},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-AgentLog') `\n                            -Arg ('Get-AgentLog', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-AgentLog\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-App' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Mailbox},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${OrganizationApp},\n\n    ${DomainController},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -C"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392267"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571716"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""23"",""MessageTotal"":""162"",""ScriptBlockText"":""{AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CalendarNotification') `\n                            -Arg ('Get-CalendarNotification', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-CalendarNotification\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-CalendarProcessing' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [switch]\n    ${ReadFromDomainController},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${ResultSize},\n\n    ${DomainController},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CalendarProcessing') `\n                            -Arg ('Get-CalendarProcessing', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n           "


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392264"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571716"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""20"",""MessageTotal"":""162"",""ScriptBlockText"":""\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-AddressList') `\n                            -Arg ('Get-AddressList', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-AddressList\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-AdminAuditLogConfig' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-AdminAuditLogConfig') `\n                            -Arg ('Get-AdminAuditLogConfig', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } c"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392268"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571716"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""24"",""MessageTotal"":""162"",""ScriptBlockText"":"", $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-ClientAccessServer\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-CmdletExtensionAgent' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    ${Assembly},\n\n    ${Enabled},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CmdletExtensionAgent') `\n                            -Arg ('Get-CmdletExtensionAgent', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-CmdletExtensionAgent\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-Contact' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [switch]\n    ${ReadFromDomainController},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${SortBy},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${Credential},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${OrganizationalUnit},\n\n    ${Identity},\n\n    [sw"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392271"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571716"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""27"",""MessageTotal"":""162"",""ScriptBlockText"":""${DomainController},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-EcpVirtualDirectory') `\n                            -Arg ('Get-EcpVirtualDirectory', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-EcpVirtualDirectory\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-EdgeSubscription' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-EdgeSubscription') `\n                            -Arg ('Get-EdgeSubscription', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process "





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392270"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571716"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""26"",""MessageTotal"":""162"",""ScriptBlockText"":""ppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-DistributionGroup\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-DistributionGroupMember' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [switch]\n    ${ReadFromDomainController},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${Credential},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [switch]\n    ${IgnoreDefaultScope},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${ResultSize},\n\n    ${DomainController},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DistributionGroupMember') `\n                            -Arg ('Get-DistributionGroupMember', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-DistributionGroupMember\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-DlpPolicy' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $s"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392269"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571716"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""25"",""MessageTotal"":""162"",""ScriptBlockText"":""itch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DatabaseAvailabilityGroupConfiguration') `\n                            -Arg ('Get-DatabaseAvailabilityGroupConfiguration', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-DatabaseAvailabilityGroupConfiguration\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-DatabaseAvailabilityGroupNetwork' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Server},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DatabaseAvailabilityGroupNetwork') `\n                            -Arg ('Get-DatabaseAvailabilityGroupNetwork', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInp"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392272"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571716"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""28"",""MessageTotal"":""162"",""ScriptBlockText"":""   # .ForwardHelpTargetName Get-ExchangeAssistanceConfig\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-ExchangeCertificate' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${Thumbprint},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Server},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    ${DomainName},\n\n    ${Instance},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ExchangeCertificate') `\n                            -Arg ('Get-ExchangeCertificate', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-ExchangeCertificate\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-ExchangeDiagnosticInfo' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Argument},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Server},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Process},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${Unlimited},\n\n    ${Component},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClient"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392273"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571716"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""29"",""MessageTotal"":""162"",""ScriptBlockText"":""s.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-FailedContentIndexDocuments') `\n                            -Arg ('Get-FailedContentIndexDocuments', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-FailedContentIndexDocuments\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-FederatedDomainProof' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Thumbprint},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${DomainName},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-FederatedDomainProof') `\n                            -Arg ('Get-FederatedDomainProof', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-FederatedDomainProof\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-FederatedOrganizat"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392274"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571717"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""30"",""MessageTotal"":""162"",""ScriptBlockText"":""er},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-FrontendTransportService') `\n                            -Arg ('Get-FrontendTransportService', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-FrontendTransportService\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-GlobalAddressList' `\n{\n    param(\n    \n    [switch]\n    ${DefaultOnly},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-GlobalAddressList') `\n                            -Arg ('Get-GlobalAddressList', $PSBoundParameters, $positionalArgument"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392275"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571717"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""31"",""MessageTotal"":""162"",""ScriptBlockText"":""edContentFilterRule', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-HostedContentFilterRule\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-HybridConfiguration' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-HybridConfiguration') `\n                            -Arg ('Get-HybridConfiguration', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-HybridConfiguration\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-ImapSettings' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Server},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392276"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571717"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""32"",""MessageTotal"":""162"",""ScriptBlockText"":""null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-IPAllowListConfig') `\n                            -Arg ('Get-IPAllowListConfig', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-IPAllowListConfig\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-IPAllowListEntry' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${IPAddress},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Server},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${ResultSize},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-IPAllowListEntry') `\n                            -Arg ('Get-IPAllowListEntry', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-IPAllowListEntr"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392277"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571717"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""33"",""MessageTotal"":""162"",""ScriptBlockText"":""    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-IPBlockListProvider') `\n                            -Arg ('Get-IPBlockListProvider', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-IPBlockListProvider\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-IPBlockListProvidersConfig' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-IPBlockListProvidersConfig') `\n                            -Arg ('Get-IPBlockListProvidersConfig', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392278"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571717"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""34"",""MessageTotal"":""162"",""ScriptBlockText"":""d.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-LogonStatistics\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-Mailbox' `\n{\n    param(\n    \n    [Alias('wa')]\n    ${WarningAction},\n\n    ${SortBy},\n\n    ${Identity},\n\n    [switch]\n    ${RemoteArchive},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [switch]\n    ${PublicFolder},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Anr},\n\n    [switch]\n    ${Archive},\n\n    [switch]\n    ${Monitoring},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${Credential},\n\n    ${ResultSize},\n\n    [switch]\n    ${Arbitration},\n\n    ${RecipientTypeDetails},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    [switch]\n    ${ReadFromDomainController},\n\n    [switch]\n    ${IgnoreDefaultScope},\n\n    ${Filter},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${Database},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${OrganizationalUnit},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Server},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-Mailbox') `\n                            -Arg ('Get-Mailbox', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-Mailbox\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-MailboxAuditBypassAssociation' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${ResultSize},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariab"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392279"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571717"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""35"",""MessageTotal"":""162"",""ScriptBlockText"":""  ${PipelineVariable},\n\n    ${Server},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${Status},\n\n    ${DomainController},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxDatabase') `\n                            -Arg ('Get-MailboxDatabase', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-MailboxDatabase\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-MailboxDatabaseCopyStatus' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${Server},\n\n    [switch]\n    ${ConnectionStatus},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [switch]\n    ${UseServerCache},\n\n    ${Identity},\n\n    [switch]\n    ${Local},\n\n    [switch]\n    ${ExtendedErrorInfo},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [switch]\n    ${Active},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxDatabaseCopyStatus') `\n                            -Arg ('Get-MailboxDatabaseCopyStatus'"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392280"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571717"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""36"",""MessageTotal"":""162"",""ScriptBlockText"":""                          -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxFolderPermission') `\n                            -Arg ('Get-MailboxFolderPermission', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-MailboxFolderPermission\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-MailboxFolderStatistics' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [switch]\n    ${IncludeOldestAndNewestItems},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [switch]\n    ${Archive},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [switch]\n    ${IncludeAnalysis},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    ${FolderScope},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxFolderStatistics') `\n                            -Arg ('Get-MailboxFolderStatistics', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-MailboxFolderStatistics\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-MailboxImportRequest' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${HighPriority},\n\n    [Alias('vb')]\"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392281"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571717"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""37"",""MessageTotal"":""162"",""ScriptBlockText"":""     throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-MailboxMessageConfiguration\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-MailboxPermission' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [switch]\n    ${Owner},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [switch]\n    ${ReadFromDomainController},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${Credential},\n\n    ${User},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${ResultSize},\n\n    ${DomainController},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxPermission') `\n                            -Arg ('Get-MailboxPermission', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-MailboxPermission\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-MailboxRegionalConfiguration' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [switch]\n    ${VerifyDefaultFolderNameLanguage},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRa"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392282"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571717"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""38"",""MessageTotal"":""162"",""ScriptBlockText"":"" try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxSearch') `\n                            -Arg ('Get-MailboxSearch', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-MailboxSearch\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-MailboxServer' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${DomainController},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    [switch]\n    ${Status},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxServer') `\n                            -Arg ('Get-MailboxServer', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392283"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571717"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""39"",""MessageTotal"":""162"",""ScriptBlockText"":""                  }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-MailContact\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-MailPublicFolder' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [switch]\n    ${ReadFromDomainController},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${SortBy},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${Credential},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [switch]\n    ${IgnoreDefaultScope},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${ResultSize},\n\n    ${DomainController},\n\n    ${Filter},\n\n    ${Anr},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailPublicFolder') `\n                            -Arg ('Get-MailPublicFolder', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-MailPublicFolder\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-MailUser' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [switch]\n    ${ReadFromDomainController},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${SortBy},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${Credential},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${OrganizationalUnit},\n\n    ${Identity},\n\n    [switch]\n    ${IgnoreDefaultSc"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392284"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571717"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""40"",""MessageTotal"":""162"",""ScriptBlockText"":""ch]\n    ${GetChildren},\n\n    [switch]\n    ${Recurse},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ManagementRole') `\n                            -Arg ('Get-ManagementRole', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-ManagementRole\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-ManagementRoleAssignment' `\n{\n    param(\n    \n    [Alias('wa')]\n    ${WarningAction},\n\n    ${RoleAssigneeType},\n\n    ${CustomRecipientWriteScope},\n\n    ${Identity},\n\n    ${Enabled},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${RecipientWriteScope},\n\n    ${WritableRecipient},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${WritableDatabase},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${ConfigWriteScope},\n\n    ${ExclusiveConfigWriteScope},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${RoleAssignee},\n\n    ${Delegating},\n\n    ${WritableServer},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${AssignmentMethod},\n\n    ${DomainController},\n\n    ${Role},\n\n    ${ExclusiveRecipientWriteScope},\n\n    ${RecipientOrganizationalUnitScope},\n\n    ${Exclusive},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${CustomConfigWriteScope},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [switch]\n    ${GetEffectiveUsers},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImpl"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392285"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571717"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""41"",""MessageTotal"":""162"",""ScriptBlockText"":""ers $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-Message') `\n                            -Arg ('Get-Message', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-Message\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-MessageCategory' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${Mailbox},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MessageCategory') `\n                            -Arg ('Get-MessageCategory', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-MessageCategory\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-MessageClassification' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392288"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571717"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""44"",""MessageTotal"":""162"",""ScriptBlockText"":"" {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-MoveRequest\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-MoveRequestStatistics' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${MoveRequestQueue},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${MailboxGuid},\n\n    [switch]\n    ${IncludeReport},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    ${DiagnosticArgument},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [switch]\n    ${Diagnostic},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MoveRequestStatistics') `\n                            -Arg ('Get-MoveRequestStatistics', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-MoveRequestStatistics\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-NetworkConnectionInfo' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArgument"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392289"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571718"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""45"",""MessageTotal"":""162"",""ScriptBlockText"":""BoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-OrganizationalUnit') `\n                            -Arg ('Get-OrganizationalUnit', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-OrganizationalUnit\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-OrganizationConfig' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-OrganizationConfig') `\n                            -Arg ('Get-OrganizationConfig', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-OrganizationConfig\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-Organizatio"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392291"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571718"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""47"",""MessageTotal"":""162"",""ScriptBlockText"":""              -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-PolicyTipConfig\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-PopSettings' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Server},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-PopSettings') `\n                            -Arg ('Get-PopSettings', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-PopSettings\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-PowerShellVirtualDirectory' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [switch]\n    ${ShowMailboxVirtualDirectories},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Server},\n\n    [switch]\n    ${ADPropertiesOnly},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n  "


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392292"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571718"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""48"",""MessageTotal"":""162"",""ScriptBlockText"":""lias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-PublicFolderItemStatistics') `\n                            -Arg ('Get-PublicFolderItemStatistics', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-PublicFolderItemStatistics\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-PublicFolderMailboxDiagnostics' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [switch]\n    ${IncludeHierarchyInfo},\n\n    [switch]\n    ${IncludeDumpsterInfo},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-PublicFolderMailboxDiagnostics') `\n                            -Arg ('Get-PublicFolderMailboxDiagnostics', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n         "





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392293"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571718"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""49"",""MessageTotal"":""162"",""ScriptBlockText"":""deParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-PublicFolderMigrationRequestStatistics') `\n                            -Arg ('Get-PublicFolderMigrationRequestStatistics', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-PublicFolderMigrationRequestStatistics\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-PublicFolderMoveRequest' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${HighPriority},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${BatchName},\n\n    ${Name},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${Suspend},\n\n    ${Identity},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${ResultSize},\n\n    ${Status},\n\n    ${DomainController},\n\n    ${RequestQueue},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-PublicFolderMoveRequest') `\n                            -Arg ('Get-PublicFolderMoveRequest', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-PublicFolderMoveRequest\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSS"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392294"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571718"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""50"",""MessageTotal"":""162"",""ScriptBlockText"":""ch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-Queue\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-QueueDigest' `\n{\n    param(\n    \n    ${DetailsLevel},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${Dag},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Timeout},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${GroupBy},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Server},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Site},\n\n    ${Filter},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${ResultSize},\n\n    [switch]\n    ${Forest},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-QueueDigest') `\n                            -Arg ('Get-QueueDigest', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-QueueDigest\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-ReceiveConnector' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Server},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.A"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392290"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571718"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""46"",""MessageTotal"":""162"",""ScriptBlockText"":""Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-OwaMailboxPolicy') `\n                            -Arg ('Get-OwaMailboxPolicy', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-OwaMailboxPolicy\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-OwaVirtualDirectory' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [switch]\n    ${ShowMailboxVirtualDirectories},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Server},\n\n    [switch]\n    ${ADPropertiesOnly},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-OwaVirtualDirectory') `\n                            -Arg ('Get-OwaVirtualDirectory', $PSBoundParameters, $positionalArgument"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392295"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571718"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""51"",""MessageTotal"":""162"",""ScriptBlockText"":""nts = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-RemoteMailbox') `\n                            -Arg ('Get-RemoteMailbox', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-RemoteMailbox\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-ResourceConfig' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ResourceConfig') `\n                            -Arg ('Get-ResourceConfig', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppabl"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392286"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571717"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""42"",""MessageTotal"":""162"",""ScriptBlockText"":""getName Get-MigrationBatch\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-MigrationConfig' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MigrationConfig') `\n                            -Arg ('Get-MigrationConfig', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-MigrationConfig\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-MigrationEndpoint' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${Type},\n\n    ${ConnectionSettings},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    ${DiagnosticArgument},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [switch]\n    ${Diagnostic},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n        "


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392287"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571717"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""43"",""MessageTotal"":""162"",""ScriptBlockText"":""itionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MobileDevice') `\n                            -Arg ('Get-MobileDevice', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-MobileDevice\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-MobileDeviceMailboxPolicy' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MobileDeviceMailboxPolicy') `\n                            -Arg ('Get-MobileDeviceMailboxPolicy', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-MobileDeviceMailboxPolicy\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-MobileDeviceStatistics' `\n{\n    param(\n    \n    "





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392296"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571718"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""52"",""MessageTotal"":""162"",""ScriptBlockText"":""'function:script:Get-RoleAssignmentPolicy' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-RoleAssignmentPolicy') `\n                            -Arg ('Get-RoleAssignmentPolicy', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-RoleAssignmentPolicy\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-RoleGroup' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [switch]\n    ${ReadFromDomainController},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${SortBy},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Filter},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [switch]\n    ${ShowPartnerLinked},\n\n    ${ResultSize},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                 "


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392297"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571718"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""53"",""MessageTotal"":""162"",""ScriptBlockText"":""ngSession -CommandName 'Get-SecurityPrincipal') `\n                            -Arg ('Get-SecurityPrincipal', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-SecurityPrincipal\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-SendConnector' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SendConnector') `\n                            -Arg ('Get-SendConnector', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-SendConnector\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-SenderFilterConfig' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${Error"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392298"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571718"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""54"",""MessageTotal"":""162"",""ScriptBlockText"":""Positionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ServerHealth') `\n                            -Arg ('Get-ServerHealth', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-ServerHealth\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-ServerMonitoringOverride' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${Server},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ServerMonitoringOverride') `\n                            -Arg ('Get-ServerMonitoringOverride', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-ServerMonitoringOverri"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392299"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571718"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""55"",""MessageTotal"":""162"",""ScriptBlockText"":""m 'function:script:Get-SiteMailbox' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${ResultSize},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [switch]\n    ${ReadFromDomainController},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [switch]\n    ${DeletedSiteMailbox},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [switch]\n    ${BypassOwnerCheck},\n\n    ${Anr},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SiteMailbox') `\n                            -Arg ('Get-SiteMailbox', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-SiteMailbox\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-SiteMailboxDiagnostics' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [switch]\n    ${SendMeEmail},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${BypassOwnerCheck},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameter"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392300"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571718"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""56"",""MessageTotal"":""162"",""ScriptBlockText"":""terName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SyncConfig') `\n                            -Arg ('Get-SyncConfig', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-SyncConfig\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-SystemMessage' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [switch]\n    ${Original},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SystemMessage') `\n                            -Arg ('Get-SystemMessage', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-SystemMessage\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-TextMessagingAccount' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [switch]\n    ${ReadFromDomainController},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n   "


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392301"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571718"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""57"",""MessageTotal"":""162"",""ScriptBlockText"":""tity},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-TransportConfig') `\n                            -Arg ('Get-TransportConfig', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-TransportConfig\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-TransportPipeline' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-TransportPipeline') `\n                            -Arg ('Get-TransportPipeline', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($my"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392303"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571718"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""59"",""MessageTotal"":""162"",""ScriptBlockText"":""ram($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-UMCallDataRecord\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-UMCallRouterSettings' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Server},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-UMCallRouterSettings') `\n                            -Arg ('Get-UMCallRouterSettings', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-UMCallRouterSettings\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-UMCallSummaryReport' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${GroupBy},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${UMIPGateway},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    ${UMDialPlan},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n          "


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392302"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571718"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""58"",""MessageTotal"":""162"",""ScriptBlockText"":""hrow\n    }\n }\n\n    # .ForwardHelpTargetName Get-TransportServer\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-TransportService' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-TransportService') `\n                            -Arg ('Get-TransportService', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-TransportService\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-Trust' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${DomainName},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideCompute"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392304"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571718"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""60"",""MessageTotal"":""162"",""ScriptBlockText"":""$PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-UMMailbox') `\n                            -Arg ('Get-UMMailbox', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-UMMailbox\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-UMMailboxConfiguration' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-UMMailboxConfiguration') `\n                            -Arg ('Get-UMMailboxConfiguration', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHe"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392305"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571718"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""61"",""MessageTotal"":""162"",""ScriptBlockText"":""am(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${SortBy},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [switch]\n    ${ReadFromDomainController},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [switch]\n    ${Arbitration},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${Credential},\n\n    [switch]\n    ${PublicFolder},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${OrganizationalUnit},\n\n    ${Identity},\n\n    [switch]\n    ${IgnoreDefaultScope},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${RecipientTypeDetails},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${ResultSize},\n\n    ${DomainController},\n\n    ${Filter},\n\n    ${Anr},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-User') `\n                            -Arg ('Get-User', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-User\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Get-UserPhoto' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [switch]\n    ${ReadFromDomainController},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${SortBy},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${Credential},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${OrganizationalUnit},\n\n    ${Identity},\n\n    [switch]\n    ${IgnoreDefaultScope},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${ResultSize},\n\n    ${DomainController},\n\n    ${Filter},\n\n    [switch]\n    ${Preview},\n\n    ${Anr},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters."





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392307"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571719"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""63"",""MessageTotal"":""162"",""ScriptBlockText"":""ine = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Import-TransportRuleCollection\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Import-UMPrompt' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${PromptFileName},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${PromptFileData},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${UMDialPlan},\n\n    ${DomainController},\n\n    ${UMAutoAttendant},\n\n    ${PromptFileStream},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Import-UMPrompt') `\n                            -Arg ('Import-UMPrompt', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Import-UMPrompt\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Install-TransportAgent' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${Name},\n\n    ${TransportService},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${AssemblyPath},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${War"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392306"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571719"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""62"",""MessageTotal"":""162"",""ScriptBlockText"":""dParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Import-DlpPolicyCollection') `\n                            -Arg ('Import-DlpPolicyCollection', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Import-DlpPolicyCollection\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Import-DlpPolicyTemplate' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${FileData},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Import-DlpPolicyTemplate') `\n                            -Arg ('Import-DlpPolicyTemplate', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Import-DlpPolicyTemplate\n    # .ForwardHelpCategory"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392308"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571719"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""64"",""MessageTotal"":""162"",""ScriptBlockText"":"" catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Move-ActiveMailboxDatabase\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Move-AddressList' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${Target},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Move-AddressList') `\n                            -Arg ('Move-AddressList', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Move-AddressList\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Move-DatabasePath' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${EdbFilePath},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${LogFolderPath},\n\n    ${DomainController},\n\n    [switch]\n    ${ConfigurationOnly},\n\n    [switch]\n    ${Force},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\"

















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392309"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571719"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""65"",""MessageTotal"":""162"",""ScriptBlockText"":""\n\n    ${MinDevicePasswordComplexCharacters},\n\n    ${MaxEmailHTMLBodyTruncationSize},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${DevicePasswordExpiration},\n\n    ${UNCAccessEnabled},\n\n    ${AllowCamera},\n\n    ${AllowTextMessaging},\n\n    ${MaxDevicePasswordFailedAttempts},\n\n    ${AllowBrowser},\n\n    ${MaxEmailAgeFilter},\n\n    ${RequireSignedSMIMEAlgorithm},\n\n    ${RequireManualSyncWhenRoaming},\n\n    ${AllowSMIMEEncryptionAlgorithmNegotiation},\n\n    ${PasswordRecoveryEnabled},\n\n    ${MaxEmailBodyTruncationSize},\n\n    ${AllowBluetooth},\n\n    ${RequireEncryptionSMIMEAlgorithm},\n\n    ${DevicePolicyRefreshInterval},\n\n    ${AllowMobileOTAUpdate},\n\n    ${MaxAttachmentSize},\n\n    ${AllowConsumerEmail},\n\n    ${AllowDesktopSync},\n\n    ${MaxInactivityTimeDeviceLock},\n\n    ${AlphanumericDevicePasswordRequired},\n\n    ${RequireStorageCardEncryption},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${AllowSMIMESoftCerts},\n\n    ${AllowRemoteDesktop},\n\n    ${AllowSimpleDevicePassword},\n\n    ${AttachmentsEnabled},\n\n    ${MaxCalendarAgeFilter},\n\n    ${AllowWiFi},\n\n    ${AllowPOPIMAPEmail},\n\n    ${IsDefault},\n\n    ${DomainController},\n\n    ${IsDefaultPolicy},\n\n    ${ApprovedApplicationList},\n\n    ${Name},\n\n    ${WSSAccessEnabled},\n\n    ${RequireSignedSMIMEMessages},\n\n    ${AllowHTMLEmail},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${MinDevicePasswordLength},\n\n    ${IrmEnabled},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-ActiveSyncMailboxPolicy') `\n                            -Arg ('New-ActiveSyncMailboxPolicy', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-ActiveSyncMailboxPolicy\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-ActiveSyncVirtualDirectory' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${ExtendedProte"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392310"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571719"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""66"",""MessageTotal"":""162"",""ScriptBlockText"":"" $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-AdminAuditLogSearch') `\n                            -Arg ('New-AdminAuditLogSearch', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-AdminAuditLogSearch\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-App' `\n{\n    param(\n    \n    [Alias('wa')]\n    ${WarningAction},\n\n    ${Etoken},\n\n    ${FileStream},\n\n    ${Enabled},\n\n    ${Url},\n\n    ${Mailbox},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${MarketplaceServicesUrl},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${DefaultStateForUser},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${MarketplaceQueryMarket},\n\n    [switch]\n    ${DownloadOnly},\n\n    ${ProvidedTo},\n\n    ${UserList},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [switch]\n    ${OrganizationApp},\n\n    ${DomainController},\n\n    ${MarketplaceAssetID},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${FileData},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AllowReadWriteMailbox},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-App') `\n                            -Arg ('New-App', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n    "


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392311"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571719"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""67"",""MessageTotal"":""162"",""ScriptBlockText"":""SBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-ClassificationRuleCollection') `\n                            -Arg ('New-ClassificationRuleCollection', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-ClassificationRuleCollection\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-CompliancePolicySyncNotification' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-CompliancePolicySyncNotification') `\n                            -Arg ('New-CompliancePolicySyncNotification', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-CompliancePolicySyncNotification\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-DatabaseAvailabilityGroup' `\n{\n    p"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392312"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571719"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""68"",""MessageTotal"":""162"",""ScriptBlockText"":""                 -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-DataClassification\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-DeliveryAgentConnector' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${MaxMessageSize},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${Name},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${MaxMessagesPerConnection},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${Comment},\n\n    ${MaxConcurrentConnections},\n\n    ${AddressSpaces},\n\n    ${SourceTransportServers},\n\n    ${DeliveryProtocol},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    ${Enabled},\n\n    ${IsScopedConnector},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-DeliveryAgentConnector') `\n                            -Arg ('New-DeliveryAgentConnector', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-DeliveryAgentConnector\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-DistributionGroup' `\n{\n    param(\n    \n    [Alias('wa')]\n    ${WarningAction},\n\n    ${ModeratedBy},\n\n    ${ModerationEnabled},\n\n    ${DisplayName},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${M"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392313"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571719"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""69"",""MessageTotal"":""162"",""ScriptBlockText"":""n},\n\n    ${DomainController},\n\n    ${Path},\n\n    ${Role},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-EcpVirtualDirectory') `\n                            -Arg ('New-EcpVirtualDirectory', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-EcpVirtualDirectory\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-EdgeSubscription' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${FileName},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${AccountExpiryDuration},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${CreateInternetSendConnector},\n\n    ${Site},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    ${CreateInboundSendConnector},\n\n    ${FileData},\n\n    [switch]\n    ${Force},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-EdgeSubscription') `\n                            -Arg ('New-EdgeSubscription', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392315"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571719"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""71"",""MessageTotal"":""162"",""ScriptBlockText"":""yInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-HybridConfiguration\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-InboxRule' `\n{\n    param(\n    \n    ${ExceptIfMyNameNotInToBox},\n\n    ${ExceptIfMyNameInToOrCcBox},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${WithinSizeRangeMaximum},\n\n    ${ReceivedBeforeDate},\n\n    ${ExceptIfFromAddressContainsWords},\n\n    ${MyNameInToOrCcBox},\n\n    ${ExceptIfWithinSizeRangeMaximum},\n\n    ${WithinSizeRangeMinimum},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${ExceptIfHeaderContainsWords},\n\n    ${ExceptIfReceivedBeforeDate},\n\n    ${Mailbox},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${ExceptIfFrom},\n\n    ${RedirectTo},\n\n    ${ReceivedAfterDate},\n\n    ${ForwardTo},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${ExceptIfReceivedAfterDate},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${ExceptIfWithImportance},\n\n    ${HeaderContainsWords},\n\n    ${ExceptIfSentOnlyToMe},\n\n    ${ExceptIfSubjectOrBodyContainsWords},\n\n    ${ExceptIfMessageTypeMatches},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${ExceptIfHasAttachment},\n\n    ${DeleteMessage},\n\n    ${ExceptIfMyNameInToBox},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [switch]\n    ${AlwaysDeleteOutlookRulesBlob},\n\n    ${From},\n\n    ${RecipientAddressContainsWords},\n\n    ${FlaggedForAction},\n\n    ${WithSensitivity},\n\n    ${CopyToFolder},\n\n    ${FromMessageId},\n\n    ${ExceptIfSubjectContainsWords},\n\n    ${MarkImportance},\n\n    ${Priority},\n\n    ${ApplyCategory},\n\n    ${SubjectContainsWords},\n\n    ${WithImportance},\n\n    ${ExceptIfWithSensitivity},\n\n    ${ExceptIfRecipientAddressContainsWords},\n\n    ${HasAttachment},\n\n    ${SubjectOrBodyContainsWords},\n\n    ${ExceptIfFlaggedForAction},\n\n    ${BodyContainsWords},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${StopProcessingRules},\n\n    ${ExceptIfWithinSizeRangeMinimum},\n\n    ${MessageTypeMatches},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${SendTextMessageNotificationTo},\n\n    ${MarkAsRead},\n\n    ${MoveToFolder},\n\n    ${SentTo},\n\n    ${MyNameInCcBox},\n\n    [switch]\n    ${ValidateOnly},\n\n    ${DomainController},\n\n    ${MyNameInToBox},\n\n    ${ExceptIfSentTo},\n\n    [switch]\n    ${Force},\n\n    ${SentOnlyToMe},\n\n    ${Name},\n\n    ${ForwardAsAttachmentTo},\n\n    ${ExceptIfBodyContainsWords},\n\n    ${ExceptIfMyNameInCcBox},\n\n    ${FromAddressContainsWords},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${MyNameNotInToBox},\n\n    ${HasClassification},\n\n    ${ExceptIfHasClassification},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters ="



















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392316"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571719"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""72"",""MessageTotal"":""162"",""ScriptBlockText"":""{ImmutableId},\n\n    ${ThrottlingPolicy},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${AddressBookPolicy},\n\n    ${RetentionPolicy},\n\n    ${RoomMailboxPassword},\n\n    [switch]\n    ${Shared},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${IsExcludedFromServingHierarchy},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [switch]\n    ${Arbitration},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [switch]\n    ${Room},\n\n    [switch]\n    ${LinkedRoom},\n\n    ${LinkedMasterAccount},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Initials},\n\n    [switch]\n    ${RemoteArchive},\n\n    ${SharingPolicy},\n\n    ${DomainController},\n\n    ${LinkedDomainController},\n\n    ${ActiveSyncMailboxPolicy},\n\n    [switch]\n    ${AccountDisabled},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${HoldForMigration},\n\n    [switch]\n    ${Discovery},\n\n    ${ArchiveDomain},\n\n    ${Alias},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${Database},\n\n    ${FirstName},\n\n    ${Phone},\n\n    ${ResourceCapacity},\n\n    ${PrimarySmtpAddress},\n\n    ${SendModerationNotifications},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${OrganizationalUnit},\n\n    ${Name},\n\n    ${RemotePowerShellEnabled},\n\n    ${ModeratedBy},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-Mailbox') `\n                            -Arg ('New-Mailbox', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-Mailbox\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-MailboxAuditLogSearch' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${Name},\n\n    ${LogonTypes},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${EndDate},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${ExternalAccess},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${StatusMailRecipients},\n\n    ${Operations},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Mailboxes}"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392317"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571719"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""73"",""MessageTotal"":""162"",""ScriptBlockText"":""Arguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-MailboxFolder\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-MailboxImportRequest' `\n{\n    param(\n    \n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${ExcludeDumpster},\n\n    ${ConflictResolutionOption},\n\n    ${AssociatedMessagesCopyOption},\n\n    ${WorkloadType},\n\n    ${Mailbox},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${InternalFlags},\n\n    ${SuspendComment},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${Priority},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${Name},\n\n    ${IncludeFolders},\n\n    ${LargeItemLimit},\n\n    [switch]\n    ${Suspend},\n\n    ${BatchName},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [switch]\n    ${AcceptLargeDataLoss},\n\n    ${ContentCodePage},\n\n    ${BadItemLimit},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${FilePath},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${ExcludeFolders},\n\n    ${SkipMerging},\n\n    ${TargetRootFolder},\n\n    ${SourceRootFolder},\n\n    ${CompletedRequestAgeLimit},\n\n    [switch]\n    ${IsArchive},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-MailboxImportRequest') `\n                            -Arg ('New-MailboxImportRequest', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .Forwar"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392318"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571719"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""74"",""MessageTotal"":""162"",""ScriptBlockText"":"",\n\n    ${MessageBodyFormat},\n\n    ${Initials},\n\n    ${DomainController},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${ExternalEmailAddress},\n\n    ${Alias},\n\n    ${MessageFormat},\n\n    ${FirstName},\n\n    ${PrimarySmtpAddress},\n\n    ${SendModerationNotifications},\n\n    ${OrganizationalUnit},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-MailContact') `\n                            -Arg ('New-MailContact', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-MailContact\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-MailMessage' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${Body},\n\n    ${Subject},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${BodyFormat},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-MailMessage') `\n"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392320"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571719"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""76"",""MessageTotal"":""162"",""ScriptBlockText"":""ssion\n}\n        \n& $script:SetItem 'function:script:New-MigrationBatch' `\n{\n    param(\n    \n    ${AutoRetryCount},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${SourceEndpoint},\n\n    [switch]\n    ${AutoStart},\n\n    ${Users},\n\n    ${UserIds},\n\n    [switch]\n    ${DisallowExistingUsers},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${TimeZone},\n\n    ${TargetEndpoint},\n\n    ${CSVData},\n\n    ${NotificationEmails},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${TargetArchiveDatabases},\n\n    ${AllowIncrementalSyncs},\n\n    ${ReportInterval},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${LargeItemLimit},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${SkipSteps},\n\n    ${DomainController},\n\n    [switch]\n    ${DisableOnCopy},\n\n    [switch]\n    ${Local},\n\n    ${TargetDeliveryDomain},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [switch]\n    ${ArchiveOnly},\n\n    ${BadItemLimit},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${TargetDatabases},\n\n    ${SourcePublicFolderDatabase},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${Name},\n\n    [switch]\n    ${AutoComplete},\n\n    ${AllowUnknownColumnsInCsv},\n\n    [switch]\n    ${PrimaryOnly},\n\n    ${Locale},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-MigrationBatch') `\n                            -Arg ('New-MigrationBatch', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-MigrationBatch\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-MigrationEndpoint' `\n{\n    param(\n    \n    ${Credentials},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${Name},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${DomainController},\n\n    [switch]\n    ${ExchangeRemoteMove},\n\n    ${EmailAddress},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392319"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571719"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""75"",""MessageTotal"":""162"",""ScriptBlockText"":""ry Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-ManagementRole' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${Description},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${Name},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${Parent},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-ManagementRole') `\n                            -Arg ('New-ManagementRole', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-ManagementRole\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-ManagementRoleAssignment' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${CustomRecipientWriteScope},\n\n    ${Name},\n\n    ${SecurityGroup},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Computer},\n\n    ${ExclusiveRecipientWriteScope},\n\n    ${User},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${CustomConfigWriteScope},\n\n    ${RecipientOrganizationalUnitScope},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${Delegating},\n\n    ${Policy},\n\n    ${DomainController},\n\n    ${ExclusiveConfigWriteScope},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${RecipientRelativeWriteScope},\n\n    ${Role},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($par"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392314"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571719"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""70"",""MessageTotal"":""162"",""ScriptBlockText"":""row\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-ExchangeCertificate\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-FederationTrust' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${AdministratorProvisioningId},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [switch]\n    ${SkipNamespaceProviderProvisioning},\n\n    ${Name},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${ApplicationIdentifier},\n\n    ${ApplicationUri},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${MetadataUrl},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Thumbprint},\n\n    [switch]\n    ${UseLegacyProvisioningService},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-FederationTrust') `\n                            -Arg ('New-FederationTrust', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-FederationTrust\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-Fingerprint' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${Description},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${FileData},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections"

















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392321"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571719"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""77"",""MessageTotal"":""162"",""ScriptBlockText"":""ion.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-MoveRequest\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-OabVirtualDirectory' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${ExtendedProtectionSPNList},\n\n    ${Server},\n\n    ${RequireSSL},\n\n    [switch]\n    ${Recovery},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${ExternalUrl},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${WebSiteName},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${InternalUrl},\n\n    ${PollInterval},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${ExtendedProtectionTokenChecking},\n\n    ${ExtendedProtectionFlags},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    ${Path},\n\n    ${Role},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-OabVirtualDirectory') `\n                            -Arg ('New-OabVirtualDirectory', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-OabVirtualDirectory\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-OfflineAddressBook' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${VirtualDirectories},\n\n    ${Name},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${GlobalWebDistributionEnabled},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariab"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392322"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571719"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""78"",""MessageTotal"":""162"",""ScriptBlockText"":""           }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-OutlookProvider\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-OwaMailboxPolicy' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${Name},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-OwaMailboxPolicy') `\n                            -Arg ('New-OwaMailboxPolicy', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-OwaMailboxPolicy\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-OwaVirtualDirectory' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${ExtendedProtectionSPNList},\n\n    ${Server},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${ExternalUrl},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${WebSiteName},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${InternalUrl},\n\n    ${ApplicationRoot},\n\n    ${A"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392323"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571720"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""79"",""MessageTotal"":""162"",""ScriptBlockText"":""row\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-PowerShellVirtualDirectory\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-PublicFolder' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${Name},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${EformsLocaleId},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${Mailbox},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    ${Path},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-PublicFolder') `\n                            -Arg ('New-PublicFolder', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-PublicFolder\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-PublicFolderMigrationRequest' `\n{\n    param(\n    \n    ${CSVStream},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${SourceDatabase},\n\n    ${WorkloadType},\n\n    ${Name},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${SuspendComment},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${Priority},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${SkipMerging},\n\n    ${LargeItemLimit},\n\n    [switch]\n    ${Suspend},\n\n    ${BatchName},\n\n    ${CSVData},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${InternalFlags},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [switch]\n    ${AcceptLargeDataLoss},\n\n    ${BadItemLimit},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('wi')]\n   "




















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392324"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571720"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""80"",""MessageTotal"":""162"",""ScriptBlockText"":""\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-RemoteDomain') `\n                            -Arg ('New-RemoteDomain', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-RemoteDomain\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-RemoteMailbox' `\n{\n    param(\n    \n    ${Password},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${ModeratedBy},\n\n    ${ModerationEnabled},\n\n    ${DisplayName},\n\n    ${ResetPasswordOnNextLogon},\n\n    ${UserPrincipalName},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${LastName},\n\n    ${SamAccountName},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [switch]\n    ${Archive},\n\n    [switch]\n    ${Equipment},\n\n    ${ImmutableId},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${OnPremisesOrganizationalUnit},\n\n    [switch]\n    ${Shared},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [switch]\n    ${Room},\n\n    ${Initials},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${RemoteRoutingAddress},\n\n    ${DomainController},\n\n    [switch]\n    ${AccountDisabled},\n\n    ${Alias},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${FirstName},\n\n    ${PrimarySmtpAddress},\n\n    ${SendModerationNotifications},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${Name},\n\n    ${RemotePowerShellEnabled},\n\n    [switch]\n    ${ACLableSyncedObjectEnabled},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @client"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392325"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571720"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""81"",""MessageTotal"":""162"",""ScriptBlockText"":""   ${OutBuffer},\n\n    ${SamAccountName},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${CustomConfigWriteScope},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${ManagedBy},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    ${LinkedForeignGroup},\n\n    ${RecipientOrganizationalUnitScope},\n\n    ${Roles},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-RoleGroup') `\n                            -Arg ('New-RoleGroup', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-RoleGroup\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-SearchDocumentFormat' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${Name},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${Extension},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Server},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${MimeType},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${Enabled},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-SearchDocumentFormat') `\n                            -A"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392326"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571720"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""82"",""MessageTotal"":""162"",""ScriptBlockText"":"" ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${DisplayName},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${Alias},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${OrganizationalUnit},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${SharePointUrl},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    [switch]\n    ${Force},\n\n    [switch]\n    ${OverrideRecipientQuotas},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-SiteMailbox') `\n                            -Arg ('New-SiteMailbox', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-SiteMailbox\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-SiteMailboxProvisioningPolicy' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${IssueWarningQuota},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${Name},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${DomainController},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${ProhibitSendReceiveQuota},\n\n    ${AliasPrefix},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${MaxReceiveSize},\n\n    ${DefaultAliasPrefixEnabled},\n\n    [switch]\n    ${IsDefault},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSIm"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392327"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571720"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""83"",""MessageTotal"":""162"",""ScriptBlockText"":""iceCutoffBalance},\n\n    ${EwsMaxConcurrency},\n\n    ${AnonymousMaxBurst},\n\n    ${AnonymousRechargeRate},\n\n    ${DiscoveryMaxPreviewSearchMailboxes},\n\n    ${OutlookServiceMaxConcurrency},\n\n    ${RcaRechargeRate},\n\n    ${PswsMaxRequest},\n\n    ${EncryptionSenderCutoffBalance},\n\n    ${OutlookServiceCutoffBalance},\n\n    ${PushNotificationSamplingPeriodPerDevice},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${DiscoveryMaxStatsSearchMailboxes},\n\n    ${ImapRechargeRate},\n\n    ${DiscoverySearchTimeoutPeriod},\n\n    ${ImapCutoffBalance},\n\n    ${PowerShellMaxTenantRunspaces},\n\n    ${ImapMaxConcurrency},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${Name},\n\n    ${EasMaxConcurrency},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${CpaCutoffBalance},\n\n    ${PowerShellCutoffBalance},\n\n    ${EasRechargeRate},\n\n    ${MessageRateLimit},\n\n    ${OwaRechargeRate},\n\n    ${ComplianceMaxExpansionNestedDGs},\n\n    ${PowerShellMaxOperations},\n\n    ${EwsMaxSubscriptions},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-ThrottlingPolicy') `\n                            -Arg ('New-ThrottlingPolicy', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-ThrottlingPolicy\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-TransportRule' `\n{\n    param(\n    \n    ${ActivationDate},\n\n    ${AddToRecipients},\n\n    ${ApplyHtmlDisclaimerFallbackAction},\n\n    ${ExceptIfRecipientADAttributeContainsWords},\n\n    ${RecipientADAttributeMatchesPatterns},\n\n    ${AttachmentSizeOver},\n\n    ${ExceptIfSenderADAttributeContainsWords},\n\n    ${SetSCL},\n\n    ${AnyOfToHeaderMemberOf},\n\n    ${Disconnect},\n\n    ${ExceptIfSentToMemberOf},\n\n    ${ExceptIfAnyOfCcHeader},\n\n    ${ExceptIfAttachmentMatchesPatterns},\n\n    ${RecipientDomainIs},\n\n    ${ManagerForEvaluatedUser},\n\n    ${SmtpRejectMessageRejectStatusCode},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${ExceptIfHeaderMatchesPatterns},\n\n    ${ExceptIfFromScope},\n\n    ${ADComparisonAttribute},\n\n    ${ExceptIfHeaderContainsWords},\n\n    ${HeaderMatchesPatterns},\n\n  "























Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392328"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571720"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""84"",""MessageTotal"":""162"",""ScriptBlockText"":"" Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-UMAutoAttendant\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-UMCallAnsweringRule' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${CallerIds},\n\n    ${Priority},\n\n    ${Name},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${KeyMappings},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Mailbox},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${CallersCanInterruptGreeting},\n\n    ${ScheduleStatus},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${TimeOfDay},\n\n    ${DomainController},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${ExtensionsDialed},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${CheckAutomaticReplies},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-UMCallAnsweringRule') `\n                            -Arg ('New-UMCallAnsweringRule', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-UMCallAnsweringRule\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-UMDialPlan' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${Name},\n\n    ${CountryOrRegionCode},\n\n    ${GenerateUMMailboxPolicy},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${NumberOfDigitsInExtension},\n\n    ${VoIPSecurity},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${FaxEnabled},\n\n    ${AccessTelephoneNumbers},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${Wa"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392329"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571720"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""85"",""MessageTotal"":""162"",""ScriptBlockText"":""lias('ev')]\n    ${ErrorVariable},\n\n    [switch]\n    ${Force},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${ExtendedProtectionSPNList},\n\n    ${ExtendedProtectionTokenChecking},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${ApplicationRoot},\n\n    ${ExternalUrl},\n\n    ${MRSProxyEnabled},\n\n    ${DigestAuthentication},\n\n    ${GzipLevel},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${AppPoolId},\n\n    ${DomainController},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${Role},\n\n    ${WebSiteName},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${ExtendedProtectionFlags},\n\n    ${InternalUrl},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${Server},\n\n    ${WindowsAuthentication},\n\n    ${AppPoolIdForManagement},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-WebServicesVirtualDirectory') `\n                            -Arg ('New-WebServicesVirtualDirectory', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName New-WebServicesVirtualDirectory\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:New-X400AuthoritativeDomain' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${X400DomainName},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${Name},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${X400ExternalRelay},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n      "





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392330"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571720"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""86"",""MessageTotal"":""162"",""ScriptBlockText"":""ylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-ActiveSyncDeviceAccessRule') `\n                            -Arg ('Remove-ActiveSyncDeviceAccessRule', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-ActiveSyncDeviceAccessRule\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-ActiveSyncDeviceClass' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-ActiveSyncDeviceClass') `\n                            -Arg ('Remove-ActiveSyncDeviceClass', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Proce"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392331"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571720"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""87"",""MessageTotal"":""162"",""ScriptBlockText"":""        }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-AddressList\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-ADPermission' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${AccessRights},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${Properties},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${DomainController},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [switch]\n    ${Deny},\n\n    ${ChildObjectTypes},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${User},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    ${ExtendedRights},\n\n    ${InheritedObjectType},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${InheritanceType},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${Instance},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-ADPermission') `\n                            -Arg ('Remove-ADPermission', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-ADPermission\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-App' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${Mailbox},\n\n    [Alias('ev')]\n    "





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392332"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571720"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""88"",""MessageTotal"":""162"",""ScriptBlockText"":"" [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-AvailabilityAddressSpace') `\n                            -Arg ('Remove-AvailabilityAddressSpace', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-AvailabilityAddressSpace\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-ClassificationRuleCollection' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-ClassificationRuleCollection') `\n                  "


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392333"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571720"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""89"",""MessageTotal"":""162"",""ScriptBlockText"":""       -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-DatabaseAvailabilityGroupConfiguration') `\n                            -Arg ('Remove-DatabaseAvailabilityGroupConfiguration', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-DatabaseAvailabilityGroupConfiguration\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-DatabaseAvailabilityGroupNetwork' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-DatabaseAvailabilityGroupNetwork') `\n                            -Arg ('Remove-DatabaseAvailabilityGroupNetwork', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-DatabaseAvailabilityGroupNetwork\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-DatabaseAvailabilityGroupServer' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorActi"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392334"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571720"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""90"",""MessageTotal"":""162"",""ScriptBlockText"":""lePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-DistributionGroup\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-DistributionGroupMember' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${BypassSecurityGroupManagerCheck},\n\n    ${Member},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-DistributionGroupMember') `\n                            -Arg ('Remove-DistributionGroupMember', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-DistributionGroupMember\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-DlpPolicy' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPo"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392335"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571720"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""91"",""MessageTotal"":""162"",""ScriptBlockText"":""\n    [switch]\n    ${Force},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-EdgeSubscription') `\n                            -Arg ('Remove-EdgeSubscription', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-EdgeSubscription\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-EmailAddressPolicy' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-EmailAddressPolicy') `\n                            -Arg ('Remove-EmailAddressPolicy', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeli"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392337"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571720"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""93"",""MessageTotal"":""162"",""ScriptBlockText"":""\n    [switch]\n    ${Verbose},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${Server},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-IPAllowListEntry') `\n                            -Arg ('Remove-IPAllowListEntry', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-IPAllowListEntry\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-IPAllowListProvider' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-IPAllowListProvider') `\n              "


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392336"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571720"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""92"",""MessageTotal"":""162"",""ScriptBlockText"":""name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-ForeignConnector\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-GlobalAddressList' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-GlobalAddressList') `\n                            -Arg ('Remove-GlobalAddressList', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-GlobalAddressList\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-GlobalMonitoringOverride' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${ItemType},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n  "





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392339"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571721"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""95"",""MessageTotal"":""162"",""ScriptBlockText"":""   $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-MailboxFolderPermission\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-MailboxImportRequest' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${RequestGuid},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    ${RequestQueue},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-MailboxImportRequest') `\n                            -Arg ('Remove-MailboxImportRequest', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-MailboxImportRequest\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-MailboxPermission' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${AccessRights},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [switch]\n    ${Deny},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${User},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [switch]\n    ${IgnoreDefaultScope},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${InheritanceType},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${Instance},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try "


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392338"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571720"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""94"",""MessageTotal"":""162"",""ScriptBlockText"":""           -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-LinkedUser') `\n                            -Arg ('Remove-LinkedUser', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-LinkedUser\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-Mailbox' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${Database},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [switch]\n    ${RemoveArbitrationMailboxWithOABsAllowed},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${Arbitration},\n\n    ${StoreMailboxIdentity},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [switch]\n    ${RemoveLastArbitrationMailboxAllowed},\n\n    [switch]\n    ${PublicFolder},\n\n    ${Permanent},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [switch]\n    ${IgnoreDefaultScope},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [switch]\n    ${IgnoreLegalHold},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [switch]\n    ${Force},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-Mailbox') `\n                            -Arg ('Remove-Mailbox', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-Mailbox\n    # .For"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392340"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571721"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""96"",""MessageTotal"":""162"",""ScriptBlockText"":""${IgnoreDefaultScope},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-MailContact') `\n                            -Arg ('Remove-MailContact', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-MailContact\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-MailUser' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [switch]\n    ${IgnoreDefaultScope},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [switch]\n    ${IgnoreLegalHold},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-MailUser') `\n                            -Arg ('Remove-MailUser', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392343"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571721"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""99"",""MessageTotal"":""162"",""ScriptBlockText"":""rameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-MoveRequest') `\n                            -Arg ('Remove-MoveRequest', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-MoveRequest\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-OabVirtualDirectory' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [switch]\n    ${Force},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-OabVirtualDirectory') `\n                            -Arg ('Remove-OabVirtualDirectory', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-OabVirtualDirectory\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-OfflineAddressBook' `\n{\n "





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392341"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571721"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""97"",""MessageTotal"":""162"",""ScriptBlockText"":""agementRoleAssignment') `\n                            -Arg ('Remove-ManagementRoleAssignment', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-ManagementRoleAssignment\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-ManagementRoleEntry' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-ManagementRoleEntry') `\n                            -Arg ('Remove-ManagementRoleEntry', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-ManagementRoleEntry\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-ManagementScope' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${Pipelin"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392342"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571721"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""98"",""MessageTotal"":""162"",""ScriptBlockText"":""]\n    ${OutVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [switch]\n    ${Force},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-MigrationBatch') `\n                            -Arg ('Remove-MigrationBatch', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-MigrationBatch\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-MigrationEndpoint' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemot"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392344"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571721"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""100"",""MessageTotal"":""162"",""ScriptBlockText"":"" }\n }\n\n    # .ForwardHelpTargetName Remove-OutlookProvider\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-OwaMailboxPolicy' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [switch]\n    ${Force},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-OwaMailboxPolicy') `\n                            -Arg ('Remove-OwaMailboxPolicy', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-OwaMailboxPolicy\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-OwaVirtualDirectory' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positio"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392345"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571721"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""101"",""MessageTotal"":""162"",""ScriptBlockText"":""nally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-PublicFolder') `\n                            -Arg ('Remove-PublicFolder', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-PublicFolder\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-PublicFolderClientPermission' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${User},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-PublicFolderClientPermission') `\n                            -Arg ('Remove-PublicFolderClientPermission', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        "





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392346"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571721"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""102"",""MessageTotal"":""162"",""ScriptBlockText"":""tionSubscription', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-PushNotificationSubscription\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-ReceiveConnector' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-ReceiveConnector') `\n                            -Arg ('Remove-ReceiveConnector', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-ReceiveConnector\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-RemoteDomain' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n "


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392347"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571721"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""103"",""MessageTotal"":""162"",""ScriptBlockText"":""as('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-RetentionPolicyTag') `\n                            -Arg ('Remove-RetentionPolicyTag', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-RetentionPolicyTag\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-RoleAssignmentPolicy' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-RoleAssignmentPol"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392348"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571721"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""104"",""MessageTotal"":""162"",""ScriptBlockText"":""iptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-SendConnector') `\n                            -Arg ('Remove-SendConnector', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-SendConnector\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-ServerMonitoringOverride' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Server},\n\n    ${ItemType},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${PropertyName},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-ServerMonitoringOverride') `\n                            -Arg ('Remove-ServerMonitoringOverride', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-ServerMonitoringOverride\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-SettingOverride' `\n{\n    param(\n    \n    [Alias"

















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392349"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571721"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""105"",""MessageTotal"":""162"",""ScriptBlockText"":""dHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-SystemMessage' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-SystemMessage') `\n                            -Arg ('Remove-SystemMessage', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-SystemMessage\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-ThrottlingPolicy' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [switch]\n    ${Force},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingC"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392354"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""110"",""MessageTotal"":""162"",""ScriptBlockText"":"" [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${TargetFolder},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [switch]\n    ${LogOnly},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${LogLevel},\n\n    ${SearchQuery},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [switch]\n    ${IncludeUnsearchableItems},\n\n    [switch]\n    ${EstimateResultOnly},\n\n    ${Identity},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [switch]\n    ${SearchDumpsterOnly},\n\n    [switch]\n    ${DoNotIncludeArchive},\n\n    ${DomainController},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [switch]\n    ${DeleteContent},\n\n    [switch]\n    ${Force},\n\n    ${TargetMailbox},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Search-Mailbox') `\n                            -Arg ('Search-Mailbox', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Search-Mailbox\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Search-MailboxAuditLog' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${LogonTypes},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${EndDate},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${ExternalAccess},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Operations},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${Mailboxes},\n\n    [switch]\n    ${ShowDetails},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${ResultSize},\n\n    ${DomainController},\n\n    ${StartDate},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = "

















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392353"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""109"",""MessageTotal"":""162"",""ScriptBlockText"":""tionRequest') `\n                            -Arg ('Resume-PublicFolderMailboxMigrationRequest', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Resume-PublicFolderMailboxMigrationRequest\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Resume-PublicFolderMigrationRequest' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Resume-PublicFolderMigrationRequest') `\n                            -Arg ('Resume-PublicFolderMigrationRequest', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Resume-PublicFolderMigrationRequest\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Resume-PublicFolderMoveRequest' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [s"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392352"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571721"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""108"",""MessageTotal"":""162"",""ScriptBlockText"":""ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Resume-MailboxExportRequest') `\n                            -Arg ('Resume-MailboxExportRequest', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Resume-MailboxExportRequest\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Resume-MailboxImportRequest' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Resume-MailboxImportRequest') `\n                            -Arg ('Resume-MailboxImportRequest', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundP"

















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392356"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""112"",""MessageTotal"":""162"",""ScriptBlockText"":""    try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-ActiveSyncVirtualDirectory') `\n                            -Arg ('Set-ActiveSyncVirtualDirectory', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-ActiveSyncVirtualDirectory\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-AddressBookPolicy' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${Name},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${RoomList},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${GlobalAddressList},\n\n    ${AddressLists},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${OfflineAddressBook},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-AddressBookPolicy') `\n                            -Arg ('Set-AddressBookPolicy', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocat"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392355"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""111"",""MessageTotal"":""162"",""ScriptBlockText"":""    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${AccessLevel},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-ActiveSyncDeviceAccessRule') `\n                            -Arg ('Set-ActiveSyncDeviceAccessRule', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-ActiveSyncDeviceAccessRule\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-ActiveSyncDeviceAutoblockThreshold' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${BehaviorTypeIncidenceDuration},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${AdminEmailInsert},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${BehaviorTypeIncidenceLimit},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    ${DeviceBlockDuration},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                          "


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392351"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571721"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""107"",""MessageTotal"":""162"",""ScriptBlockText"":""ablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-WebServicesVirtualDirectory\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-X400AuthoritativeDomain' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-X400AuthoritativeDomain') `\n                            -Arg ('Remove-X400AuthoritativeDomain', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-X400AuthoritativeDomain\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Reset-ProvisioningCache' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${CacheKeys},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [switch]\n    ${GlobalCache},\n\n    ${Server},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [switch]\n    ${CurrentOrganization},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${Organizations},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${Application},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n          "





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392357"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""113"",""MessageTotal"":""162"",""ScriptBlockText"":""   [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${PartnerId},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${HubSiteEnabled},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-ADSite') `\n                            -Arg ('Set-ADSite', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-ADSite\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-AdSiteLink' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${MaxMessageSize},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${Name},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    ${ExchangeCost},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-AdSiteLink') `\n                            -Arg ('Set-AdSiteLink', $PSBoundParameters, $positionalArguments) `\n       "


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392350"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571721"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""106"",""MessageTotal"":""162"",""ScriptBlockText"":""rameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-UMDialPlan') `\n                            -Arg ('Remove-UMDialPlan', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-UMDialPlan\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Remove-UMHuntGroup' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-UMHuntGroup') `\n                            -Arg ('Remove-UMHuntGroup', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Remove-UMHuntGroup\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSessi"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392358"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""114"",""MessageTotal"":""162"",""ScriptBlockText"":""s.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-AuthServer') `\n                            -Arg ('Set-AuthServer', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-AuthServer\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-AutodiscoverVirtualDirectory' `\n{\n    param(\n    \n    ${DomainController},\n\n    ${ExtendedProtectionSPNList},\n\n    ${WSSecurityAuthentication},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${ExternalUrl},\n\n    ${WindowsAuthentication},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${BasicAuthentication},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${InternalUrl},\n\n    ${Identity},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${ExtendedProtectionTokenChecking},\n\n    ${ExtendedProtectionFlags},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DigestAuthentication},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${OAuthAuthentication},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-AutodiscoverVirtualDirectory') `\n                            -Arg ('Set-AutodiscoverVirtualDirectory', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $st"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392361"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""117"",""MessageTotal"":""162"",""ScriptBlockText"":""   ${ErrorVariable},\n\n    ${Identity},\n\n    ${Fingerprints},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    [switch]\n    ${IsDefault},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-DataClassification') `\n                            -Arg ('Set-DataClassification', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-DataClassification\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-DeliveryAgentConnector' `\n{\n    param(\n    \n    [switch]\n    ${Force},\n\n    ${MaxMessageSize},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${Name},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${MaxMessagesPerConnection},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${Comment},\n\n    ${MaxConcurrentConnections},\n\n    ${AddressSpaces},\n\n    ${SourceTransportServers},\n\n    ${Identity},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DeliveryProtocol},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    ${Enabled},\n\n    ${IsScopedConnector},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                     "





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392359"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""115"",""MessageTotal"":""162"",""ScriptBlockText"":""urage},\n\n    ${ECPEnabled},\n\n    ${DisplayName},\n\n    ${PopUseProtocolDefaults},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${MAPIBlockOutlookVersions},\n\n    ${ShowGalAsDefaultView},\n\n    ${ImapEnableExactRFC822Size},\n\n    ${PopForceICalForCalendarRetrievalOption},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${ImapForceICalForCalendarRetrievalOption},\n\n    ${SamAccountName},\n\n    [switch]\n    ${IgnoreDefaultScope},\n\n    ${EmailAddresses},\n\n    ${MAPIEnabled},\n\n    ${EwsEnabled},\n\n    ${EwsAllowOutlook},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${PopEnabled},\n\n    ${ActiveSyncAllowedDeviceIDs},\n\n    ${PrimarySmtpAddress},\n\n    ${ActiveSyncBlockedDeviceIDs},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${MAPIBlockOutlookRpcHttp},\n\n    ${EwsAllowMacOutlook},\n\n    ${EwsApplicationAccessPolicy},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${MAPIBlockOutlookExternalConnectivity},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${OWAEnabled},\n\n    ${DomainController},\n\n    ${ActiveSyncEnabled},\n\n    ${ActiveSyncMailboxPolicy},\n\n    ${MAPIBlockOutlookNonCachedMode},\n\n    ${ImapUseProtocolDefaults},\n\n    ${ActiveSyncDebugLogging},\n\n    ${OWAforDevicesEnabled},\n\n    ${ImapMessagesRetrievalMimeFormat},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${MapiHttpEnabled},\n\n    ${PopSuppressReadReceipt},\n\n    ${OwaMailboxPolicy},\n\n    ${Name},\n\n    ${EwsAllowList},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${PopMessagesRetrievalMimeFormat},\n\n    [switch]\n    ${ResetAutoBlockedDevices},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-CASMailbox') `\n                            -Arg ('Set-CASMailbox', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-CASMailbox\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-ClassificationRuleCollection' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n"



















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392362"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""118"",""MessageTotal"":""162"",""ScriptBlockText"":""'Set-DlpPolicy') `\n                            -Arg ('Set-DlpPolicy', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-DlpPolicy\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-DynamicDistributionGroup' `\n{\n    param(\n    \n    ${EmailAddresses},\n\n    ${ConditionalCustomAttribute6},\n\n    ${ModerationEnabled},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${AcceptMessagesOnlyFromSendersOrMembers},\n\n    ${CustomAttribute12},\n\n    ${CustomAttribute10},\n\n    ${ExtensionCustomAttribute5},\n\n    ${CustomAttribute8},\n\n    ${ArbitrationMailbox},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${CustomAttribute5},\n\n    ${AcceptMessagesOnlyFromDLMembers},\n\n    ${ConditionalCustomAttribute2},\n\n    ${ConditionalCustomAttribute1},\n\n    ${PhoneticDisplayName},\n\n    ${MailTip},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${ModeratedBy},\n\n    ${GrantSendOnBehalfTo},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${AcceptMessagesOnlyFrom},\n\n    ${ConditionalCustomAttribute9},\n\n    ${MaxReceiveSize},\n\n    ${ConditionalCustomAttribute4},\n\n    ${EmailAddressPolicyEnabled},\n\n    ${CustomAttribute15},\n\n    ${RejectMessagesFromSendersOrMembers},\n\n    ${WindowsEmailAddress},\n\n    ${ConditionalCustomAttribute13},\n\n    ${RejectMessagesFromDLMembers},\n\n    ${RejectMessagesFrom},\n\n    ${Alias},\n\n    ${DisplayName},\n\n    ${ReportToOriginatorEnabled},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${BypassModerationFromSendersOrMembers},\n\n    ${IncludedRecipients},\n\n    ${ConditionalCustomAttribute12},\n\n    ${CustomAttribute1},\n\n    ${ReportToManagerEnabled},\n\n    [switch]\n    ${ForceUpgrade},\n\n    ${ConditionalCustomAttribute14},\n\n    ${UMDtmfMap},\n\n    ${ManagedBy},\n\n    ${ExtensionCustomAttribute1},\n\n    ${ConditionalCustomAttribute7},\n\n    ${CustomAttribute14},\n\n    ${RequireSenderAuthenticationEnabled},\n\n    ${CustomAttribute9},\n\n    ${RecipientFilter},\n\n    ${CustomAttribute6},\n\n    ${SendOofMessageToOriginatorEnabled},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${ExtensionCustomAttribute4},\n\n    ${SimpleDisplayName},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${ConditionalCompany},\n\n    ${CustomAttribute7},\n\n    ${Notes},\n\n    ${ConditionalStateOrProvince},\n\n    ${CustomAttribute13},\n\n    ${CustomAttribute2},\n\n    ${PrimarySmtpAddress},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${ConditionalCustomAttribute15},\n\n    ${SendModerationNotifications},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${MaxSendSize},\n\n    ${CreateDTMFMap},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${ConditionalCustomAttribute10},\n\n    ${ConditionalCustomAttribute5},\n\n    ${CustomAttribute11},\n\n    ${MailTipTranslations},\n\n    ${ConditionalCustomAttribute"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392360"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""116"",""MessageTotal"":""162"",""ScriptBlockText"":""Parameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-Contact') `\n                            -Arg ('Set-Contact', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-Contact\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-ContentFilterConfig' `\n{\n    param(\n    \n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${Enabled},\n\n    ${SCLRejectThreshold},\n\n    ${BypassedSenders},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${InternalMailEnabled},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${QuarantineMailbox},\n\n    ${SCLDeleteEnabled},\n\n    ${BypassedSenderDomains},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${SCLDeleteThreshold},\n\n    ${DomainController},\n\n    ${ExternalMailEnabled},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${OutlookEmailPostmarkValidationEnabled},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${SCLRejectEnabled},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${RejectionResponse},\n\n    ${BypassedRecipients},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${SCLQuarantineThreshold},\n\n    ${SCLQuarantineEnabled},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-ContentFilterConfig') `\n                            -Arg ('Set-ContentFilterConfig', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n "


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392364"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""120"",""MessageTotal"":""162"",""ScriptBlockText"":""    ${DomainController},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [switch]\n    ${PublishFederationCertificate},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-FederationTrust') `\n                            -Arg ('Set-FederationTrust', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-FederationTrust\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-ForeignConnector' `\n{\n    param(\n    \n    [switch]\n    ${Force},\n\n    ${MaxMessageSize},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${Name},\n\n    ${DropDirectory},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${RelayDsnRequired},\n\n    ${AddressSpaces},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${Comment},\n\n    ${SourceTransportServers},\n\n    ${Identity},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${DropDirectoryQuota},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    ${Enabled},\n\n    ${IsScopedConnector},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandNa"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392363"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""119"",""MessageTotal"":""162"",""ScriptBlockText"":""alCustomAttribute15},\n\n    ${ConditionalCustomAttribute11},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-EmailAddressPolicy') `\n                            -Arg ('Set-EmailAddressPolicy', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-EmailAddressPolicy\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-EventLogLevel' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${Level},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-EventLogLevel') `\n                            -Arg ('Set-EventLogLevel', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocati"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392365"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""121"",""MessageTotal"":""162"",""ScriptBlockText"":""$PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-Group') `\n                            -Arg ('Set-Group', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-Group\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-HybridConfiguration' `\n{\n    param(\n    \n    ${ServiceInstance},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${EdgeTransportServers},\n\n    ${Name},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${ReceivingTransportServers},\n\n    ${TlsCertificateName},\n\n    ${SendingTransportServers},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Features},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${ExternalIPAddresses},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${ClientAccessServers},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${OnPremisesSmartHost},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    ${Domains},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-HybridConfiguration') `\n                            -Arg ('Set-HybridConfiguration', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392366"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""122"",""MessageTotal"":""162"",""ScriptBlockText"":""OrganizationConnector', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-IntraOrganizationConnector\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-IPAllowListConfig' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${ExternalMailEnabled},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    ${InternalMailEnabled},\n\n    ${Enabled},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-IPAllowListConfig') `\n                            -Arg ('Set-IPAllowListConfig', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-IPAllowListConfig\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-IPAllowListProvider' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${Priority},\n\n    ${Name},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${LookupDomain},\n\n    [Alias('db')]\n    [switch]\n    ${Debu"

















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392367"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""123"",""MessageTotal"":""162"",""ScriptBlockText"":""blePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-IPBlockListProvider\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-IPBlockListProvidersConfig' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${ExternalMailEnabled},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${BypassedRecipients},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    ${InternalMailEnabled},\n\n    ${Enabled},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-IPBlockListProvidersConfig') `\n                            -Arg ('Set-IPBlockListProvidersConfig', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-IPBlockListProvidersConfig\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-IRMConfiguration' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${InternalLicensingEnabled},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [switch]\n    ${RefreshServerCertificates},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${ExternalLicensingEnabled},\n\n    ${LicensingLocation},\n\n    ${EDiscoverySuperUserEnabled},\n\n    ${ClientAccessServerEnabled},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${SearchEnabled},\n\n    ${DomainController},\n\n "




















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392368"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""124"",""MessageTotal"":""162"",""ScriptBlockText"":""itSendReceiveQuota},\n\n    ${CustomAttribute4},\n\n    ${FolderHierarchyDepthWarningQuota},\n\n    ${IsHierarchyReady},\n\n    ${ExtendedPropertiesCountQuota},\n\n    ${AuditOwner},\n\n    ${RoomMailboxPassword},\n\n    ${ClientExtensions},\n\n    ${SCLDeleteThreshold},\n\n    ${AntispamBypassEnabled},\n\n    ${DumpsterMessagesPerFolderCountWarningQuota},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${AcceptMessagesOnlyFrom},\n\n    ${MailboxMessagesPerFolderCountWarningQuota},\n\n    ${ProhibitSendQuota},\n\n    ${CustomAttribute6},\n\n    ${AuditEnabled},\n\n    ${CustomAttribute15},\n\n    [switch]\n    ${RemoveSpokenName},\n\n    ${UserSMimeCertificate},\n\n    ${IsExcludedFromServingHierarchy},\n\n    ${FoldersCountReceiveQuota},\n\n    ${CustomAttribute10},\n\n    ${EmailAddresses},\n\n    ${OldPassword},\n\n    ${LitigationHoldDate},\n\n    [switch]\n    ${IgnoreDefaultScope},\n\n    ${SCLRejectEnabled},\n\n    ${CustomAttribute12},\n\n    ${RemoteRecipientType},\n\n    ${DumpsterMessagesPerFolderCountReceiveQuota},\n\n    ${DomainController},\n\n    ${ExtensionCustomAttribute5},\n\n    ${AcceptMessagesOnlyFromSendersOrMembers},\n\n    ${RejectMessagesFromSendersOrMembers},\n\n    ${ForwardingAddress},\n\n    ${UMDtmfMap},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${ResetPasswordOnNextLogon},\n\n    ${ArchiveStatus},\n\n    ${CustomAttribute5},\n\n    ${SendModerationNotifications},\n\n    ${SimpleDisplayName},\n\n    ${RulesQuota},\n\n    ${SCLQuarantineThreshold},\n\n    ${AuditDelegate},\n\n    ${PrimarySmtpAddress},\n\n    ${ImListMigrationCompleted},\n\n    ${CustomAttribute14},\n\n    ${ArchiveDomain},\n\n    ${UseDatabaseQuotaDefaults},\n\n    ${CustomAttribute7},\n\n    ${RequireSenderAuthenticationEnabled},\n\n    ${Type},\n\n    ${ExternalOofOptions},\n\n    ${AuditLogAgeLimit},\n\n    ${ExtensionCustomAttribute4},\n\n    ${SecondaryDialPlan},\n\n    ${Management},\n\n    ${SCLJunkThreshold},\n\n    ${CustomAttribute9},\n\n    ${ArchiveName},\n\n    ${MessageTracking},\n\n    ${MessageCopyForSendOnBehalfEnabled},\n\n    ${ModerationEnabled},\n\n    ${DefaultPublicFolderMailbox},\n\n    [switch]\n    ${Arbitration},\n\n    ${UMDataStorage},\n\n    ${SCLJunkEnabled},\n\n    ${Office},\n\n    [switch]\n    ${RemovePicture},\n\n    ${Name},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${AcceptMessagesOnlyFromDLMembers},\n\n    ${RecipientLimits},\n\n    ${RetainDeletedItemsFor},\n\n    [switch]\n    ${ApplyMandatoryProperties},\n\n    ${RetainDeletedItemsUntilBackup},\n\n    ${ArchiveDatabase},\n\n    ${LinkedMasterAccount},\n\n    ${ForwardingSmtpAddress},\n\n    ${NewPassword},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DowngradeHighPriorityMessagesEnabled},\n\n    ${Identity},\n\n    ${UserCertificate},\n\n    ${ModeratedBy},\n\n    ${UseDatabaseRetentionDefaults},\n\n    ${DisplayName},\n\n    ${OfflineAddressBook},\n\n    ${LinkedCredential},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${ImmutableId},\n\n    ${MailboxMessagesPerFolderCountReceiveQuota},\n\n    ${ResourceCapacity},\n\n    ${SamAccountName},\n\n    ${EndDateForRetentionHold},\n\n    ${LitigationHoldOwner},\n\n    ${ExtensionCustomAttribute2},\n\n    ${MaxSendSize},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${EmailAddressPolicyEnabled},\n\n    ${RoleAssignmentPolicy},\n\n    ${RejectMessagesFrom},\n\n    ${FolderHierarchyDepthReceiveQuota},\n\n    ${CustomAttribute2},\n\n    ${MessageCopyForSentAsEnabled},\n\n    ${GMGen},\n\n    ${RejectMessages"




















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392369"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""125"",""MessageTotal"":""162"",""ScriptBlockText"":"" $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-MailboxCalendarConfiguration\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-MailboxCalendarFolder' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${DetailLevel},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${SearchableUrlEnabled},\n\n    ${PublishEnabled},\n\n    ${PublishDateRangeTo},\n\n    ${PublishDateRangeFrom},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [switch]\n    ${ResetUrl},\n\n    ${Identity},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MailboxCalendarFolder') `\n                            -Arg ('Set-MailboxCalendarFolder', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-MailboxCalendarFolder\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-MailboxDatabase' `\n{\n    param(\n    \n    ${AutoDagExcludeFromMonitoring},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${RetainDeletedItemsUntilBackup},\n\n    ${IsSuspendedFromProvisioning},\n\n    ${Identity},\n\n   "





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392371"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""127"",""MessageTotal"":""162"",""ScriptBlockText"":""as('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [switch]\n    ${AcceptLargeDataLoss},\n\n    [switch]\n    ${RehomeRequest},\n\n    ${CompletedRequestAgeLimit},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MailboxRestoreRequest') `\n                            -Arg ('Set-MailboxRestoreRequest', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-MailboxRestoreRequest\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-MailboxSearch' `\n{\n    param(\n    \n    [Alias('wa')]\n    ${WarningAction},\n\n    ${IncludeUnsearchableItems},\n\n    ${MessageTypes},\n\n    ${Identity},\n\n    ${StatisticsStartIndex},\n\n    ${ExcludeDuplicateMessages},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${SearchQuery},\n\n    [switch]\n    ${Force},\n\n    ${InPlaceHoldEnabled},\n\n    ${EstimateOnly},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [switch]\n    ${IncludeKeywordStatistics},\n\n    ${ItemHoldPeriod},\n\n    ${LogLevel},\n\n    ${SourceMailboxes},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${StatusMailRecipients},\n\n    ${Name},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    ${EndDate},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${StartDate},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Senders},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${Description},\n\n    ${Recipients},\n\n    ${Language},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${TargetMailbox},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemo"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392370"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""126"",""MessageTotal"":""162"",""ScriptBlockText"":""    $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MailboxFolderPermission') `\n                            -Arg ('Set-MailboxFolderPermission', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-MailboxFolderPermission\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-MailboxImportRequest' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${LargeItemLimit},\n\n    ${Priority},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${BadItemLimit},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${InternalFlags},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${BatchName},\n\n    ${SkipMerging},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [switch]\n    ${AcceptLargeDataLoss},\n\n    [switch]\n    ${RehomeRequest},\n\n    ${CompletedRequestAgeLimit},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MailboxImportRequest') `\n                            -Arg ('Set-MailboxImportRequest', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n "





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392373"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""129"",""MessageTotal"":""162"",""ScriptBlockText"":""rtificate},\n\n    ${CustomAttribute10},\n\n    ${ExtensionCustomAttribute5},\n\n    ${CustomAttribute8},\n\n    ${ArbitrationMailbox},\n\n    ${CustomAttribute5},\n\n    ${UserPrincipalName},\n\n    [switch]\n    ${IgnoreDefaultScope},\n\n    ${ExchangeGuid},\n\n    ${MailTip},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${ModeratedBy},\n\n    ${PrimarySmtpAddress},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${UserSMimeCertificate},\n\n    ${AcceptMessagesOnlyFrom},\n\n    ${AcceptMessagesOnlyFromSendersOrMembers},\n\n    ${MessageBodyFormat},\n\n    ${MaxReceiveSize},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${EmailAddressPolicyEnabled},\n\n    ${CustomAttribute15},\n\n    ${ImmutableId},\n\n    ${WindowsEmailAddress},\n\n    ${RejectMessagesFrom},\n\n    ${Alias},\n\n    ${RejectMessagesFromSendersOrMembers},\n\n    ${DisplayName},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [switch]\n    ${RemovePicture},\n\n    ${AcceptMessagesOnlyFromDLMembers},\n\n    ${CustomAttribute1},\n\n    [switch]\n    ${ForceUpgrade},\n\n    ${UMDtmfMap},\n\n    ${ArchiveGuid},\n\n    ${GrantSendOnBehalfTo},\n\n    ${ExtensionCustomAttribute1},\n\n    ${CustomAttribute14},\n\n    ${BypassModerationFromSendersOrMembers},\n\n    ${RequireSenderAuthenticationEnabled},\n\n    ${CustomAttribute9},\n\n    ${CustomAttribute6},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${ExtensionCustomAttribute4},\n\n    ${SimpleDisplayName},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${UsePreferMessageFormat},\n\n    ${MessageFormat},\n\n    ${HiddenFromAddressListsEnabled},\n\n    ${RecoverableItemsQuota},\n\n    ${ExtensionCustomAttribute2},\n\n    ${CustomAttribute13},\n\n    ${CustomAttribute2},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${UseMapiRichTextFormat},\n\n    ${SendModerationNotifications},\n\n    ${ExternalEmailAddress},\n\n    ${MaxSendSize},\n\n    ${CreateDTMFMap},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${RecipientLimits},\n\n    ${SecondaryAddress},\n\n    ${MailTipTranslations},\n\n    ${CustomAttribute7},\n\n    ${CustomAttribute4},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${RecoverableItemsWarningQuota},\n\n    ${DomainController},\n\n    ${ArchiveName},\n\n    ${Name},\n\n    ${ExtensionCustomAttribute3},\n\n    ${CustomAttribute12},\n\n    ${MacAttachmentFormat},\n\n    ${CustomAttribute3},\n\n    ${CustomAttribute11},\n\n    [switch]\n    ${RemoveSpokenName},\n\n    ${Identity},\n\n    ${SecondaryDialPlan},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MailUser') `\n                            -Arg ('Set-MailUser', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParam"



















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392372"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""128"",""MessageTotal"":""162"",""ScriptBlockText"":""text)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-MailboxSpellingConfiguration\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-MailboxTransportService' `\n{\n    param(\n    \n    ${MailboxDeliveryThrottlingLogEnabled},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${ReceiveProtocolLogMaxDirectorySize},\n\n    ${MailboxSubmissionAgentLogMaxDirectorySize},\n\n    ${Identity},\n\n    ${SendProtocolLogPath},\n\n    ${ConnectivityLogMaxDirectorySize},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${PipelineTracingEnabled},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${MailboxDeliveryAgentLogPath},\n\n    ${ReceiveProtocolLogMaxFileSize},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${MailboxDeliveryThrottlingLogMaxAge},\n\n    ${ConnectivityLogEnabled},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${ReceiveProtocolLogMaxAge},\n\n    ${SendProtocolLogMaxDirectorySize},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${MailboxSubmissionAgentLogMaxFileSize},\n\n    ${MaxConcurrentMailboxSubmissions},\n\n    ${PipelineTracingSenderAddress},\n\n    ${MailboxDeliveryAgentLogMaxDirectorySize},\n\n    ${ConnectivityLogMaxAge},\n\n    ${DomainController},\n\n    ${MailboxSubmissionAgentLogEnabled},\n\n    ${ReceiveProtocolLogPath},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${MailboxDeliveryThrottlingLogPath},\n\n    ${SendProtocolLogMaxFileSize},\n\n    ${MailboxDeliveryThrottlingLogMaxDirectorySize},\n\n    ${SendProtocolLogMaxAge},\n\n    ${MailboxDeliveryConnectorProtocolLoggingLevel},\n\n    ${MailboxSubmissionAgentLogPath},\n\n    ${ConnectivityLogPath},\n\n    ${MailboxDeliveryAgentLogMaxFileSize},\n\n    ${ConnectivityLogMaxFileSize},\n\n    ${MailboxDeliveryAgentLogEnabled},\n\n    ${MailboxDeliveryThrottlingLogMaxFileSize},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${PipelineTracingPath},\n\n    ${MailboxSubmissionAgentLogMaxAge},\n\n    ${ContentConversionTracingEnabled},\n\n    ${MailboxDeliveryAgentLogMaxAge},\n\n    ${MaxConcurrentMailboxDeliveries},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MailboxTransportService') `\n                            -Arg ('Set-MailboxTransportService', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @"























Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392374"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""130"",""MessageTotal"":""162"",""ScriptBlockText"":""${WhatIf},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${ExclusiveRecipientWriteScope},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${CustomConfigWriteScope},\n\n    ${Enabled},\n\n    ${DomainController},\n\n    ${ExclusiveConfigWriteScope},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${RecipientRelativeWriteScope},\n\n    ${RecipientOrganizationalUnitScope},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-ManagementRoleAssignment') `\n                            -Arg ('Set-ManagementRoleAssignment', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-ManagementRoleAssignment\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-ManagementRoleEntry' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${Parameters},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${RemoveParameter},\n\n    [switch]\n    ${AddParameter},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392376"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""132"",""MessageTotal"":""162"",""ScriptBlockText"":""lientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MoveRequest') `\n                            -Arg ('Set-MoveRequest', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-MoveRequest\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-Notification' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${ProcessType},\n\n    ${DomainController},\n\n    ${NotificationEmails},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-Notification') `\n                            -Arg ('Set-Notification', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-Notification\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-OabVirtualDirectory' `\n{\n    param(\n    \n"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392375"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""131"",""MessageTotal"":""162"",""ScriptBlockText"":""{Debug},\n\n    ${AutoRetryCount},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${AllowIncrementalSyncs},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${AllowUnknownColumnsInCsv},\n\n    ${CSVData},\n\n    ${ReportInterval},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MigrationBatch') `\n                            -Arg ('Set-MigrationBatch', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-MigrationBatch\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-MigrationConfig' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${MaxNumberOfBatches},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Features},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${MaxConcurrentMigrations},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Sessi"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392378"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""134"",""MessageTotal"":""162"",""ScriptBlockText"":""blicComputers},\n\n    ${WebReadyDocumentViewingOnPrivateComputersEnabled},\n\n    ${WacViewingOnPrivateComputersEnabled},\n\n    ${TextMessagingEnabled},\n\n    ${SearchFoldersEnabled},\n\n    ${WebReadyMimeTypes},\n\n    ${CalendarEnabled},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${SMimeEnabled},\n\n    ${UNCAccessOnPublicComputersEnabled},\n\n    ${IRMEnabled},\n\n    ${DirectFileAccessOnPublicComputersEnabled},\n\n    ${SetPhotoURL},\n\n    ${WSSAccessOnPublicComputersEnabled},\n\n    ${SignaturesEnabled},\n\n    ${ForceWebReadyDocumentViewingFirstOnPrivateComputers},\n\n    ${WacOMEXEnabled},\n\n    ${WacExternalServicesEnabled},\n\n    ${JunkEmailEnabled},\n\n    ${SilverlightEnabled},\n\n    ${InstantMessagingType},\n\n    ${ActiveSyncIntegrationEnabled},\n\n    ${WebReadyDocumentViewingSupportedFileTypes},\n\n    ${DefaultTheme},\n\n    ${SetPhotoEnabled},\n\n    ${AllowCopyContactsToDeviceAddressBook},\n\n    ${UseISO885915},\n\n    ${OutboundCharset},\n\n    ${UNCAccessOnPrivateComputersEnabled},\n\n    ${ReportJunkEmailEnabled},\n\n    ${ForceWacViewingFirstOnPrivateComputers},\n\n    ${RecoverDeletedItemsEnabled},\n\n    ${ForceWebReadyDocumentViewingFirstOnPublicComputers},\n\n    ${GlobalAddressListEnabled},\n\n    ${OrganizationEnabled},\n\n    ${DelegateAccessEnabled},\n\n    ${ActionForUnknownFileAndMIMETypes},\n\n    ${PublicFoldersEnabled},\n\n    ${ForceSaveAttachmentFilteringEnabled},\n\n    ${LogonAndErrorLanguage},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${WSSAccessOnPrivateComputersEnabled},\n\n    ${AllAddressListsEnabled},\n\n    ${NotesEnabled},\n\n    ${PremiumClientEnabled},\n\n    ${BlockedMimeTypes},\n\n    ${UMIntegrationEnabled},\n\n    ${ThemeSelectionEnabled},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [switch]\n    ${IsDefault},\n\n    ${DomainController},\n\n    ${AllowOfflineOn},\n\n    ${AllowedFileTypes},\n\n    ${RulesEnabled},\n\n    ${Name},\n\n    ${InstantMessagingEnabled},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${OWALightEnabled},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${RemindersAndNotificationsEnabled},\n\n    ${UseGB18030},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${SkipCreateUnifiedGroupCustomSharepointClassification},\n\n    ${PhoneticSupportEnabled},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-OwaMailboxPolicy') `\n                            -Arg ('Set-OwaMailboxPolicy', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInv"























Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392377"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""133"",""MessageTotal"":""162"",""ScriptBlockText"":"" @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-OrganizationConfig') `\n                            -Arg ('Set-OrganizationConfig', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-OrganizationConfig\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-OrganizationRelationship' `\n{\n    param(\n    \n    ${TargetApplicationUri},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${MailTipsAccessLevel},\n\n    ${TargetAutodiscoverEpr},\n\n    ${Identity},\n\n    ${Enabled},\n\n    ${Name},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [switch]\n    ${Force},\n\n    ${DeliveryReportEnabled},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${OrganizationContact},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${ArchiveAccessEnabled},\n\n    ${FreeBusyAccessEnabled},\n\n    ${MailTipsAccessScope},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${TargetOwaURL},\n\n    ${DomainController},\n\n    ${MailTipsAccessEnabled},\n\n    ${PhotosEnabled},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${MailboxMoveEnabled},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${TargetSharingEpr},\n\n    ${FreeBusyAccessLevel},\n\n    ${DomainNames},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${FreeBusyAccessScope},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-OrganizationRelationship') `\n                            -Arg ('Set-OrganizationRelationship', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    P"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392379"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571735"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""135"",""MessageTotal"":""162"",""ScriptBlockText"":""nspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-PendingFederatedDomain' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${PendingAccountNamespace},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    ${PendingDomains},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-PendingFederatedDomain') `\n                            -Arg ('Set-PendingFederatedDomain', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-PendingFederatedDomain\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-PolicyTipConfig' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Value},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters ="





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392382"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""138"",""MessageTotal"":""162"",""ScriptBlockText"":"" param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-ResubmitRequest\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-RetentionPolicy' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [switch]\n    ${Force},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${Name},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${RetentionPolicyTagLinks},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${RetentionId},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${DomainController},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-RetentionPolicy') `\n                            -Arg ('Set-RetentionPolicy', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-RetentionPolicy\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-RetentionPolicyTag' `\n{\n    param(\n    \n    [Alias('wa')]\n    ${WarningAction},\n\n    ${MessageClass},\n\n    ${Identity},\n\n    ${JournalingEnabled},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${OptionalInMailbox},\n\n    ${Mailbox},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [switch]\n    ${Force},\n\n    ${LocalizedRetentionPolicyTagName},\n\n    ${LegacyManagedFolder},\n\n    ${AgeL"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392381"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""137"",""MessageTotal"":""162"",""ScriptBlockText"":"" ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-RecipientFilterConfig') `\n                            -Arg ('Set-RecipientFilterConfig', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-RecipientFilterConfig\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-RemoteDomain' `\n{\n    param(\n    \n    [Alias('wa')]\n    ${WarningAction},\n\n    ${AutoReplyEnabled},\n\n    ${Identity},\n\n    ${DomainController},\n\n    ${TNEFEnabled},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${DeliveryReportEnabled},\n\n    ${TrustedMailOutboundEnabled},\n\n    ${RequiredCharsetCoverage},\n\n    ${MeetingForwardNotificationEnabled},\n\n    ${ContentType},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${ByteEncoderTypeFor7BitCharsets},\n\n    ${AutoForwardEnabled},\n\n    ${TrustedMailInboundEnabled},\n\n    ${LineWrapSize},\n\n    ${CharacterSet},\n\n    ${PreferredInternetCodePageForShiftJis},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${NonMimeCharacterSet},\n\n    ${NDREnabled},\n\n    ${TargetDeliveryDomain},\n\n    ${MessageCountThreshold},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${DisplaySenderName},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${AllowedOOFType},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${NDRDiagnosticInfoEnabled},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${IsInternal},\n\n    ${Name},\n\n    ${UseSimpleDisplayName},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $Fals"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392383"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""139"",""MessageTotal"":""162"",""ScriptBlockText"":""pablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-RpcClientAccess\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-SearchDocumentFormat' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${Server},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${Enabled},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-SearchDocumentFormat') `\n                            -Arg ('Set-SearchDocumentFormat', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-SearchDocumentFormat\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-SendConnector' `\n{\n    param(\n    \n    [Alias('wa')]\n    ${WarningAction},\n\n    ${ForceHELO},\n\n    ${IgnoreSTARTTLS},\n\n    ${CloudServicesMailEnabled},\n\n    ${TlsDomain},\n\n    ${Identity},\n\n    ${IsScopedConnector},\n\n    ${Enabled},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [switch]\n    ${Force},\n\n    ${UseExternalDNSServersEnabled},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${MaxMessageSize},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${AddressSpaces},\n\n    ${RequireOorg"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392384"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""140"",""MessageTotal"":""162"",""ScriptBlockText"":""               -Session (Get-PSImplicitRemotingSession -CommandName 'Set-SenderReputationConfig') `\n                            -Arg ('Set-SenderReputationConfig', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-SenderReputationConfig\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-ServerComponentState' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${RemoteOnly},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${TimeoutInSeconds},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [switch]\n    ${LocalOnly},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${State},\n\n    ${DomainController},\n\n    ${Requester},\n\n    ${Component},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-ServerComponentState') `\n                            -Arg ('Set-ServerComponentState', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-ServerComponentState\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-ServerMonitor' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392385"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""141"",""MessageTotal"":""162"",""ScriptBlockText"":""ry {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-SiteMailbox\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-SiteMailboxProvisioningPolicy' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${IssueWarningQuota},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${Name},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${DomainController},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    ${ProhibitSendReceiveQuota},\n\n    ${AliasPrefix},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${MaxReceiveSize},\n\n    ${DefaultAliasPrefixEnabled},\n\n    [switch]\n    ${IsDefault},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-SiteMailboxProvisioningPolicy') `\n                            -Arg ('Set-SiteMailboxProvisioningPolicy', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-SiteMailboxProvisioningPolicy\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-SmimeConfig' `\n{\n    param(\n    \n    ${SMIMECertificateIssuingCA},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${OWACopyRecipientHeaders},\n\n    ${Identity},\n\n    ${OWAIncludeSMIMECapabilitiesInMessage},\n\n    ${OWAEncryptionAlgorithms},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${OWAAlwaysSign},\n\n    ${OWAUseSecondaryProxiesWhenFindingCertificates},\n\n    ${OWAAlwaysEncrypt},\n\n    ${OWACheckCRLOnSend},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${OWADLExpansionTimeout},\n\n    ${OWAUseKeyIdentifier},\n\n    ${OWAOnlyUseSmartCard},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${OWAIncludeCertifi"



















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392380"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""136"",""MessageTotal"":""162"",""ScriptBlockText"":""    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-PublicFolder\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-PublicFolderMailboxMigrationRequest' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${LargeItemLimit},\n\n    ${Priority},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${BadItemLimit},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${InternalFlags},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${SkipMerging},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [switch]\n    ${AcceptLargeDataLoss},\n\n    [switch]\n    ${RehomeRequest},\n\n    ${CompletedRequestAgeLimit},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-PublicFolderMailboxMigrationRequest') `\n                            -Arg ('Set-PublicFolderMailboxMigrationRequest', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-PublicFolderMailboxMigrationRequest\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-PublicFolderMigrationRequest' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${LargeItemLimit},\n\n    ${Priority},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${BadItemLimit},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${InternalFlags},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${BatchName},\n\n    ${SkipMerging},\n\n    [Alias('cf')]\n    [switch]\n    ${C"




















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392386"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""142"",""MessageTotal"":""162"",""ScriptBlockText"":""pelineVariable},\n\n    ${PopRechargeRate},\n\n    ${DomainController},\n\n    ${PushNotificationRechargeRate},\n\n    ${ImapMaxBurst},\n\n    ${OutlookServiceMaxSocketConnectionsPerDevice},\n\n    ${PowerShellRechargeRate},\n\n    ${ComplianceMaxExpansionDGRecipients},\n\n    ${PushNotificationCutoffBalance},\n\n    ${OwaVoiceRechargeRate},\n\n    ${AnonymousMaxConcurrency},\n\n    ${PowerShellMaxRunspaces},\n\n    ${PowerShellMaxCmdletsTimePeriod},\n\n    ${CpaMaxConcurrency},\n\n    ${EncryptionRecipientMaxConcurrency},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${PowerShellMaxBurst},\n\n    ${OwaCutoffBalance},\n\n    ${DiscoveryMaxConcurrency},\n\n    ${PopMaxBurst},\n\n    ${EncryptionSenderRechargeRate},\n\n    ${OutlookServiceMaxSubscriptions},\n\n    ${OutlookServiceRechargeRate},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${CpaMaxBurst},\n\n    ${ForwardeeLimit},\n\n    ${OutlookServiceMaxSocketConnectionsPerUser},\n\n    ${PowerShellMaxCmdletQueueDepth},\n\n    ${OwaMaxBurst},\n\n    ${EasMaxBurst},\n\n    ${EncryptionRecipientMaxBurst},\n\n    ${PowerShellMaxDestructiveCmdlets},\n\n    ${Identity},\n\n    ${EasMaxDeviceDeletesPerMonth},\n\n    ${OwaVoiceMaxConcurrency},\n\n    ${OwaVoiceCutoffBalance},\n\n    ${EwsMaxConcurrency},\n\n    ${AnonymousMaxBurst},\n\n    ${AnonymousRechargeRate},\n\n    ${DiscoveryMaxPreviewSearchMailboxes},\n\n    ${OutlookServiceMaxConcurrency},\n\n    ${RcaRechargeRate},\n\n    ${PswsMaxRequest},\n\n    ${EncryptionSenderCutoffBalance},\n\n    ${PowerShellMaxConcurrency},\n\n    ${OutlookServiceCutoffBalance},\n\n    ${PushNotificationSamplingPeriodPerDevice},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${DiscoveryMaxStatsSearchMailboxes},\n\n    ${ImapRechargeRate},\n\n    ${DiscoverySearchTimeoutPeriod},\n\n    ${ImapCutoffBalance},\n\n    ${PowerShellMaxTenantRunspaces},\n\n    [switch]\n    ${Force},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${Name},\n\n    ${EasMaxConcurrency},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${CpaCutoffBalance},\n\n    ${PowerShellCutoffBalance},\n\n    ${EasRechargeRate},\n\n    ${MessageRateLimit},\n\n    ${OwaRechargeRate},\n\n    ${ComplianceMaxExpansionNestedDGs},\n\n    ${PowerShellMaxOperations},\n\n    ${EwsMaxSubscriptions},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-ThrottlingPolicy') `\n                            -Arg ('Set-ThrottlingPolicy', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n  "










































Raw Event

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392387"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""143"",""MessageTotal"":""162"",""ScriptBlockText"":""\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-TransportConfig\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-TransportRule' `\n{\n    param(\n    \n    ${ActivationDate},\n\n    ${AddToRecipients},\n\n    ${ApplyHtmlDisclaimerFallbackAction},\n\n    ${ExceptIfRecipientADAttributeContainsWords},\n\n    ${RecipientADAttributeMatchesPatterns},\n\n    ${AttachmentSizeOver},\n\n    ${ExceptIfSenderADAttributeContainsWords},\n\n    ${SetSCL},\n\n    ${AnyOfToHeaderMemberOf},\n\n    ${Disconnect},\n\n    ${ExceptIfSentToMemberOf},\n\n    ${ExceptIfAnyOfCcHeader},\n\n    ${ExceptIfAttachmentMatchesPatterns},\n\n    ${RecipientDomainIs},\n\n    ${ManagerForEvaluatedUser},\n\n    ${SmtpRejectMessageRejectStatusCode},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${ExceptIfHeaderMatchesPatterns},\n\n    ${ExceptIfFromScope},\n\n    ${ADComparisonAttribute},\n\n    ${ExceptIfHeaderContainsWords},\n\n    ${HeaderMatchesPatterns},\n\n    ${ExceptIfAttachmentIsPasswordProtected},\n\n    ${DeleteMessage},\n\n    ${HasSenderOverride},\n\n    ${ExceptIfSubjectOrBodyMatchesPatterns},\n\n    ${ExceptIfHasClassification},\n\n    ${Quarantine},\n\n    ${ExceptIfAnyOfRecipientAddressMatchesPatterns},\n\n    ${ExceptIfContentCharacterSetContainsWords},\n\n    ${BlindCopyTo},\n\n    ${ApplyHtmlDisclaimerLocation},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${ExceptIfMessageTypeMatches},\n\n    ${SenderIpRanges},\n\n    ${ExceptIfMessageContainsDataClassifications},\n\n    ${ModerateMessageByUser},\n\n    ${HasNoClassification},\n\n    ${HeaderContainsMessageHeader},\n\n    ${RemoveHeader},\n\n    ${HasClassification},\n\n    ${MessageContainsDataClassifications},\n\n    ${ExceptIfFromMemberOf},\n\n    ${RuleSubType},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${SentToScope},\n\n    ${AnyOfToCcHeaderMemberOf},\n\n    ${From},\n\n    ${ExceptIfAnyOfRecipientAddressContainsWords},\n\n    ${ExceptIfWithImportance},\n\n    ${ContentCharacterSetContainsWords},\n\n    ${SubjectContainsWords},\n\n    ${RejectMessageEnhancedStatusCode},\n\n    ${SenderADAttributeMatchesPatterns},\n\n    ${ExceptIfSenderADAttributeMatchesPatterns},\n\n    ${IncidentReportContent},\n\n    ${FromMemberOf},\n\n    ${AttachmentContainsWords},\n\n    ${ExceptIfSCLOver},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${ExceptIfBetweenMemberOf1},\n\n    ${NotifySender},\n\n    ${DomainController},\n\n    ${ExceptIfAttachmentNameMatchesPatterns},\n\n    ${ExceptIfSenderManagementRelationship},\n\n    ${SetAuditSeverity},\n\n    ${ExceptIfAnyOfToHeader},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${RouteMessageOutboundRequireTls},\n\n    ${WithImportance},\n\n    ${RuleErrorAction},\n\n    ${FromScope},\n\n    ${AttachmentNameMatchesPatterns},\n\n    ${SentTo},\n\n    ${ExceptIfFromAddressMatchesPatterns},\n\n    ${AnyOfCcHeaderMemberOf},\n\n    ${ExceptIfAttachmentSizeOver},\n\n    ${ExceptIfManagerForEvaluatedUser},\n\n    ${ExceptIfFromAddressContainsWords},\n\n    ${AttachmentHasExecutableContent},\n\n    ${SubjectMatchesPatterns},\n\n    ${ExceptIfRecipientDomainIs},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${ExceptIfSenderDomainIs},\n\n    ${SenderManagementRelationship},\n\n    ${ExceptIfBetweenMemberOf2},\n\n    ${RedirectMessageTo},\n\n    ${A"





















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392389"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""145"",""MessageTotal"":""162"",""ScriptBlockText"":""maticReplies},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-UMCallAnsweringRule') `\n                            -Arg ('Set-UMCallAnsweringRule', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-UMCallAnsweringRule\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-UMCallRouterSettings' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${MaxCallsAllowed},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${IPAddressFamily},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Server},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${UMStartupMode},\n\n    ${IPAddressFamilyConfigurable},\n\n    ${SipTlsListeningPort},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${SipTcpListeningPort},\n\n    ${DialPlans},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-UMCallRouterSettings') `\n                            -Arg ('Set-UMCallRouterSettings', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @bou"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392391"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""147"",""MessageTotal"":""162"",""ScriptBlockText"":"" [Alias('ev')]\n    ${ErrorVariable},\n\n    ${PhoneticDisplayName},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${Fax},\n\n    ${PostOfficeBox},\n\n    ${LastName},\n\n    ${SamAccountName},\n\n    ${Pager},\n\n    [switch]\n    ${IgnoreDefaultScope},\n\n    ${LinkedCredential},\n\n    ${ResetPasswordOnNextLogon},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${SeniorityIndex},\n\n    ${City},\n\n    ${TelephoneAssistant},\n\n    ${AllowUMCallsFromNonUsers},\n\n    ${Title},\n\n    ${MobilePhone},\n\n    ${AssistantName},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${CreateDTMFMap},\n\n    [switch]\n    ${Arbitration},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${StateOrProvince},\n\n    ${Initials},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${WebPage},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${DomainController},\n\n    ${LinkedDomainController},\n\n    ${LinkedMasterAccount},\n\n    ${Manager},\n\n    ${HomePhone},\n\n    ${OtherFax},\n\n    ${SimpleDisplayName},\n\n    ${UMCallingLineIds},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${Department},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${OtherHomePhone},\n\n    ${FirstName},\n\n    ${UMDtmfMap},\n\n    [switch]\n    ${PublicFolder},\n\n    ${WindowsEmailAddress},\n\n    ${Notes},\n\n    ${RemotePowerShellEnabled},\n\n    ${Name},\n\n    ${GeoCoordinates},\n\n    ${StreetAddress},\n\n    ${PostalCode},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-User') `\n                            -Arg ('Set-User', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-User\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-UserPhoto' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${PictureData},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [switch]\n    ${Cancel},\n\n    ${Pic"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392388"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""144"",""MessageTotal"":""162"",""ScriptBlockText"":""ipt:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-TransportServer') `\n                            -Arg ('Set-TransportServer', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-TransportServer\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-TransportService' `\n{\n    param(\n    \n    ${TransportSyncHubHealthLogFilePath},\n\n    ${MaxConnectionRatePerMinute},\n\n    ${MessageTrackingLogEnabled},\n\n    ${ResourceLogEnabled},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${IntraOrgConnectorProtocolLoggingLevel},\n\n    ${AgentLogEnabled},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${QueueLogMaxAge},\n\n    ${TransportSyncAccountsPoisonAccountThreshold},\n\n    ${TransportSyncLogMaxDirectorySize},\n\n    ${AntispamAgentsEnabled},\n\n    ${ReceiveProtocolLogMaxAge},\n\n    ${ResourceLogMaxFileSize},\n\n    ${PickupDirectoryMaxMessagesPerMinute},\n\n    ${ActiveUserStatisticsLogMaxDirectorySize},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${ConnectivityLogEnabled},\n\n    ${RoutingTableLogPath},\n\n    ${OutboundConnectionFailureRetryInterval},\n\n    ${TransportSyncLogLoggingLevel},\n\n    ${SendProtocolLogMaxAge},\n\n    ${PipelineTracingEnabled},\n\n    ${TransportSyncPopEnabled},\n\n    ${TransportSyncMaxDownloadSizePerItem},\n\n    ${RootDropDirectoryPath},\n\n    ${SendProtocolLogMaxDirectorySize},\n\n    ${MessageTrackingLogMaxFileSize},\n\n    ${ResourceLogMaxAge},\n\n    ${QueueLogPath},\n\n    ${ActiveUserStatisticsLogPath},\n\n    ${TransportSyncLogMaxFileSize},\n\n    ${TransportSyncHubHealthLogMaxFileSize},\n\n    ${WlmLogMaxAge},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${PickupDirectoryPath},\n\n    ${TransportSyncEnabled},\n\n    ${TransportSyncExchangeEnabled},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${PipelineTracingPath},\n\n    ${RecipientValidationCacheEnabled},\n\n    ${TransportSyncAccountsPoisonDetectionEnabled},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${PickupDirectoryMaxHeaderSize},\n\n    ${InternalDNSServers},\n\n    ${MaxPerDomainOutboundConnections},\n\n    ${InternalDNSProtocolOption},\n\n    ${ExternalDNSServers},\n\n    ${InternalDNSAdapterEnabled},\n\n    ${Identity},\n\n    ${TransportMaintenanceLogMaxDirectorySize},\n\n    ${QueueMaxIdleTime},\n\n    ${TransportMaintenanceLogMaxFileSize},\n\n    ${TransportSyncHubHealthLogEnabled},\n\n    ${ServerStatisticsLogMaxAge},\n\n    ${WlmLogMaxFileSize},\n\n    ${PipelineTracingSenderAddress},\n\n    ${MessageExpirationTimeout},\n\n    ${TransportSyncLogMaxAge},\n\n    ${PoisonMessageDetectionEnabled},\n\n    ${ServerStatisticsLogPath},\n\n    ${TransportSyncAccountsSuccessivePoisonItemThreshold},\n\n    ${C"























Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392392"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""148"",""MessageTotal"":""162"",""ScriptBlockText"":""($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Start-DatabaseAvailabilityGroup\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Start-EdgeSynchronization' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [switch]\n    ${ForceUpdateCookie},\n\n    [switch]\n    ${ForceFullSync},\n\n    ${TargetServer},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Server},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Start-EdgeSynchronization') `\n                            -Arg ('Start-EdgeSynchronization', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Start-EdgeSynchronization\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Start-MailboxSearch' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${StatisticsStart"

















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392393"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""149"",""MessageTotal"":""162"",""ScriptBlockText"":""iable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${MailboxServer},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${ActiveDirectorySite},\n\n    [switch]\n    ${ConfigurationOnly},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Stop-DatabaseAvailabilityGroup') `\n                            -Arg ('Stop-DatabaseAvailabilityGroup', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Stop-DatabaseAvailabilityGroup\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Stop-MailboxSearch' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                 "




















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392394"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""150"",""MessageTotal"":""162"",""ScriptBlockText"":""deParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Suspend-MailboxDatabaseCopy') `\n                            -Arg ('Suspend-MailboxDatabaseCopy', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Suspend-MailboxDatabaseCopy\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Suspend-MailboxExportRequest' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${SuspendComment},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Suspend-MailboxExportRequest') `\n                            -Arg ('Suspend-MailboxExportRequest', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Suspend-MailboxExportRequest\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\"

















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392390"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""146"",""MessageTotal"":""162"",""ScriptBlockText"":""ommandName 'Set-UMMailbox') `\n                            -Arg ('Set-UMMailbox', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-UMMailbox\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-UMMailboxConfiguration' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${FolderToReadEmailsFrom},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${SentVoiceMailPreviewEnabled},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${ReadOldestUnreadVoiceMessagesFirst},\n\n    ${Identity},\n\n    ${ReceivedVoiceMailPreviewEnabled},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DefaultPlayOnPhoneNumber},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${Greeting},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-UMMailboxConfiguration') `\n                            -Arg ('Set-UMMailboxConfiguration', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Set-UMMailboxConfiguration\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Set-UMMailboxPIN' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Ve"






















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392395"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""151"",""MessageTotal"":""162"",""ScriptBlockText"":""   try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Suspend-MoveRequest\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Suspend-PublicFolderMigrationRequest' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${SuspendComment},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Suspend-PublicFolderMigrationRequest') `\n                            -Arg ('Suspend-PublicFolderMigrationRequest', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Suspend-PublicFolderMigrationRequest\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Suspend-PublicFolderMoveRequest' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${SuspendComment},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArg"

















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392398"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""154"",""MessageTotal"":""162"",""ScriptBlockText"":""dParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Test-IRMConfiguration') `\n                            -Arg ('Test-IRMConfiguration', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Test-IRMConfiguration\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Test-Mailflow' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    ${ExecutionTimeout},\n\n    [switch]\n    ${AutoDiscoverTargetMailboxServer},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    ${CrossPremises},\n\n    ${TargetMailboxServer},\n\n    ${TargetEmailAddressDisplayName},\n\n    ${CrossPremisesExpirationTimeout},\n\n    ${ActiveDirectoryTimeout},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('SourceMailboxServer')]\n    ${Identity},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${MonitoringContext},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    ${TargetEmailAddress},\n\n    ${TargetDatabase},\n\n    ${ErrorLatency},\n\n    ${CrossPremisesPendingErrorCount},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Test-Mailflow') `\n                            -Arg ('Test-Mailflow', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $nam"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392397"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""153"",""MessageTotal"":""162"",""ScriptBlockText"":""   ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${UserIdentity},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${MonitoringContext},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Test-FederationTrust') `\n                            -Arg ('Test-FederationTrust', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Test-FederationTrust\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Test-FederationTrustCertificate' `\n{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Test-FederationTrustCertificate') "


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392396"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""152"",""MessageTotal"":""162"",""ScriptBlockText"":""{WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${ServerName},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [switch]\n    ${MonitoringContext},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${WatermarkBehindWarningThreholdInMinutes},\n\n    [switch]\n    ${ResolveProblems},\n\n    [switch]\n    ${IncludeCrashDump},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Test-AssistantHealth') `\n                            -Arg ('Test-AssistantHealth', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Test-AssistantHealth\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Test-CalendarConnectivity' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Timeout},\n\n    [switch]\n    ${TrustAnySSLCertificate},\n\n    [switch]\n    ${ResetTestAccountCredentials},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [switch]\n    ${LightMode},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${MailboxServer},\n\n    [Alias('Identity')]\n    ${ClientAccessServer},\n\n    ${VirtualDirectoryName},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [switch]\n    ${MonitoringContext},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    ${TestType},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n         "





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392399"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""155"",""MessageTotal"":""162"",""ScriptBlockText"":""           $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Test-MRSHealth') `\n                            -Arg ('Test-MRSHealth', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Test-MRSHealth\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Test-OAuthConnectivity' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [switch]\n    ${AppOnly},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [switch]\n    ${UseCachedToken},\n\n    ${Mailbox},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [switch]\n    ${ReloadConfig},\n\n    ${Service},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${TargetUri},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Test-OAuthConnectivity') `\n                            -Arg ('Test-OAuthConnectivity', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTarget"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392400"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""156"",""MessageTotal"":""162"",""ScriptBlockText"":""                 -Arg ('Test-OwaConnectivity', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Test-OwaConnectivity\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Test-PopConnectivity' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    ${PerConnectionTimeout},\n\n    ${Timeout},\n\n    [switch]\n    ${TrustAnySSLCertificate},\n\n    [switch]\n    ${ResetTestAccountCredentials},\n\n    ${ConnectionType},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [switch]\n    ${LightMode},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${MailboxServer},\n\n    [Alias('Identity')]\n    ${ClientAccessServer},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [switch]\n    ${MonitoringContext},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${MailboxCredential},\n\n    ${DomainController},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${PortClientAccessServer},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Test-PopConnectivity') `\n                            -Arg ('Test-PopConnectivity', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Test-PopConnectivity\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Test-PowerShellC"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392401"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""157"",""MessageTotal"":""162"",""ScriptBlockText"":"" { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Test-ServiceHealth\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Test-SiteMailbox' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [switch]\n    ${UseAppTokenOnly},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    ${RequestorIdentity},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${BypassOwnerCheck},\n\n    ${SharePointUrl},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Test-SiteMailbox') `\n                            -Arg ('Test-SiteMailbox', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Test-SiteMailbox\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Test-SmtpConnectivity' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Ide"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392403"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""159"",""MessageTotal"":""162"",""ScriptBlockText"":""witch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Update-GlobalAddressList') `\n                            -Arg ('Update-GlobalAddressList', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Update-GlobalAddressList\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Update-HybridConfiguration' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${SuppressOAuthWarning},\n\n    [switch]\n    ${ForceUpgrade},\n\n    ${OnPremisesCredentials},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${TenantCredentials},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Update-HybridConfiguration') `\n                            -Arg ('Update-HybridConfiguration', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\"





















Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392402"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""158"",""MessageTotal"":""162"",""ScriptBlockText"":""ngInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Uninstall-TransportAgent\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Update-AddressList' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${DomainController},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Update-AddressList') `\n                            -Arg ('Update-AddressList', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Update-AddressList\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Update-DatabaseSchema' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    ${MinorVersion},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    ${MajorVersion},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterNam"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392404"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571736"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""160"",""MessageTotal"":""162"",""ScriptBlockText"":""nalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Update-Recipient') `\n                            -Arg ('Update-Recipient', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Update-Recipient\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n& $script:SetItem 'function:script:Update-RoleGroupMember' `\n{\n    param(\n    \n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    [Alias('wi')]\n    [switch]\n    ${WhatIf},\n\n    ${Members},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    [Alias('cf')]\n    [switch]\n    ${Confirm},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    ${Identity},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${BypassSecurityGroupManagerCheck},\n\n    ${DomainController},\n\n    [Alias('wv')]\n    ${WarningVariable},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Update-RoleGroupMember') `\n                            -Arg ('Update-RoleGroupMember', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n  "



















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393219"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714572650"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""4e7221bc-3854-4e0c-855a-9b036b377c68"",""Path"":""""}}"


Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393220"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714572654"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function prompt \n{ \n\t$cwd = (get-location).Path\n\t$host.UI.RawUI.WindowTitle = ($CommonConnectFunctions_LocalizedStrings.res_0004 -f $global:connectedFqdn)\n\t$host.UI.Write(\""Yellow\"", $host.UI.RawUI.BackGroundColor, \""[PS]\"")\n\t\"" $cwd>\"" \n}"",""ScriptBlockId"":""01526da8-4df9-4637-a1c9-2f9bdd75621b"",""Path"":""C:\\Program Files\\Microsoft\\Exchange Server\\V15\\bin\\CommonConnectFunctions.ps1""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393223"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714713286"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""$ip = \""10.56.26.20\"" #10.56.238.72\n$recCons = Get-ReceiveConnector | ? {$_.Identity -like \""*Anonym*\""} \nforeach ($recCon in $recCons) {\n    $recCon\n    $recCon.RemoteIPRanges | ? {$_.Expression -like $ip} \n}\n"",""ScriptBlockId"":""717be391-361d-476b-95d5-47b6dd1b2fb2"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392405"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571737"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""161"",""MessageTotal"":""162"",""ScriptBlockText"":""      $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Write-AdminAuditLog\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}\n        \n##############################################################################\n\n& $script:ExportModuleMember -Function @('Add-ADPermission', 'Add-AvailabilityAddressSpace', 'Add-ContentFilterPhrase', 'Add-DatabaseAvailabilityGroupServer', 'Add-DistributionGroupMember', 'Add-FederatedDomain', 'Add-GlobalMonitoringOverride', 'Add-IPAllowListEntry', 'Add-IPAllowListProvider', 'Add-IPBlockListEntry', 'Add-IPBlockListProvider', 'Add-MailboxDatabaseCopy', 'Add-MailboxFolderPermission', 'Add-MailboxPermission', 'Add-ManagementRoleEntry', 'Add-PublicFolderClientPermission', 'Add-ResubmitRequest', 'Add-RoleGroupMember', 'Add-ServerMonitoringOverride', 'Clear-ActiveSyncDevice', 'Clear-MobileDevice', 'Clear-TextMessagingAccount', 'Compare-TextMessagingVerificationCode', 'Complete-MigrationBatch', 'Connect-Mailbox', 'Disable-AddressListPaging', 'Disable-App', 'Disable-CmdletExtensionAgent', 'Disable-DistributionGroup', 'Disable-InboxRule', 'Disable-JournalRule', 'Disable-Mailbox', 'Disable-MailboxQuarantine', 'Disable-MailContact', 'Disable-MailPublicFolder', 'Disable-MailUser', 'Disable-MalwareFilterRule', 'Disable-OutlookProtectionRule', 'Disable-PushNotificationProxy', 'Disable-RemoteMailbox', 'Disable-ServiceEmailChannel', 'Disable-TransportAgent', 'Disable-TransportRule', 'Disable-UMAutoAttendant', 'Disable-UMCallAnsweringRule', 'Disable-UMIPGateway', 'Disable-UMMailbox', 'Disable-UMService', 'Dismount-Database', 'Dump-ProvisioningCache', 'Enable-AddressListPaging', 'Enable-AntispamUpdates', 'Enable-App', 'Enable-CmdletExtensionAgent', 'Enable-DistributionGroup', 'Enable-ExchangeCertificate', 'Enable-InboxRule', 'Enable-JournalRule', 'Enable-Mailbox', 'Enable-MailboxQuarantine', 'Enable-MailContact', 'Enable-MailPublicFolder', 'Enable-MailUser', 'Enable-MalwareFilterRule', 'Enable-OutlookProtectionRule', 'Enable-PushNotificationProxy', 'Enable-RemoteMailbox', 'Enable-ServiceEmailChannel', 'Enable-TransportAgent', 'Enable-TransportRule', 'Enable-UMAutoAttendant', 'Enable-UMCallAnsweringRule', 'Enable-UMIPGateway', 'Enable-UMMailbox', 'Enable-UMService', 'Export-ActiveSyncLog', 'Export-AutoDiscoverConfig', 'Export-DlpPolicyCollection', 'Export-ExchangeCertificate', 'Export-JournalRuleCollection', 'Export-MailboxDiagnosticLogs', 'Export-Message', 'Export-MigrationReport', 'Export-RecipientDataProperty', 'Export-TransportRuleCollection', 'Export-UMCallDataRecord', 'Export-UMPrompt', 'Get-AcceptedDomain', 'Get-ActiveSyncDevice', 'Get-ActiveSyncDeviceAccessRule', 'Get-ActiveSyncDeviceAutoblockThreshold', 'Get-ActiveSyncDeviceClass', 'Get-ActiveSyncDeviceStatistics', 'Get-ActiveSyncMailboxPolicy', 'Get-ActiveSyncOrganizationSettings', 'Get-ActiveSyncVirtualDirectory', 'Get-AddressBookPolicy', 'Get-AddressList', 'Get-AdminAuditLogConfig', 'Get-ADPermission', 'Get-ADServerSettings', 'Get-ADSite', 'Get-AdSiteLink', 'Get-AgentLog', 'Get-App', 'Get-AuditLogSearch', 'Get-AuthConfig', 'Get-AuthRedirect', 'Get-AuthServer', 'Get-AutodiscoverVirtualDirectory', 'Get-AvailabilityAddressSpace', 'Get-AvailabilityConfig', 'Get-CalendarDiagnosticAnal"

































Raw Event

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393224"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714713305"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""{\n    param(\n    \n    [Alias('wv')]\n    ${WarningVariable},\n\n    [Alias('ob')]\n    ${OutBuffer},\n\n    [Alias('pv')]\n    ${PipelineVariable},\n\n    ${Server},\n\n    [Alias('vb')]\n    [switch]\n    ${Verbose},\n\n    [Alias('db')]\n    [switch]\n    ${Debug},\n\n    [Alias('ov')]\n    ${OutVariable},\n\n    ${Identity},\n\n    ${DomainController},\n\n    [Alias('ev')]\n    ${ErrorVariable},\n\n    [Alias('ea')]\n    ${ErrorAction},\n\n    [Alias('wa')]\n    ${WarningAction},\n\n    [switch]\n    ${AsJob})\n\n    Begin {\n        try {\n            $positionalArguments = & $script:NewObject collections.arraylist\n            foreach ($parameterName in $PSBoundParameters.BoundPositionally)\n            {\n                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )\n                $null = $PSBoundParameters.Remove($parameterName)\n            }\n            $positionalArguments.AddRange($args)\n\n            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False\n\n            $scriptCmd = { & $script:InvokeCommand `\n                            @clientSideParameters `\n                            -HideComputerName `\n                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ReceiveConnector') `\n                            -Arg ('Get-ReceiveConnector', $PSBoundParameters, $positionalArguments) `\n                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `\n                         }\n\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)\n        } catch {\n            throw\n        }\n    }\n    Process { \n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n }\n    End { \n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n }\n\n    # .ForwardHelpTargetName Get-ReceiveConnector\n    # .ForwardHelpCategory Function\n    # .RemoteHelpRunspace PSSession\n}"",""ScriptBlockId"":""007bb261-4341-4562-8176-220e645367b5"",""Path"":""C:\\Users\\ent-av.levin\\AppData\\Roaming\\Microsoft\\Exchange\\RemotePowerShell\\c1p1-ex01.gazprom.loc\\c1p1-ex01.gazprom.loc.psm1""}}"












"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48392406"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714571737"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""162"",""MessageTotal"":""162"",""ScriptBlockText"":""ion', 'Remove-ContentFilterPhrase', 'Remove-DatabaseAvailabilityGroup', 'Remove-DatabaseAvailabilityGroupConfiguration', 'Remove-DatabaseAvailabilityGroupNetwork', 'Remove-DatabaseAvailabilityGroupServer', 'Remove-DataClassification', 'Remove-DeliveryAgentConnector', 'Remove-DistributionGroup', 'Remove-DistributionGroupMember', 'Remove-DlpPolicy', 'Remove-DlpPolicyTemplate', 'Remove-DynamicDistributionGroup', 'Remove-EcpVirtualDirectory', 'Remove-EdgeSubscription', 'Remove-EmailAddressPolicy', 'Remove-ExchangeCertificate', 'Remove-FederatedDomain', 'Remove-FederationTrust', 'Remove-ForeignConnector', 'Remove-GlobalAddressList', 'Remove-GlobalMonitoringOverride', 'Remove-HybridConfiguration', 'Remove-InboxRule', 'Remove-IntraOrganizationConnector', 'Remove-IPAllowListEntry', 'Remove-IPAllowListProvider', 'Remove-IPBlockListEntry', 'Remove-IPBlockListProvider', 'Remove-JournalRule', 'Remove-LinkedUser', 'Remove-Mailbox', 'Remove-MailboxDatabase', 'Remove-MailboxDatabaseCopy', 'Remove-MailboxExportRequest', 'Remove-MailboxFolderPermission', 'Remove-MailboxImportRequest', 'Remove-MailboxPermission', 'Remove-MailboxRepairRequest', 'Remove-MailboxRestoreRequest', 'Remove-MailboxSearch', 'Remove-MailContact', 'Remove-MailUser', 'Remove-MalwareFilterPolicy', 'Remove-MalwareFilterRule', 'Remove-ManagementRole', 'Remove-ManagementRoleAssignment', 'Remove-ManagementRoleEntry', 'Remove-ManagementScope', 'Remove-MapiVirtualDirectory', 'Remove-Message', 'Remove-MessageClassification', 'Remove-MigrationBatch', 'Remove-MigrationEndpoint', 'Remove-MigrationUser', 'Remove-MobileDevice', 'Remove-MobileDeviceMailboxPolicy', 'Remove-MoveRequest', 'Remove-OabVirtualDirectory', 'Remove-OfflineAddressBook', 'Remove-OrganizationRelationship', 'Remove-OutlookProtectionRule', 'Remove-OutlookProvider', 'Remove-OwaMailboxPolicy', 'Remove-OwaVirtualDirectory', 'Remove-PartnerApplication', 'Remove-PolicyTipConfig', 'Remove-PowerShellVirtualDirectory', 'Remove-PublicFolder', 'Remove-PublicFolderClientPermission', 'Remove-PublicFolderMailboxMigrationRequest', 'Remove-PublicFolderMigrationRequest', 'Remove-PublicFolderMoveRequest', 'Remove-PushNotificationSubscription', 'Remove-ReceiveConnector', 'Remove-RemoteDomain', 'Remove-RemoteMailbox', 'Remove-ResubmitRequest', 'Remove-RetentionPolicy', 'Remove-RetentionPolicyTag', 'Remove-RoleAssignmentPolicy', 'Remove-RoleGroup', 'Remove-RoleGroupMember', 'Remove-SearchDocumentFormat', 'Remove-SendConnector', 'Remove-ServerMonitoringOverride', 'Remove-SettingOverride', 'Remove-SharingPolicy', 'Remove-SiteMailboxProvisioningPolicy', 'Remove-StoreMailbox', 'Remove-SystemMessage', 'Remove-ThrottlingPolicy', 'Remove-TransportRule', 'Remove-UMAutoAttendant', 'Remove-UMCallAnsweringRule', 'Remove-UMDialPlan', 'Remove-UMHuntGroup', 'Remove-UMIPGateway', 'Remove-UMMailboxPolicy', 'Remove-UserPhoto', 'Remove-WebServicesVirtualDirectory', 'Remove-X400AuthoritativeDomain', 'Reset-ProvisioningCache', 'Restore-DatabaseAvailabilityGroup', 'Restore-DetailsTemplate', 'Resume-MailboxDatabaseCopy', 'Resume-MailboxExportRequest', 'Resume-MailboxImportRequest', 'Resume-MailboxRestoreRequest', 'Resume-Message', 'Resume-MoveRequest', 'Resume-PublicFolderMailboxMigrationRequest', 'Resume-PublicFolderMigrationRequest', 'Resume-PublicFolderMoveRequest', 'Resume-Queue', 'Retry-Queue', 'Search-AdminAuditLog', 'Search-Mailbox', 'Search-MailboxAuditLog', 'Search-MessageTrackingReport', 'Send-TextMessagingVerificationCode', 'Set-AcceptedDomain', 'Set-ActiveSyncDeviceAccessRule', 'Set-ActiveSyncDeviceAutoblockThresho"























"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393237"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714714673"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""{$_.Identity -like \""*Anonym*\""}"",""ScriptBlockId"":""3b0b94b0-f166-4d65-9983-114f182f460b"",""Path"":""""}}"


Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393318"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714715691"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""{$_.Expression -like $ip}"",""ScriptBlockId"":""d9cec2fa-789e-42a1-aefa-de49515746a4"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393328"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714715999"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""5508ba35-42c4-4f93-868a-7f393cbb4199"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393331"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714726807"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""$ip = \""10.56.26.21\"" #10.56.238.72\n$recCons = Get-ReceiveConnector | ? {$_.Identity -like \""*Anonym*\""} \nforeach ($recCon in $recCons) {\n    $recCon\n    $recCon.RemoteIPRanges | ? {$_.Expression -like $ip} \n}\n"",""ScriptBlockId"":""2ce89191-1e03-4eca-890f-39a25f30f87e"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393338"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714727359"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""{$_.Identity -like \""*Anonym*\""}"",""ScriptBlockId"":""4195d2da-7d06-4281-83a6-2e3949523a57"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393427"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714728501"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""{$_.Expression -like $ip}"",""ScriptBlockId"":""c18b4fe7-a5c1-4d05-918d-0c80ed1ffc95"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393437"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714728795"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""56401687-572e-4f20-a489-ffee56df80e3"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393440"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714758183"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""$ip = \""10.56.26.22\"" #10.56.238.72\n$recCons = Get-ReceiveConnector | ? {$_.Identity -like \""*Anonym*\""} \nforeach ($recCon in $recCons) {\n    $recCon\n    $recCon.RemoteIPRanges | ? {$_.Expression -like $ip} \n}"",""ScriptBlockId"":""df553511-ad17-4552-a169-e18d7a127df6"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393447"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714758699"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""{$_.Identity -like \""*Anonym*\""}"",""ScriptBlockId"":""d87ff2fe-28eb-4a8f-b63a-a4a96dd85fd0"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393536"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714760027"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""{$_.Expression -like $ip}"",""ScriptBlockId"":""4acf635b-76be-4ea6-8c7b-c14e23a093dd"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393546"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714760309"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""5af849bb-5971-40f7-a591-9d82cc25cd12"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393645"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714809169"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""{$_.Expression -like $ip}"",""ScriptBlockId"":""27f8fce7-ad52-474e-ac3c-3fdf765bed9c"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393556"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714808040"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""{$_.Identity -like \""*Anonym*\""}"",""ScriptBlockId"":""5a783277-e487-4e34-aa42-146a92c45358"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393549"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714807364"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""$ip = \""10.56.26.21\"" #10.56.238.72\n$recCons = Get-ReceiveConnector | ? {$_.Identity -like \""*Anonym*\""} \nforeach ($recCon in $recCons) {\n    $recCon\n    $recCon.RemoteIPRanges | ? {$_.Expression -like $ip} \n}\n"",""ScriptBlockId"":""2789a344-b112-4089-9b32-43611a6548db"",""Path"":""""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393655"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714809453"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""b46c6d00-2dbb-4983-bbd7-345a6c157657"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393665"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714825470"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""{$_.Identity -like \""*Anonym*\""}"",""ScriptBlockId"":""dd021bd5-4a0d-4182-b42e-2aa0c3998543"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393658"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714824937"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""$ip = \""10.56.26.20\"" #10.56.238.72\n$recCons = Get-ReceiveConnector | ? {$_.Identity -like \""*Anonym*\""} \nforeach ($recCon in $recCons) {\n    $recCon\n    $recCon.RemoteIPRanges | ? {$_.Expression -like $ip} \n}"",""ScriptBlockId"":""f84f68ec-b06c-49a2-ba98-9f7dd8c765c6"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393756"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714826623"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""{$_.Expression -like $ip}"",""ScriptBlockId"":""50dc0bef-89c2-4f81-b06e-ec2d470d561d"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393766"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""14684"",""ThreadID"":""33352"",""TimeCreated"":""1709714826912"",""UserId"":""CNTR\\ent-AV.levin""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""6c33e300-9208-44c9-a6ac-4fb6b66931ef"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393778"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719579498"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""@{\nRootModule = 'PSReadLine.psm1'\nNestedModules = @(\""Microsoft.PowerShell.PSReadLine.dll\"")\nModuleVersion = '2.0.0'\nGUID = '5714753b-2afd-4492-a5fd-01d9e2cff8b5'\nAuthor = 'Microsoft Corporation'\nCompanyName = 'Microsoft Corporation'\nCopyright = '(c) Microsoft Corporation. All rights reserved.'\nDescription = 'Great command line editing in the PowerShell console host'\nPowerShellVersion = '5.0'\nDotNetFrameworkVersion = '4.6.1'\nCLRVersion = '4.0.0'\nFormatsToProcess = 'PSReadLine.format.ps1xml'\nAliasesToExport = @()\nFunctionsToExport = 'PSConsoleHostReadLine'\nCmdletsToExport = 'Get-PSReadLineKeyHandler','Set-PSReadLineKeyHandler','Remove-PSReadLineKeyHandler',\n                  'Get-PSReadLineOption','Set-PSReadLineOption'\nHelpInfoURI = 'https://go.microsoft.com/fwlink/?LinkId=528806'\nPrivateData = @{ PSData = @{ Prerelease = 'beta2' } }\n}\n"",""ScriptBlockId"":""040e5882-6f5a-4a58-bffa-515a0d82b9a3"",""Path"":""C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadline.psd1""}}"







"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393781"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719579593"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""import-module ActiveDirectory"",""ScriptBlockId"":""9f272c2d-7ec3-461c-8c42-3d8b653561d8"",""Path"":""""}}"

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393789"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719586438"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""cd\\"",""ScriptBlockId"":""f60b6b3a-351d-43c0-89c4-ecb3e42a75fd"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393784"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719580958"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""af7b0ade-48a8-4b3f-ba47-b3e913bf02b2"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393785"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719580985"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function PSConsoleHostReadLine\n{\n    Microsoft.PowerShell.Core\\Set-StrictMode -Off\n    [Microsoft.PowerShell.PSConsoleReadLine]::ReadLine($host.Runspace, $ExecutionContext)\n}"",""ScriptBlockId"":""c215d901-4c08-44ca-a7ca-8acc042f0fdc"",""Path"":""C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.psm1""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393779"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719579558"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function PSConsoleHostReadLine\n{\n    Microsoft.PowerShell.Core\\Set-StrictMode -Off\n    [Microsoft.PowerShell.PSConsoleReadLine]::ReadLine($host.Runspace, $ExecutionContext)\n}\n"",""ScriptBlockId"":""19df3df5-566f-456b-9c98-a96118d4087e"",""Path"":""C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.psm1""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393792"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719586492"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""36401a05-e4ee-4c21-8742-68cc8dd15e48"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393795"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719589694"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name CNTR_G_ECP-KROSS-BR-02059_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=CNTR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ЗАО «Пургаз»' -server CNTR.gazprom.loc"",""ScriptBlockId"":""4cf8a2d8-a5de-45bc-9238-562b2c01b7c0"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393798"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719589975"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""eb588340-2110-4ca9-9ee1-87bf7ed46261"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393801"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719590617"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name CNTR_G_ECP-KROSS-BR-03071_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=CNTR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «Альянс-Проект»' -server CNTR.gazprom.loc"",""ScriptBlockId"":""4ebc6457-498c-417c-9b49-9a205e0c33d8"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393804"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719590736"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""297efb2c-4fb7-4c5b-bdaf-089ed86d5518"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393807"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719591115"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name CNTR_G_ECP-KROSS-BR-03072_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=CNTR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «НГС»' -server CNTR.gazprom.loc"",""ScriptBlockId"":""a092e19b-65da-40a7-aaf7-32864749ada9"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393816"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719591199"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""ddd13006-cadc-4806-85cd-42815aab715a"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393813"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719591169"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name CNTR_G_ECP-KROSS-BR-03073_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=CNTR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «НИПИ «ТЭНГ»' -server CNTR.gazprom.loc"",""ScriptBlockId"":""a4c2d519-afbe-40fa-9e13-caba73479b5c"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393819"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719591223"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name CNTR_G_ECP-KROSS-BR-03074_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=CNTR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ОАО «Уралгипротранс»' -server CNTR.gazprom.loc"",""ScriptBlockId"":""41e22fa6-b007-4543-a75c-35bb972f2260"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393825"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719591281"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name CNTR_G_ECP-KROSS-BR-03075_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=CNTR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'АО «СИП РС»' -server CNTR.gazprom.loc"",""ScriptBlockId"":""7f5cc428-b479-4e1b-90d5-eff4a2034b94"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393810"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719591144"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""9ce93a70-4643-4678-80bf-d6f76ffe5580"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393828"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719591311"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""af17f889-a62c-4572-9c24-2a5d574e543b"",""Path"":""""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393831"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719591336"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name CNTR_G_ECP-KROSS-BR-03076_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=CNTR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «Проф-Инжиниринг»' -server CNTR.gazprom.loc"",""ScriptBlockId"":""14812d4d-67b9-4e5d-b4e3-201dd2975e4c"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393822"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719591258"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""13c83cfd-8133-4496-94af-953ab33d857d"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393834"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719591364"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""50cd643d-fabd-4071-86b7-4c5681740174"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393840"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719591758"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""7421181c-c2c6-45e0-b7f6-1a94530a8d2b"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393837"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719591388"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SEVZ_G_ECP-KROSS-BR-02059_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=SEVZ,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ЗАО «Пургаз»' -server SEVZ.gazprom.loc"",""ScriptBlockId"":""22a97c75-ecf8-4a1f-bb40-29b4fd6a4d69"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393843"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719591785"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SEVZ_G_ECP-KROSS-BR-03071_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=SEVZ,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «Альянс-Проект»' -server SEVZ.gazprom.loc"",""ScriptBlockId"":""4b1b1b5c-9b90-4cbd-8dba-48a49c653c2a"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393846"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719591820"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""e669e0fd-7a95-4887-9e0a-cda035698924"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393849"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719591847"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SEVZ_G_ECP-KROSS-BR-03072_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=SEVZ,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «НГС»' -server SEVZ.gazprom.loc"",""ScriptBlockId"":""339c5e63-e1c7-4c4f-9d50-2786c2e24b62"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393852"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719591875"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""ca34f9b7-81d8-45ee-bd3e-28b57c431759"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393858"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719591934"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""408f2597-fd08-4192-9e66-70cb0d685ee8"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393855"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719591905"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SEVZ_G_ECP-KROSS-BR-03073_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=SEVZ,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «НИПИ «ТЭНГ»' -server SEVZ.gazprom.loc"",""ScriptBlockId"":""e021b50e-3091-4e50-8ad5-4f4a210686a9"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393861"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719591965"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SEVZ_G_ECP-KROSS-BR-03074_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=SEVZ,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ОАО «Уралгипротранс»' -server SEVZ.gazprom.loc"",""ScriptBlockId"":""695463ad-06eb-4ebd-9fa2-de316fd16fc2"",""Path"":""""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393864"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719591996"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""1a5f7223-2798-49d8-9508-d68d972bbf85"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393867"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719592026"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SEVZ_G_ECP-KROSS-BR-03075_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=SEVZ,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'АО «СИП РС»' -server SEVZ.gazprom.loc"",""ScriptBlockId"":""27c1b411-4734-46c1-ac9c-d2cc19ab47b0"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393870"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719592057"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""0107648f-a548-40e6-bedb-16c130c7bc70"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393873"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719592088"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SEVZ_G_ECP-KROSS-BR-03076_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=SEVZ,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «Проф-Инжиниринг»' -server SEVZ.gazprom.loc"",""ScriptBlockId"":""1d36b2f0-2c6a-4cb6-b6c7-25e66a077981"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393876"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719592130"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""b57f2bf2-bba6-45f4-80dc-1981b5836660"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393879"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719592155"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SIBR_G_ECP-KROSS-BR-02059_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=SIBR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ЗАО «Пургаз»' -server SIBR.gazprom.loc"",""ScriptBlockId"":""6e1da42c-ff63-4684-bccc-dde793e4c592"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393882"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719592701"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""3eb7cc87-c14c-47fb-a980-0b9341ce28e5"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393888"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719592761"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""8b2ef576-4406-4d42-a28e-eb8d5c44648c"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393885"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719592727"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SIBR_G_ECP-KROSS-BR-03071_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=SIBR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «Альянс-Проект»' -server SIBR.gazprom.loc"",""ScriptBlockId"":""f16c8031-2928-49db-94f5-ca76dd1944d8"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393891"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719592785"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SIBR_G_ECP-KROSS-BR-03072_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=SIBR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «НГС»' -server SIBR.gazprom.loc"",""ScriptBlockId"":""8906a5b8-7abc-453b-8dff-34bc345d15be"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393894"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719592812"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""320be42e-feb1-4a8e-b50a-469ecce6f7d7"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393900"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719592868"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""dd7005bd-c23e-4fcb-8ffc-cdcecd47a39c"",""Path"":""""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393903"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719592892"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SIBR_G_ECP-KROSS-BR-03074_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=SIBR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ОАО «Уралгипротранс»' -server SIBR.gazprom.loc"",""ScriptBlockId"":""1c1dcc0a-1bc0-4ae7-9d1d-23cd1c661571"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393906"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719592925"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""1d779039-4492-4ca3-a955-ccf24b8f5b6f"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393912"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719592983"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""5f578b49-de75-41cd-b04e-9040449ebf36"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393909"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719592950"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SIBR_G_ECP-KROSS-BR-03075_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=SIBR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'АО «СИП РС»' -server SIBR.gazprom.loc"",""ScriptBlockId"":""56243f8e-f2cb-4b0e-af32-e147cb9c7b44"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393915"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719593013"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SIBR_G_ECP-KROSS-BR-03076_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=SIBR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «Проф-Инжиниринг»' -server SIBR.gazprom.loc"",""ScriptBlockId"":""13b295eb-c0e8-4037-98e2-72d08072c98e"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393897"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719592837"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SIBR_G_ECP-KROSS-BR-03073_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=SIBR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «НИПИ «ТЭНГ»' -server SIBR.gazprom.loc"",""ScriptBlockId"":""b93606c4-13c5-482f-a9be-d6bc1c6501f1"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393918"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719593041"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""dacc9f57-8263-4e37-8fcf-2add74bb0ab6"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393921"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719593066"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name URAL_G_ECP-KROSS-BR-02059_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=URAL,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ЗАО «Пургаз»' -server URAL.gazprom.loc"",""ScriptBlockId"":""d21f0c8b-06e3-4267-97da-09730e7590af"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393924"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719593581"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""6241c702-29f0-442d-9b2c-7d8811ad87ac"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393927"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719593606"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name URAL_G_ECP-KROSS-BR-03071_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=URAL,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «Альянс-Проект»' -server URAL.gazprom.loc"",""ScriptBlockId"":""62698bab-cbf8-4cad-a874-373568c415c9"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393930"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719593644"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""cea61c34-9d75-497d-b65b-ff4801e99e1e"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393933"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719593669"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name URAL_G_ECP-KROSS-BR-03072_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=URAL,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «НГС»' -server URAL.gazprom.loc"",""ScriptBlockId"":""6f7da131-ccd8-4b60-a601-db404351facb"",""Path"":""""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393936"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719593697"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""90f006b2-47b9-4454-abfd-47e14fc8c041"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393939"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719593722"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name URAL_G_ECP-KROSS-BR-03073_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=URAL,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «НИПИ «ТЭНГ»' -server URAL.gazprom.loc"",""ScriptBlockId"":""3901b2bd-3344-47c7-8285-fb040e5ee0d4"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393942"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719593749"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""43ac2dde-14ac-41f4-a998-7b94427baaf6"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393945"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719593775"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name URAL_G_ECP-KROSS-BR-03074_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=URAL,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ОАО «Уралгипротранс»' -server URAL.gazprom.loc"",""ScriptBlockId"":""bef82d91-c0b7-4764-a092-88f98ec2fa14"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393948"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719593805"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""5262c6cd-a259-4fd2-ab1e-6b7e56bb4cd9"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393954"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719593856"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""d3a33b69-1196-49a1-a731-43c7eccf9efd"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393951"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719593828"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name URAL_G_ECP-KROSS-BR-03075_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=URAL,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'АО «СИП РС»' -server URAL.gazprom.loc"",""ScriptBlockId"":""f069fc55-7125-48f5-890a-ab0b0a736b88"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393960"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719593911"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""90c7e1f3-51c5-4a93-a304-62ee1822bcb5"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393957"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719593881"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name URAL_G_ECP-KROSS-BR-03076_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=URAL,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «Проф-Инжиниринг»' -server URAL.gazprom.loc"",""ScriptBlockId"":""43272103-637c-479f-834f-a1201d7761d1"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393963"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719593935"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name YUG_G_ECP-KROSS-BR-02059_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=YUG,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ЗАО «Пургаз»' -server YUG.gazprom.loc"",""ScriptBlockId"":""24412d4d-0788-4b18-90b8-d9073225164e"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393972"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719594499"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""ff909f7c-8d4a-47b4-a05c-4a8e405620e1"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393969"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719594466"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name YUG_G_ECP-KROSS-BR-03071_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=YUG,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «Альянс-Проект»' -server YUG.gazprom.loc"",""ScriptBlockId"":""d2e8a861-6156-4ec1-a52a-e4953726e1ca"",""Path"":""""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393978"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719594567"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""64b82f0f-3dfe-482e-83f3-1431d907db3f"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393981"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719594593"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name YUG_G_ECP-KROSS-BR-03073_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=YUG,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «НИПИ «ТЭНГ»' -server YUG.gazprom.loc"",""ScriptBlockId"":""0f870743-c3bb-42a4-b73d-b67d88ca7dc6"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393984"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719594625"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""1f36fc8b-d596-43a9-8d09-8ff070a663db"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393987"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719594649"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name YUG_G_ECP-KROSS-BR-03074_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=YUG,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ОАО «Уралгипротранс»' -server YUG.gazprom.loc"",""ScriptBlockId"":""2df7d538-7ee3-44a2-8e63-5f7e3cb8d8a7"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393966"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719594443"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""e0b61871-6039-4fba-8909-e33ce38f2334"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393990"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719594677"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""12cc497b-75af-42b1-be53-7361100eec2b"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393975"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719594536"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name YUG_G_ECP-KROSS-BR-03072_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=YUG,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «НГС»' -server YUG.gazprom.loc"",""ScriptBlockId"":""2b6bacad-deb3-432b-9c70-0472d1921d4a"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393993"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719594703"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name YUG_G_ECP-KROSS-BR-03075_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=YUG,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'АО «СИП РС»' -server YUG.gazprom.loc"",""ScriptBlockId"":""33b5faee-6772-4d85-8acf-c8010ddae794"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393999"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719594803"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name YUG_G_ECP-KROSS-BR-03076_USER -Path 'OU=ECP-KROSS,OU=Groups,DC=YUG,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «Проф-Инжиниринг»' -server YUG.gazprom.loc"",""ScriptBlockId"":""1b26d3b7-4fee-4bdc-a0ec-c013d44b2ce8"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394005"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719596245"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""64c98ad6-1603-4958-b684-8cf85f8d9579"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394008"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719596436"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""6399c761-d688-47d4-82fb-b8e40cc8ab22"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394002"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719594833"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""cefd1ba0-accb-4710-b3b9-b3660a0862df"",""Path"":""""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394017"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719610173"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name CNTR_G_ECP-KROSS-BR-03071_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=CNTR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «Альянс-Проект»' -server CNTR.gazprom.loc"",""ScriptBlockId"":""6188e445-098e-43d0-8046-7dda32c1f4e7"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394020"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719610206"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""e99df881-44ab-4d80-9c59-2e4bcf975ece"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394023"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719610676"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name CNTR_G_ECP-KROSS-BR-03072_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=CNTR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «НГС»' -server CNTR.gazprom.loc"",""ScriptBlockId"":""399ff2f1-5a03-4e7e-88ae-3dea1875ee01"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394026"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719610703"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""b1b0b861-111a-46f6-81e9-6ac071f3c6d4"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394029"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719610729"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name CNTR_G_ECP-KROSS-BR-03073_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=CNTR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «НИПИ «ТЭНГ»' -server CNTR.gazprom.loc"",""ScriptBlockId"":""e6f0d416-a47e-402b-a6b6-93eda949f8f6"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394032"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719610756"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""83318d47-cac2-49ca-95df-73bd1a801ed3"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394035"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719610784"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name CNTR_G_ECP-KROSS-BR-03074_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=CNTR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ОАО «Уралгипротранс»' -server CNTR.gazprom.loc"",""ScriptBlockId"":""eac33c05-6780-42a4-b00c-9bd81fd0ad50"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394014"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719609502"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""174fc1ad-5804-48e2-ba2a-25f986e6994a"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394038"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719610810"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""1f26495d-9611-436f-ac10-7cae0fbd6705"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394041"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719610834"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name CNTR_G_ECP-KROSS-BR-03075_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=CNTR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'АО «СИП РС»' -server CNTR.gazprom.loc"",""ScriptBlockId"":""bd99cf5b-12bc-4c9a-be40-b9855b188fc3"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394044"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719610863"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""e899e983-67ba-499e-91ad-1282ff7ad410"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394047"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719610891"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name CNTR_G_ECP-KROSS-BR-03076_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=CNTR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «Проф-Инжиниринг»' -server CNTR.gazprom.loc"",""ScriptBlockId"":""51d6ae26-384f-41ec-953e-0fa4669233ae"",""Path"":""""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394050"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719610918"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""4cfd20ad-6d2f-4c4d-8d24-ce8ce3fda2b8"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394053"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719610945"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SEVZ_G_ECP-KROSS-BR-02059_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=SEVZ,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ЗАО «Пургаз»' -server SEVZ.gazprom.loc"",""ScriptBlockId"":""5f30a1b5-051f-4bcc-8b53-7faea1eb2f66"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394056"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719610973"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""53f2a099-0040-4750-ade1-f1b442a9274c"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394062"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611037"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""c55d29e4-d6e2-498e-be3f-6ec6bcc23c9d"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394059"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611003"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SEVZ_G_ECP-KROSS-BR-03071_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=SEVZ,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «Альянс-Проект»' -server SEVZ.gazprom.loc"",""ScriptBlockId"":""99286f02-ca8a-4a86-a166-12ce16455653"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394065"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611066"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SEVZ_G_ECP-KROSS-BR-03072_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=SEVZ,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «НГС»' -server SEVZ.gazprom.loc"",""ScriptBlockId"":""7ea98dd3-4a1d-4ad7-91e7-9baf26d46908"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394068"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611096"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""19ab29b2-3d31-4194-b389-32e985ba0a78"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394071"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611122"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SEVZ_G_ECP-KROSS-BR-03073_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=SEVZ,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «НИПИ «ТЭНГ»' -server SEVZ.gazprom.loc"",""ScriptBlockId"":""51d82b3d-6890-47da-9533-abd2af512880"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394074"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611149"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""300b0a82-3a38-4d65-8074-a298bfe3ce22"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394077"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611177"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SEVZ_G_ECP-KROSS-BR-03074_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=SEVZ,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ОАО «Уралгипротранс»' -server SEVZ.gazprom.loc"",""ScriptBlockId"":""e8a3cb37-c51e-4ffb-ae8b-b23212f912d6"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48393996"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719594731"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""c274ecb4-51c7-4bc8-9c1c-e2f548de6b3e"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394083"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611231"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SEVZ_G_ECP-KROSS-BR-03075_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=SEVZ,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'АО «СИП РС»' -server SEVZ.gazprom.loc"",""ScriptBlockId"":""0f5761a0-5490-4eac-b5d8-17e112a3364f"",""Path"":""""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394086"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611260"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""3d11e139-b323-407d-a493-69e5673edcf0"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394080"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611204"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""66965663-58bd-42fb-8d0b-a83949025e25"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394092"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611322"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""c5d443c9-709b-4c57-92dc-d290d851b1ac"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394095"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611348"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SIBR_G_ECP-KROSS-BR-02059_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=SIBR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ЗАО «Пургаз»' -server SIBR.gazprom.loc"",""ScriptBlockId"":""77c07f38-8756-4601-8d94-9bb1b90d497e"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394089"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611296"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SEVZ_G_ECP-KROSS-BR-03076_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=SEVZ,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «Проф-Инжиниринг»' -server SEVZ.gazprom.loc"",""ScriptBlockId"":""36b70745-3db1-4d16-9615-6ef621d6392d"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394098"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611377"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""15b13fbd-04ff-49b8-9a6d-562484ecd6b8"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394101"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611402"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SIBR_G_ECP-KROSS-BR-03071_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=SIBR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «Альянс-Проект»' -server SIBR.gazprom.loc"",""ScriptBlockId"":""480a3f9e-d070-497e-8fec-6879fadb3206"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394104"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611448"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""ffeaa562-3c6f-45ee-bd28-28e91a7a8824"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394110"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611511"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""34d3ae4d-e5d7-450e-8197-c83883f399fe"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394116"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611563"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""588f5383-899d-4b1d-94c8-4421bbeda29a"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394113"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611536"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SIBR_G_ECP-KROSS-BR-03073_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=SIBR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «НИПИ «ТЭНГ»' -server SIBR.gazprom.loc"",""ScriptBlockId"":""31298930-de7b-493e-9348-e0e51d96c21f"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394119"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611588"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SIBR_G_ECP-KROSS-BR-03074_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=SIBR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ОАО «Уралгипротранс»' -server SIBR.gazprom.loc"",""ScriptBlockId"":""b8f5ada8-5aea-48f3-aa63-4dbecc3a1d26"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394122"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611614"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""516e40f1-e427-41c6-8682-2e360d1d1038"",""Path"":""""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394125"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611640"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SIBR_G_ECP-KROSS-BR-03075_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=SIBR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'АО «СИП РС»' -server SIBR.gazprom.loc"",""ScriptBlockId"":""72ba8a02-1ab5-4f6b-84f4-9492d8291b20"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394128"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611671"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""3b8ea5d0-eb46-44ce-92b4-75fff1647638"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394131"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611696"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SIBR_G_ECP-KROSS-BR-03076_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=SIBR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «Проф-Инжиниринг»' -server SIBR.gazprom.loc"",""ScriptBlockId"":""1fa4063a-6dde-493c-893f-696ddebe83f2"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394134"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611723"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""528db625-e062-40a1-9b02-a8cff383c811"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394107"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611477"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name SIBR_G_ECP-KROSS-BR-03072_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=SIBR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «НГС»' -server SIBR.gazprom.loc"",""ScriptBlockId"":""57380da6-f3cb-4dd6-b56b-9ebe658009e2"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394137"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611749"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name URAL_G_ECP-KROSS-BR-02059_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=URAL,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ЗАО «Пургаз»' -server URAL.gazprom.loc"",""ScriptBlockId"":""8a40adf6-37bc-4fcb-b747-b43fa8375cfb"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394140"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611776"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""37e2cbb9-e671-46e1-96cf-b45b4f8f5794"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394143"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611803"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name URAL_G_ECP-KROSS-BR-03071_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=URAL,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «Альянс-Проект»' -server URAL.gazprom.loc"",""ScriptBlockId"":""4f187dc1-afd8-4bb2-84fb-8e9fc5e5728c"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394149"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611858"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name URAL_G_ECP-KROSS-BR-03072_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=URAL,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «НГС»' -server URAL.gazprom.loc"",""ScriptBlockId"":""5aee2603-caaf-4d8d-a38c-0d03ad0bada5"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394152"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611885"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""c4aa674c-74b1-4926-86ff-9aa9aca3d755"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394155"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611910"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name URAL_G_ECP-KROSS-BR-03073_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=URAL,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «НИПИ «ТЭНГ»' -server URAL.gazprom.loc"",""ScriptBlockId"":""7c623c33-b4c3-45fd-a0cb-a0512896e0b0"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394158"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611936"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""3755395e-784f-4b48-9c21-cd7e8c4c6d01"",""Path"":""""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394164"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611989"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""6300e62c-32e5-41b7-b21e-c9bd3617137d"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394161"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611962"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name URAL_G_ECP-KROSS-BR-03074_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=URAL,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ОАО «Уралгипротранс»' -server URAL.gazprom.loc"",""ScriptBlockId"":""f5b9fa01-9467-4587-b99b-f92d679d6074"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394146"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719611832"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""624ef6cb-6bb0-46d9-ada0-32f12d76cb5f"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394167"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719612014"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name URAL_G_ECP-KROSS-BR-03075_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=URAL,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'АО «СИП РС»' -server URAL.gazprom.loc"",""ScriptBlockId"":""c42e6ee3-2df1-4f18-be1c-21edf201b757"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394170"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719612043"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""e0e65cea-9d4c-4617-b7f1-a2050c0c5688"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394173"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719612072"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name URAL_G_ECP-KROSS-BR-03076_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=URAL,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «Проф-Инжиниринг»' -server URAL.gazprom.loc"",""ScriptBlockId"":""65e196a2-a5f0-4df2-8b27-1f1bee4e4934"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394182"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719612153"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""32f9ea03-9f32-4b2a-bf35-8c52f4f65496"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394179"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719612124"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name YUG_G_ECP-KROSS-BR-02059_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=YUG,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ЗАО «Пургаз»' -server YUG.gazprom.loc"",""ScriptBlockId"":""fb1690d7-1f9a-41a9-a47a-2e1596ae23ab"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394185"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719612179"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name YUG_G_ECP-KROSS-BR-03071_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=YUG,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «Альянс-Проект»' -server YUG.gazprom.loc"",""ScriptBlockId"":""f0ae1731-56c9-401c-8590-3430f9a7906e"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394188"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719612212"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""9c92831e-3d25-4b91-8735-c5e50c0015eb"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394176"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719612099"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""76dc6202-ea9f-40d7-89ae-d813b134a900"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394191"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719612236"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name YUG_G_ECP-KROSS-BR-03072_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=YUG,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «НГС»' -server YUG.gazprom.loc"",""ScriptBlockId"":""3556528a-0b7e-47b4-a46b-71bc68756a30"",""Path"":""""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394194"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719612269"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""bf8a143f-2557-4dda-8fda-3b36d941301e"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394197"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719612293"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name YUG_G_ECP-KROSS-BR-03073_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=YUG,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «НИПИ «ТЭНГ»' -server YUG.gazprom.loc"",""ScriptBlockId"":""557b58ec-bbac-400b-adbe-9d9feb59ab00"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394206"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719612372"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""044adaf3-cc4b-4f3a-9aad-8538d18ce8ad"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394203"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719612345"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name YUG_G_ECP-KROSS-BR-03074_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=YUG,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ОАО «Уралгипротранс»' -server YUG.gazprom.loc"",""ScriptBlockId"":""2f898f53-36e1-49f5-9007-e41eb633b12c"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394209"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719612397"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name YUG_G_ECP-KROSS-BR-03075_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=YUG,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'АО «СИП РС»' -server YUG.gazprom.loc"",""ScriptBlockId"":""8481287d-d0b6-489b-9773-66e51a56b419"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394212"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719612426"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""a0e2635a-d660-4be2-a869-b940342fb18b"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394200"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719612319"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""db6e906f-00f5-4068-b8bd-aef794870a1f"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394215"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719612494"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name YUG_G_ECP-KROSS-BR-03076_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=YUG,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ООО «Проф-Инжиниринг»' -server YUG.gazprom.loc"",""ScriptBlockId"":""0ba51aa4-7b4d-42fb-9071-f74d24f43429"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394011"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719609474"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""New-ADGroup -Name CNTR_G_ECP-KROSS-BR-02059_TEST -Path 'OU=ECP-KROSS,OU=Groups,DC=CNTR,DC=GAZPROM,DC=LOC' -GroupScope Global -Description 'ЗАО «Пургаз»' -server CNTR.gazprom.loc"",""ScriptBlockId"":""47201190-2e7b-40bc-8802-30178042245d"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394218"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719612520"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""f83b8547-a774-4763-a1a5-9b90f18c79f0"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394222"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""10436"",""ThreadID"":""38380"",""TimeCreated"":""1709719615265"",""UserId"":""GAZPROM\\ent-ds.guskov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""@{\nRootModule = 'PSReadLine.psm1'\nNestedModules = @(\""Microsoft.PowerShell.PSReadLine.dll\"")\nModuleVersion = '2.0.0'\nGUID = '5714753b-2afd-4492-a5fd-01d9e2cff8b5'\nAuthor = 'Microsoft Corporation'\nCompanyName = 'Microsoft Corporation'\nCopyright = '(c) Microsoft Corporation. All rights reserved.'\nDescription = 'Great command line editing in the PowerShell console host'\nPowerShellVersion = '5.0'\nDotNetFrameworkVersion = '4.6.1'\nCLRVersion = '4.0.0'\nFormatsToProcess = 'PSReadLine.format.ps1xml'\nAliasesToExport = @()\nFunctionsToExport = 'PSConsoleHostReadLine'\nCmdletsToExport = 'Get-PSReadLineKeyHandler','Set-PSReadLineKeyHandler','Remove-PSReadLineKeyHandler',\n                  'Get-PSReadLineOption','Set-PSReadLineOption'\nHelpInfoURI = 'https://go.microsoft.com/fwlink/?LinkId=528806'\nPrivateData = @{ PSData = @{ Prerelease = 'beta2' } }\n}\n"",""ScriptBlockId"":""ff0fe732-c94f-4cdc-940a-9e104098c293"",""Path"":""C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadline.psd1""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394223"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""10436"",""ThreadID"":""38380"",""TimeCreated"":""1709719615338"",""UserId"":""GAZPROM\\ent-ds.guskov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function PSConsoleHostReadLine\n{\n    Microsoft.PowerShell.Core\\Set-StrictMode -Off\n    [Microsoft.PowerShell.PSConsoleReadLine]::ReadLine($host.Runspace, $ExecutionContext)\n}\n"",""ScriptBlockId"":""54c49663-7162-46bb-ab2f-1b4e6c1a2168"",""Path"":""C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.psm1""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394225"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""10436"",""ThreadID"":""38380"",""TimeCreated"":""1709719615379"",""UserId"":""GAZPROM\\ent-ds.guskov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""12f77a79-35d1-4ec3-870f-3a71070d36da"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394226"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""10436"",""ThreadID"":""38380"",""TimeCreated"":""1709719615416"",""UserId"":""GAZPROM\\ent-ds.guskov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function PSConsoleHostReadLine\n{\n    Microsoft.PowerShell.Core\\Set-StrictMode -Off\n    [Microsoft.PowerShell.PSConsoleReadLine]::ReadLine($host.Runspace, $ExecutionContext)\n}"",""ScriptBlockId"":""ee1e766b-af59-4c01-a129-651e9a3061f4"",""Path"":""C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.psm1""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394230"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""10436"",""ThreadID"":""38380"",""TimeCreated"":""1709719620329"",""UserId"":""GAZPROM\\ent-ds.guskov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""ping  esatp-p05-ws03"",""ScriptBlockId"":""3f1d84c3-be32-457e-8b71-3b25a8da888c"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394232"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""10436"",""ThreadID"":""38380"",""TimeCreated"":""1709719623456"",""UserId"":""GAZPROM\\ent-ds.guskov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""5885aec1-542f-4110-8055-a0c975457989"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394235"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719705414"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""8c5b7f7d-f6d6-4d5c-a17d-73653110b382"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394238"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719705568"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""3befb97b-ecdc-4082-988f-41e159e5e70a"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394241"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""6480"",""ThreadID"":""39868"",""TimeCreated"":""1709719705722"",""UserId"":""GAZPROM\\ent-au.menshikov""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""e12aaebc-b50b-466e-8b7d-8d0f69a323c2"",""Path"":""""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120944"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061689"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""\""PS $($executionContext.SessionState.Path.CurrentLocation)$('>' * ($nestedPromptLevel + 1)) \""\n# .Link\n# http://go.microsoft.com/fwlink/?LinkID=225750\n# .ExternalHelp System.Management.Automation.dll-help.xml\n"",""ScriptBlockId"":""9d78a37a-7dd5-4422-bfc5-e1d4a278b700""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120946"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061826"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""$space = New-Object System.Management.Automation.Host.BufferCell\n$space.Character = ' '\n$space.ForegroundColor = $host.ui.rawui.ForegroundColor\n$space.BackgroundColor = $host.ui.rawui.BackgroundColor\n$rect = New-Object System.Management.Automation.Host.Rectangle\n$rect.Top = $rect.Bottom = $rect.Right = $rect.Left = -1\n$origin = New-Object System.Management.Automation.Host.Coordinates\n$Host.UI.RawUI.CursorPosition = $origin\n$Host.UI.RawUI.SetBufferContents($rect, $space)\n# .Link\n# http://go.microsoft.com/fwlink/?LinkID=225747\n# .ExternalHelp System.Management.Automation.dll-help.xml\n"",""ScriptBlockId"":""9565ee76-c6f4-49c8-b4a7-9f4714579608""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120945"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061825"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""<# Options include:\n     RelativeFilePaths - [bool]\n         Always resolve file paths using Resolve-Path -Relative.\n         The default is to use some heuristics to guess if relative or absolute is better.\n\n   To customize your own custom options, pass a hashtable to CompleteInput, e.g.\n         return [System.Management.Automation.CommandCompletion]::CompleteInput($inputScript, $cursorColumn,\n             @{ RelativeFilePaths=$false }\n#>\n\n[CmdletBinding(DefaultParameterSetName = 'ScriptInputSet')]\nParam(\n    [Parameter(ParameterSetName = 'ScriptInputSet', Mandatory = $true, Position = 0)]\n    [string] $inputScript,\n    \n    [Parameter(ParameterSetName = 'ScriptInputSet', Mandatory = $true, Position = 1)]\n    [int] $cursorColumn,\n\n    [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 0)]\n    [System.Management.Automation.Language.Ast] $ast,\n\n    [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 1)]\n    [System.Management.Automation.Language.Token[]] $tokens,\n\n    [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 2)]\n    [System.Management.Automation.Language.IScriptPosition] $positionOfCursor,\n    \n    [Parameter(ParameterSetName = 'ScriptInputSet', Position = 2)]\n    [Parameter(ParameterSetName = 'AstInputSet', Position = 3)]\n    [Hashtable] $options = $null\n)\n\nEnd\n{\n    if ($psCmdlet.ParameterSetName -eq 'ScriptInputSet')\n    {\n        return [System.Management.Automation.CommandCompletion]::CompleteInput(\n            <#inputScript#>  $inputScript,\n            <#cursorColumn#> $cursorColumn,\n            <#options#>      $options)\n    }\n    else\n    {\n        return [System.Management.Automation.CommandCompletion]::CompleteInput(\n            <#ast#>              $ast,\n            <#tokens#>           $tokens,\n            <#positionOfCursor#> $positionOfCursor,\n            <#options#>          $options)\n    }\n}\n        "",""ScriptBlockId"":""83ed0bb8-8e9b-4c37-a24c-c2fe40bee5a8""}}"











"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120947"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061827"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""param([string[]]$paths)\n\n$OutputEncoding = [System.Console]::OutputEncoding\n\nif($paths)\n{\n    foreach ($file in $paths)\n    {\n        Get-Content $file | more.com\n    }\n}\nelse\n{\n    $input | more.com\n}\n"",""ScriptBlockId"":""9e8fb581-6024-41f2-82f2-75d5321de4e9""}}"

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120951"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061845"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""\n[CmdletBinding()]\nparam(\n    [ValidateRange(2, 2147483647)]\n    [int]\n    ${Width},\n\n    [Parameter(ValueFromPipeline=$true)]\n    [psobject]\n    ${InputObject})\n\nbegin\n{\n    try {\n        $PSBoundParameters['Stream'] = $true\n        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('Out-String',[System.Management.Automation.CommandTypes]::Cmdlet)\n        $scriptCmd = {& $wrappedCmd @PSBoundParameters }\n        $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\n        $steppablePipeline.Begin($PSCmdlet)\n    } catch {\n        throw\n    }\n}\n\nprocess\n{\n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n}\n\nend\n{\n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n}\n<#\n.ForwardHelpTargetName Out-String\n.ForwardHelpCategory Cmdlet\n#>"",""ScriptBlockId"":""3ca71042-5e8a-4b19-a5b4-bea556025cc9""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120950"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061844"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""\nparam(\n    [Parameter(ValueFromPipeline=$true)]\n    [string[]]\n    $verb = '*'\n)\nbegin {\n    $allVerbs = [PSObject].Assembly.GetTypes() |\n        Where-Object {$_.Name -match '^Verbs.'} |\n        Get-Member -type Properties -static |\n        Select-Object @{\n            Name='Verb'\n            Expression = {$_.Name}\n        }, @{\n            Name='Group'\n            Expression = {\n                $str = \""$($_.TypeName)\""\n                $str.Substring($str.LastIndexOf('Verbs') + 5)\n            }\n        }\n}\nprocess {\n    foreach ($v in $verb) {\n        $allVerbs | Where-Object { $_.Verb -like $v }\n    }\n}\n# .Link\n# http://go.microsoft.com/fwlink/?LinkID=160712\n# .ExternalHelp System.Management.Automation.dll-help.xml\n"",""ScriptBlockId"":""14f58c5e-669e-4d0c-b487-17d1f65803db""}}"











Raw Event

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120949"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061844"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""<#\n.FORWARDHELPTARGETNAME New-Item\n.FORWARDHELPCATEGORY Cmdlet\n#>\n[CmdletBinding(DefaultParameterSetName='pathSet',\n    SupportsShouldProcess=$true,\n    SupportsTransactions=$true,\n    ConfirmImpact='Medium')]\n    [OutputType([System.IO.DirectoryInfo])]\nparam(\n    [Parameter(ParameterSetName='nameSet', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Parameter(ParameterSetName='pathSet', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\n    [System.String[]]\n    ${Path},\n\n    [Parameter(ParameterSetName='nameSet', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [AllowNull()]\n    [AllowEmptyString()]\n    [System.String]\n    ${Name},\n\n    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]\n    [System.Object]\n    ${Value},\n\n    [Switch]\n    ${Force},\n\n    [Parameter(ValueFromPipelineByPropertyName=$true)]\n    [System.Management.Automation.PSCredential]\n    ${Credential}\n)\n\nbegin {\n\n    try {\n        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('New-Item', [System.Management.Automation.CommandTypes]::Cmdlet)\n        $scriptCmd = {& $wrappedCmd -Type Directory @PSBoundParameters }\n        $steppablePipeline = $scriptCmd.GetSteppablePipeline()\n        $steppablePipeline.Begin($PSCmdlet)\n    } catch {\n        throw\n    }\n\n}\n\nprocess {\n\n    try {\n        $steppablePipeline.Process($_)\n    } catch {\n        throw\n    }\n\n}\n\nend {\n\n    try {\n        $steppablePipeline.End()\n    } catch {\n        throw\n    }\n\n}\n\n"",""ScriptBlockId"":""2ab09fb8-b399-4e3e-bee9-f0203b9f6a3b""}}"











"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120953"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061845"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location B:"",""ScriptBlockId"":""6856eb13-3adb-4429-ab3f-02ff152762a6""}}"

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120952"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061845"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location A:"",""ScriptBlockId"":""3b3c2f05-9e62-4ace-9fe6-f468e294abba""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120954"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061845"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location C:"",""ScriptBlockId"":""2f158d32-ea2e-4d09-9f62-90ee20265563""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120955"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061845"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location D:"",""ScriptBlockId"":""68e77c25-5992-4d11-b0dd-ac3e4542d242""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120956"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061845"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location E:"",""ScriptBlockId"":""82f13e48-b667-4d70-bf7e-65c7662b52fa""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120957"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061845"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location F:"",""ScriptBlockId"":""ca8264ab-c992-4a5b-b4f7-a4412901ffec""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120958"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061845"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location G:"",""ScriptBlockId"":""db9eeb6c-a04b-47fa-bb06-4d8b463a9917""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120959"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061845"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location H:"",""ScriptBlockId"":""e0ebe4e1-c7ae-4eb1-b8d7-7aa558887c41""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120960"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061845"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location I:"",""ScriptBlockId"":""ee2104ae-57d6-46ff-8e30-40239e96c8d8""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120961"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061845"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location J:"",""ScriptBlockId"":""19310135-78c4-4fe1-b7cc-2a02973dbb03""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120948"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061842"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""<#\n.FORWARDHELPTARGETNAME Get-Help\n.FORWARDHELPCATEGORY Cmdlet\n#>\n[CmdletBinding(DefaultParameterSetName='AllUsersView', HelpUri='http://go.microsoft.com/fwlink/?LinkID=113316')]\nparam(\n    [Parameter(Position=0, ValueFromPipelineByPropertyName=$true)]\n    [string]\n    ${Name},\n\n    [string]\n    ${Path},\n\n    [ValidateSet('Alias','Cmdlet','Provider','General','FAQ','Glossary','HelpFile','ScriptCommand','Function','Filter','ExternalScript','All','DefaultHelp','Workflow')]\n    [string[]]\n    ${Category},\n\n    [string[]]\n    ${Component},\n\n    [string[]]\n    ${Functionality},\n\n    [string[]]\n    ${Role},\n\n    [Parameter(ParameterSetName='DetailedView', Mandatory=$true)]\n    [switch]\n    ${Detailed},\n\n    [Parameter(ParameterSetName='AllUsersView')]\n    [switch]\n    ${Full},\n\n    [Parameter(ParameterSetName='Examples', Mandatory=$true)]\n    [switch]\n    ${Examples},\n\n    [Parameter(ParameterSetName='Parameters', Mandatory=$true)]\n    [string]\n    ${Parameter},\n\n    [Parameter(ParameterSetName='Online', Mandatory=$true)]\n    [switch]\n    ${Online},\n\n    [Parameter(ParameterSetName='ShowWindow', Mandatory=$true)]\n    [switch]\n    ${ShowWindow})\n\n      #Set the outputencoding to Console::OutputEncoding. More.com doesn't work well with Unicode.\n      $outputEncoding=[System.Console]::OutputEncoding\n\n      Get-Help @PSBoundParameters | more\n"",""ScriptBlockId"":""72c2bad7-f5a8-46a4-8d3e-a88a19d67815""}}"









"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120962"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061845"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location K:"",""ScriptBlockId"":""30bccc8d-7fd1-4872-a224-f906df003cc4""}}"

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120963"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061845"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location L:"",""ScriptBlockId"":""e097cd79-bb50-4ddf-8863-ab5456c7e667""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120964"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061845"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location M:"",""ScriptBlockId"":""62ab329f-adf9-4e7e-91ce-1c743b911fad""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120967"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061846"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location P:"",""ScriptBlockId"":""555e0b0f-da6c-4325-8832-a76c5eb8c801""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120965"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061846"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location N:"",""ScriptBlockId"":""d6fbac43-0bee-4031-94cd-c892a1e74939""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120968"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061846"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location Q:"",""ScriptBlockId"":""bb9fc08e-0cbf-4e0f-8448-f207b4daaac3""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120969"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061846"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location R:"",""ScriptBlockId"":""b85e822d-eeb9-4582-8c0e-11e28d2324e1""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120970"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061846"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location S:"",""ScriptBlockId"":""be837197-bced-4c1e-8185-ead6b3ce39b1""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120971"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061846"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location T:"",""ScriptBlockId"":""cbbfa329-7868-4ad2-8139-10ea345cff0c""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120972"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061846"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location U:"",""ScriptBlockId"":""0c37f257-b363-4821-aa93-1843f6e56325""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120973"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061846"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location V:"",""ScriptBlockId"":""51dde360-ae89-4b50-b316-88562ed9943b""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120974"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061846"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location W:"",""ScriptBlockId"":""0815b61b-3175-4767-bc7d-c8df34ba5b45""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120975"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061846"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location X:"",""ScriptBlockId"":""fd1b941a-f6c3-43c5-8a73-5fb2a8f9636b""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120976"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061846"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location Y:"",""ScriptBlockId"":""0eed5236-6110-4fc7-a4cd-140faddb45bc""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120977"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061846"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location Z:"",""ScriptBlockId"":""253c48af-76af-4823-b2ab-50c8a1972c51""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120978"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061846"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location .."",""ScriptBlockId"":""afdf2bd2-c4fa-421b-9f6f-48e5f388847a""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120979"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061846"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location \\"",""ScriptBlockId"":""ab804a75-f742-480d-854c-07f366e4467b""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120980"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061846"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":"""",""ScriptBlockId"":""262744c7-4408-4c5d-83ec-01f1b1be4b1c""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120966"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061846"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Set-Location O:"",""ScriptBlockId"":""8b6b8e37-2cf2-46cc-bd49-3deb46c07a75""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120982"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""27132"",""TimeCreated"":""1709721062046"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""$this.ServiceName"",""ScriptBlockId"":""8ca583e5-43c4-4f74-967e-8b97d8029164""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120984"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""27132"",""TimeCreated"":""1709721062048"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""[System.Management.ManagementDateTimeConverter]::ToDmtfDateTime($args[0])"",""ScriptBlockId"":""fc9818a4-b3dd-468e-9840-c092709c46bf""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120981"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721061846"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""Read-Host 'Press Enter to continue...' | Out-Null"",""ScriptBlockId"":""3b5b4d58-6623-4bf6-9d54-5089b1c04a20""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120983"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""27132"",""TimeCreated"":""1709721062048"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""[System.Management.ManagementDateTimeConverter]::ToDateTime($args[0])"",""ScriptBlockId"":""97195ef1-8ad0-4e38-88fc-0d820e489f0c""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120988"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""18416"",""TimeCreated"":""1709721062672"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""if ($this.InvocationInfo -eq $null) { return $this.FunctionName }\n                     $commandInfo = $this.InvocationInfo.MyCommand\n                     if ($commandInfo -eq $null) { return $this.InvocationInfo.InvocationName }\n                     if ($commandInfo.Name -ne \""\"") { return $commandInfo.Name }\n                     return $this.FunctionName"",""ScriptBlockId"":""aa3b48ae-9269-4874-9ebc-f3e1ea1c7dc6""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120989"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""18416"",""TimeCreated"":""1709721062672"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""$this.GetScriptLocation()"",""ScriptBlockId"":""c5857a70-0840-43c9-8b6c-61d0e97ce31f""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120987"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""18416"",""TimeCreated"":""1709721062584"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""0"",""ScriptBlockId"":""744e0d4a-f773-4171-bb3e-c0c010331c83""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120990"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""18416"",""TimeCreated"":""1709721062673"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""$argumentsBuilder = new-object System.Text.StringBuilder\n\n                    $null = $(                    \n                        $argumentsBuilder.Append(\""{\"")\n                        foreach ($entry in $this.InvocationInfo.BoundParameters.GetEnumerator())\n                        {\n                            if ($argumentsBuilder.Length -gt 1)\n                            {\n                                $argumentsBuilder.Append(\"", \"");\n                            }\n                        \n                            $argumentsBuilder.Append($entry.Key).Append(\""=\"")\n                        \n                            if ($entry.Value)\n                            {\n                                $argumentsBuilder.Append([string]$entry.Value)\n                            }\n                        }\n                        \n                        foreach ($arg in $this.InvocationInfo.UnboundArguments.GetEnumerator())\n                        {\n                            if ($argumentsBuilder.Length -gt 1)\n                            {\n                                $argumentsBuilder.Append(\"", \"")\n                            }\n                            if ($arg)\n                            {\n                                $argumentsBuilder.Append([string]$arg)\n                            }\n                            else\n                            {\n                                $argumentsBuilder.Append('$null')\n                            }\n                        }\n                        \n                        $argumentsBuilder.Append('}');\n                    )\n                    \n                    return $argumentsBuilder.ToString();"",""ScriptBlockId"":""0f473c43-7478-46f5-ba47-50f3e21ae13a""}}"








"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120985"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""27132"",""TimeCreated"":""1709721062129"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""$null = [System.Management.Automation.CommandCompletion]::CompleteInput('Set-Location', 12, $null)"",""ScriptBlockId"":""e9bf9970-1dfb-4ca8-aa2a-38deae174d58""}}"

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120995"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""18416"",""TimeCreated"":""1709721070654"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""ping 10.56.205.18"",""ScriptBlockId"":""9c4d4824-0f59-42fd-ae9a-25bf6ace07d9""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120998"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721073760"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""\""The command $($lastError.TargetObject) was not found, but does exist in the current location. Windows PowerShell does not load commands from the current location by default. If you trust this command, instead type `\"".\\$($lastError.TargetObject)`\"". See `\""get-help about_Command_Precedence`\"" for more details.\"""",""ScriptBlockId"":""afcf294b-645b-4d6b-b6ed-d9d0caad7227""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120997"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""22440"",""TimeCreated"":""1709721073759"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""\n        [System.Diagnostics.DebuggerHidden()]\n        param()\n\n        $foundSuggestion = $false\n        \n        if($lastError -and\n            ($lastError.Exception -is \""System.Management.Automation.CommandNotFoundException\""))\n        {\n            $escapedCommand = [System.Management.Automation.WildcardPattern]::Escape($lastError.TargetObject)\n            $foundSuggestion = @(Get-Command ($ExecutionContext.SessionState.Path.Combine(\"".\"", $escapedCommand)) -ErrorAction Ignore).Count -gt 0\n        }\n\n        $foundSuggestion\n        "",""ScriptBlockId"":""ec698474-d6f7-4643-bee5-fbd2973deaa4""}}"














Raw Event

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120991"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""18416"",""TimeCreated"":""1709721063182"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""@{\nGUID=\""EEFCB906-B326-4E99-9F54-8B4BB6EF3C6D\""\nAuthor=\""Microsoft Corporation\""\nCompanyName=\""Microsoft Corporation\""\nCopyright=\""© Microsoft Corporation. All rights reserved.\""\nModuleVersion=\""3.1.0.0\""\nPowerShellVersion=\""3.0\""\nCLRVersion=\""4.0\""\nNestedModules=\""Microsoft.PowerShell.Commands.Management.dll\""\nHelpInfoURI = 'http://go.microsoft.com/fwlink/?linkid=285756'\nCmdletsToExport=@(\""Add-Content\"",\n    \""Clear-Content\"",\n    \""Clear-ItemProperty\"",\n    \""Join-Path\"",\n    \""Convert-Path\"",\n    \""Copy-ItemProperty\"",\n    \""Get-EventLog\"",\n    \""Clear-EventLog\"",\n    \""Write-EventLog\"",\n    \""Limit-EventLog\"",\n    \""Show-EventLog\"",\n    \""New-EventLog\"",\n    \""Remove-EventLog\"",\n    \""Get-ChildItem\"",\n    \""Get-Content\"",\n    \""Get-ItemProperty\"",\n    \""Get-WmiObject\"",\n    \""Invoke-WmiMethod\"",\n    \""Move-ItemProperty\"",\n    \""Get-Location\"",\n    \""Set-Location\"",\n    \""Push-Location\"",\n    \""Pop-Location\"",\n    \""New-PSDrive\"",\n    \""Remove-PSDrive\"",\n    \""Get-PSDrive\"",\n    \""Get-Item\"",\n    \""New-Item\"",\n    \""Set-Item\"",\n    \""Remove-Item\"",\n    \""Move-Item\"",\n    \""Rename-Item\"",\n    \""Copy-Item\"",\n    \""Clear-Item\"",\n    \""Invoke-Item\"",\n    \""Get-PSProvider\"",\n    \""New-ItemProperty\"",\n    \""Split-Path\"",\n    \""Test-Path\"",\n    \""Get-Process\"",\n    \""Stop-Process\"",\n    \""Wait-Process\"",\n    \""Debug-Process\"",\n    \""Start-Process\"",\n    \""Remove-ItemProperty\"",\n    \""Remove-WmiObject\"",\n    \""Rename-ItemProperty\"",\n    \""Register-WmiEvent\"",\n    \""Resolve-Path\"",\n    \""Get-Service\"",\n    \""Stop-Service\"",\n    \""Start-Service\"",\n    \""Suspend-Service\"",\n    \""Resume-Service\"",\n    \""Restart-Service\"",\n    \""Set-Service\"",\n    \""New-Service\"",\n    \""Set-Content\"",\n    \""Set-ItemProperty\"",\n    \""Set-WmiInstance\"",\n    \""Get-Transaction\"",\n    \""Start-Transaction\"",\n    \""Complete-Transaction\"",\n    \""Undo-Transaction\"",\n    \""Use-Transaction\"",\n    \""New-WebServiceProxy\"",\n    \""Get-HotFix\"",\n    \""Test-Connection\"",\n    \""Enable-ComputerRestore\"",\n    \""Disable-ComputerRestore\"",\n    \""Checkpoint-Computer\"",\n    \""Get-ComputerRestorePoint\"",\n    \""Restart-Computer\"",\n    \""Stop-Computer\"",\n    \""Restore-Computer\"",\n    \""Add-Computer\"",\n    \""Remove-Computer\"",\n    \""Test-ComputerSecureChannel\"",\n    \""Reset-ComputerMachinePassword\"",\n    \""Rename-Computer\"",\n    \""Get-ControlPanelItem\"",\n    \""Show-ControlPanelItem\"")\n}\n"",""ScriptBlockId"":""e7e0e0d5-829f-4d4e-8f58-5a7e8101e2c5""}}"













"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM02.GAZPROM.LOC"",""EventRecordID"":""120999"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""24188"",""ThreadID"":""18416"",""TimeCreated"":""1709721073775"",""UserId"":""CNTR\\GFKRA02""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""a3764239-a7f8-437d-81d0-6ce1d8127d1d""}}"

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM03.GAZPROM.LOC"",""EventRecordID"":""44582"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""99076"",""ThreadID"":""82464"",""TimeCreated"":""1709736803680"",""UserId"":""CNTR\\GFKKA""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""ping 10.56.238.42 -t"",""ScriptBlockId"":""952cd647-c240-4c73-ba9b-1e5252a2225f""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM03.GAZPROM.LOC"",""EventRecordID"":""44584"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""102"",""ProcessID"":""99076"",""ThreadID"":""82464"",""TimeCreated"":""1709736856941"",""UserId"":""CNTR\\GFKKA""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""prompt"",""ScriptBlockId"":""8cfaf9a4-fb97-402f-a224-8b246a46779b""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394364"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""27016"",""ThreadID"":""9244"",""TimeCreated"":""1709746625199"",""UserId"":""CNTR\\adm-GG.Kornev""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""& \""C:\\Users\\ADM-GG~1.KOR\\AppData\\Local\\Temp\\1283\\SDIAG_4cb23b5b-6735-4702-888a-47c823bfc245\\NetworkDiagnosticsTroubleshoot.ps1\"""",""ScriptBlockId"":""3ac01c16-29c2-4221-a3cb-c69c895f1d67"",""Path"":""""}}"















Raw Event

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394370"",""Keywords"":""None"",""Level"":""Warning"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""27016"",""ThreadID"":""9244"",""TimeCreated"":""1709746625489"",""UserId"":""CNTR\\adm-GG.Kornev""},""EventData"":{""MessageNumber"":""4"",""MessageTotal"":""4"",""ScriptBlockText"":"" {\n        if($script:ExpectingException)\n        {\n            \""No admin helper class events were found.\"" | convertto-xml | Update-DiagReport -id DiagEvents -name \""Helper Class Events\"" -verbosity Debug\n        }\n        else\n        {\n            \""Exception: \"" + $_.Exception.GetType().FullName + \"" Message: \"" + $_.Exception.Message  | convertto-xml | Update-DiagReport -id DiagEventsFailure -name \""Helper Class Events\"" -description \""Failed while retrieving helper class events.\"" -verbosity Debug\n        }\n        return\n    }\n}\n\nfunction LoadResourceString($ResourceString)\n{\n    [string]$bufStr = $null\n    $dll = \""NetworkDiagnosticSnapIn.dll\""\n\n    try\n    {\n        RegSnapin $dll\n        \n        $bufferSize = 512\n        $buffer = New-Object System.Text.StringBuilder $bufferSize\n        [Microsoft.Windows.Diagnosis.Network.NativeShellMethods]::SHLoadIndirectString($ResourceString, $buffer, $bufferSize, [IntPtr]::Zero)\n        $bufStr = $buffer.ToString()\n    }\n    finally\n    {\n        UnregSnapin $dll\n    }\n\n    return $bufStr\n}\n\nfunction IsDPSStarted()\n{\n    $dpsService = get-service \""DPS\""\n    if($dpsService)\n    {\n        if($dpsService.Status -ne \""Running\"")\n        {\n            return $false;\n        }\n    }\n    return $true;\n}\n\nfunction IsDPSDisabled()\n{\n    $dpsService = gwmi win32_service -f \""name='DPS'\""\n    if($dpsService)\n    {\n        if($dpsService.StartMode -eq \""Disabled\"")\n        {\n            return $true;\n        }\n    }\n    return $false;\n}\n\nfunction IsSafeMode()\n{\n    [void] [Reflection.Assembly]::LoadWithPartialName(\""System.Windows.Forms\"")\n    return [System.Windows.Forms.SystemInformation]::BootMode -ne 0\n}\n\nfunction IsHelpTopicAllowed($Link)\n{\n    $regValue = get-itemproperty -path hklm:\\SYSTEM\\CurrentControlSet\\Control\\NetDiagFx\\Config\\HelpTopic  -name $Link -ErrorAction SilentlyContinue -ErrorVariable regError\n    if($regValue)\n    {\n        # check the DWORD value (the key to the value is the Value name: i.e., $Link) \n        # 1         - enabled\n        # otherwise - disabled\n        $filterValue = $regValue.$Link;\n        if($filterValue -eq 1)\n        {\n            return $true;\n        }\n        else\n        {\n            return $false;\n        }\n    }\n    elseif ($regError)\n    {\n        if(!($regError[0].CategoryInfo.Category -eq \""InvalidArgument\"") -and  !($regError[0].CategoryInfo.Category -eq \""ObjectNotFound\""))\n        {\n            \"" Warning: Unexpected error when reading Help Topic Cause key : \"" + $regError[0].CategoryInfo.Category | convertto-xml | Update-DiagReport -id UnexpectedRegError -name \""Unexpected Registry Error\"" -verbosity Debug\n        }\n        return $false;\n    }\n}\n"",""ScriptBlockId"":""d01425b3-d403-4c7f-b85e-4a892cd80698"",""Path"":""C:\\Users\\adm-gg.kornev\\AppData\\Local\\Temp\\1283\\SDIAG_4cb23b5b-6735-4702-888a-47c823bfc245\\UtilityFunctions.ps1""}}"















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394372"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""27016"",""ThreadID"":""9244"",""TimeCreated"":""1709746625513"",""UserId"":""CNTR\\adm-GG.Kornev""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""# Copyright © 2008, Microsoft Corporation. All rights reserved.\n\nfunction DefineConstant($curVal, $name, $value)\n{\n    if($curVal -eq $null)\n    {\n        set-variable -name $name -value $value -option constant -scope Global\n    }\n}\n\nDefineConstant $DiagnoseWaitTime \""DiagnoseWaitTime\"" 90000\nDefineConstant $RepairWaitTime \""RepairWaitTime\"" 90000\nDefineConstant $ValidateWaitTime \""ValidateWaitTime\"" 90000\nDefineConstant $ProgressUpdateDelay \""ProgressUpdateDelay\"" 1000\nDefineConstant $WinBuiltinAdministratorsSid \""WinBuiltinAdministratorsSid\"" 26\nDefineConstant $WinBuiltinNetworkConfigurationOperatorsSid \""WinBuiltinNetworkConfigurationOperatorsSid\"" 37\nDefineConstant $WinLocalLogonSid \""WinLocalLogonSid\"" 80\nDefineConstant $GuidLength \""GuidLength\"" 38\nDefineConstant $DefaultDiagURL \""DefaultDiagURL\"" \""\""\nDefineConstant $S_OK \""S_OK\"" 0\nDefineConstant $S_FALSE \""S_FALSE\"" 1\nDefineConstant $RF_USER_ACTION \""RF_USER_ACTION\"" 0x10000000\nDefineConstant $RF_INFORMATION_ONLY \""RF_INFORMATION_ONLY\""  0x2000000\nDefineConstant $RF_USER_CONFIRMATION \""RF_USER_CONFIRMATION\"" 0x8000000\nDefineConstant $RF_VALIDATE_HELPTOPIC \""RF_VALIDATE_HELPTOPIC\"" 0x400000\nDefineConstant $RF_CONTACT_ADMIN \""RF_CONTACT_ADMIN\"" 0x20000\nDefineConstant $RF_RESERVED_CA \""RF_RESERVED_CA\"" 0x80000000\nDefineConstant $RCF_ISCONFIRMED \""RCF_ISCONFIRMED\"" 0x2\nDefineConstant $RCF_ISTHIRDPARTY  \""RCF_ISTHIRDPARTY\"" 0x4\nDefineConstant $UIT_HELP_PANE \""UIT_HELP_PANE\"" 3\nDefineConstant $NDF_STOP_STATUS_FAILEDVALIDATE \""NDF_STOP_STATUS_FAILEDVALIDATE\"" 2\nDefineConstant $NDF_STOP_STATUS_SUCCESSVALIDATE \""NDF_STOP_STATUS_SUCCESSVALIDATE\"" 5\nDefineConstant $NDF_STOP_STATUS_FAILEDREPAIR \""NDF_STOP_STATUS_FAILEDREPAIR\"" 1\nDefineConstant $NDF_STOP_STATUS_SUCCESSDIAG \""NDF_STOP_STATUS_SUCCESSDIAG\"" 3\nDefineConstant $NDF_SKIPREASON_NONE \""NDF_SKIPREASON_NONE\"" 0\nDefineConstant $NDF_SKIPREASON_ADAPTER \""NDF_SKIPREASON_ADAPTER\"" 1\nDefineConstant $NDF_SKIPREASON_DUPLICATE \""NDF_SKIPREASON_DUPLICATE\"" 2\nDefineConstant $ERROR_MSG_RTF_RESOURCE \""ERROR_MSG_RTF_RESOURCE\"" \""@DiagPackage.dll,-10103\""\nDefineConstant $INBOUND_FILESHARE_RESOURCE \""INBOUND_FILESHARE_RESOURCE\"" \""@DiagPackage.dll,-10012\""\nDefineConstant $INBOUND_FILESHARE_PARAM \""INBOUND_FILESHARE_PARAM\"" \""@FirewallAPI.dll,-28502\""\nDefineConstant $INBOUND_REMOTEDESKTOP_RESOURCE \""INBOUND_REMOTEDESKTOP_RESOURCE\"" \""@DiagPackage.dll,-10013\""\nDefineConstant $INBOUND_REMOTEDESKTOP_PARAM \""INBOUND_REMOTEDESKTOP_PARAM\"" \""@FirewallAPI.dll,-28752\""\nDefineConstant $INBOUND_DISCOVERY_RESOURCE \""INBOUND_DISCOVERY_RESOURCE\"" \""@DiagPackage.dll,-10014\""\nDefineConstant $INBOUND_DISCOVERY_PARAM \""INBOUND_DISCOVERY_PARAM\"" \""@FirewallAPI.dll,-32752\""\nDefineConstant $INBOUND_OTHER_RESOURCE \""INBOUND_OTHER_RESOURCE\"" \""@DiagPackage.dll,-10011\""\nDefineConstant $FM_ENABLED \""FM_ENABLED\"" 0\nDefineConstant $FM_DISABLED \""FM_DISABLED\"" 1\nDefineConstant $FM_CATCHALL \""FM_CATCHALL\"" 2\nDefineConstant $FV_NOTFILTERED \""FV_NOTFILTERED\"" 0\nDefineConstant $FV_FILTERED \""FV_FILTERED\"" 1\nDefineConstant $FV_MISSING \""FV_MISSING\"" -1"",""ScriptBlockId"":""b924487a-f93e-404e-a50f-9c0c8834d8d9"",""Path"":""C:\\Users\\adm-gg.kornev\\AppData\\Local\\Temp\\1283\\SDIAG_4cb23b5b-6735-4702-888a-47c823bfc245\\UtilitySetConstants.ps1""}}"

























Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394371"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""27016"",""ThreadID"":""9244"",""TimeCreated"":""1709746625498"",""UserId"":""CNTR\\adm-GG.Kornev""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""# Localized\t08/22/2013 12:35 PM (GMT)\t303:4.80.0411 \tLocalizationData.psd1\nConvertFrom-StringData @'\n\n###PSLOC\n\nprogress_Diagnosing_NoDetails=Looking for problems...\nprogress_Diagnosing_SafeMode=Verifying boot mode...\nprogress_Diagnosing_DPS=Verifying that the network diagnostics service is running...\nprogress_Diagnosing_Initializing=Starting network diagnostics...\nprogress_Repairing=Executing Repair...\nprogress_Vaildating_NoDetails=Verifying that the problem is resolved...\nprogress_Collecting_Logs=Collecting results...\nprogress_Collecting_Config=Collecting configuration details...\ninteraction_AllAdapters=All network adapters\ninteraction_InvalidURL_Desc=For example, http://www.microsoft.com.\ninteraction_InvalidURL_FormatError=\""{0}\"" does not appear to be a valid address. Make sure that you type the address in this format: http://www.microsoft.com\ninteraction_InvalidUNC_Desc=For example, \\\\\\\\networkname\\\\folder\ninteraction_InvalidUNC_FormatError=\""{0}\"" does not appear to be a valid network location. Make sure that you type the network location in this format: \\\\\\\\networkname\\\\folder\ninteraction_InvalidUNC_CharError=\""{0}\""  contains invalid characters. A network location cannot contain the following characters: / : * ? \"" < > |\ninteraction_InvalidURLOrUNC_Desc=For example, http://www.microsoft.com or \\\\\\\\networkname\\\\folder.\ninteraction_InvalidURLOrUNC_FormatError=\""{0}\"" does not appear to be a valid address or network path. Make sure that you type the address or path in this format: http://www.microsoft.com or \\\\\\\\networkname\\\\folder\ninteraction_InvalidExe_Desc=Click Browse, and then select a program file. The file you choose should have an \"".exe\"" extension.\ninteraction_InvalidExe_FormatError=\""{0}\"" does not appear to be a valid executable. Make sure that the executable is in this format: c:\\\\windows\\\\explorer.exe\ninteraction_DefaultContinueButtonName=Check to see if the problem is fixed\ninteraction_DefaultContinueButtonDescription=Click here after you follow the instructions above.\ninteraction_DefaultLaunchButtonName=Show me where I can do the above task\ninteraction_Inbound_Exe=Allow other computers to connect to {0}\nTraceFileReportName=Network Diagnostics Log\nOtherNetworkConfigReportName=Other Networking Configuration and Logs\nHelperClassEventName=Diagnostics Information\nHelperClassEventNameWithHCName=Diagnostics Information ({0})\nHelperClassEventDesc=Detailed information from network diagnostics modules\nDefaultHelpTopicText=For more information, open Windows Help and Support\nrepair_StartDPS=Start the Diagnostics Policy Service\nrepair_SetAutoDPS=Auto-Start the Diagnostics Policy Service\n\n###PSLOC\n\n'@\n"",""ScriptBlockId"":""08a74d7b-c49e-497d-a92f-e74b59cd65f4"",""Path"":""""}}"
















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394366"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""27016"",""ThreadID"":""9244"",""TimeCreated"":""1709746625446"",""UserId"":""CNTR\\adm-GG.Kornev""},""EventData"":{""MessageNumber"":""2"",""MessageTotal"":""2"",""ScriptBlockText"":""                \""Attaching catch-all Root Cause instead. ID:\"" + $rcToAttach | convertto-xml | Update-DiagReport -id CatchAllRootCause -name \""Catch-all Root Cause used.\"" -verbosity Debug\n                    }\n                }\n\n                #collect the replacement parameters\n                $params = @{\""InstanceID\"" = $instanceID};\n\n                #Get extra replacement parameters from repair\n                $descEx = $rootCause.DescriptionEx\n                if(!($descEx -eq $null))\n                {\n                    $params += GetParameters $descEx $params\n                }\n\n                #also need parameters for every repair\n                $repairEnum.Reset()\n                for($curRep=0; $curRep -lt $repairCount; $curRep++)\n                {\n                    $repair = $repairEnum.Next\n                    $descEx = $repair.DescriptionEx\n                    if(!($descEx -eq $null))\n                    {\n                         $params += GetParameters $descEx $params\n                    }\n                }\n\n                #add security boundary safe data\n                $data = GetSBSData $Global:ndf.IncidentID\n                $params.Add(\""SBSData\"",$data)\n\n                #keywords for escalation\n                $keywords = GetKeywords($rootCause.DescriptionEx);\n                if($keywords.Length -gt 0)\n                {\n                    $params.Add(\""Keywords\"", $keywords);\n                }\n\n                $script:ExpectingException = $true;\n                Update-DiagRootCause -InstanceId $instanceID -ID $rcToAttach -Detected $true -Parameter $params\n                $script:ExpectingException = $false;\n\n                #log the parameters\n                $evtDesc =  \""Root Cause \"" + $rcToAttach\n                $params |  convertto-xml | Update-DiagReport -id RootCauseParameters -name \""Root Cause Parameters\"" -description $evtDesc -verbosity Debug\n            }\n            trap [Exception] {\n                if($script:ExpectingException)\n                {\n                    $script:ExpectingException = $false\n                    #add unmanifested root cause\n                    $params = @{\""InstanceID\"" = $instanceID};\n                    $uRC = GetUnmanifestedRootCause $rootCause ([ref]$params) ($catchAllRC)\n                    if(!($uRC -eq $null))\n                    {\n                        Update-DiagRootCause -InstanceId $instanceID -ID $uRC -Detected $true -Parameter $params\n\n                        #log the parameters\n                        $evtDesc =  \""Root Cause \"" + $rootCause.RootCauseID + \"" (\"" + $uRC + \"")\""\n                        $params |  convertto-xml | Update-DiagReport -id RootCauseParameters -name \""Root Cause Parameters\"" -description $evtDesc -verbosity Debug\n                    }\n                    continue\n                }\n                else\n                {\n                    #rethrow exception\n                    throw $_.Exception;\n                }\n            }\n        }\n    }\n}\nelseif(!($diagResult -eq $S_FALSE))\n{\n    AddTraceFileToSession $Global:ndf $localizationString.TraceFileReportName \""Diagnose\""\n\n    #may have failed due to service state or boot mode\n\n    #first verify that DPS is running and that we aren't in safe mode.\n    Write-DiagProgress -activity $localizationString.progress_Diagnosing_SafeMode\n    $safeMode = IsSafeMode\n    if($safeMode)\n    {\n        Update-DiagRootCause -ID \""{6880DE42-9ED5-454a-8490-BA407BEABC22}\"" -Detecte"


















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394373"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""27016"",""ThreadID"":""9244"",""TimeCreated"":""1709746625514"",""UserId"":""CNTR\\adm-GG.Kornev""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function DefineConstant($curVal, $name, $value)\n{\n    if($curVal -eq $null)\n    {\n        set-variable -name $name -value $value -option constant -scope Global\n    }\n}"",""ScriptBlockId"":""bd2450a6-100e-4aa6-9361-b92e5f8d3d45"",""Path"":""C:\\Users\\adm-gg.kornev\\AppData\\Local\\Temp\\1283\\SDIAG_4cb23b5b-6735-4702-888a-47c823bfc245\\UtilitySetConstants.ps1""}}"


Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394374"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""27016"",""ThreadID"":""9244"",""TimeCreated"":""1709746625588"",""UserId"":""CNTR\\adm-GG.Kornev""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""{\n    $prevIncidentID = 0\n    $prevFlags = 0\n\n    $script:ExpectingException = $true\n    #marked as no-ui. throws exception if not available\n    $SBSData = Get-DiagInput -ID \""SecurityBoundarySafe\""\n    $script:ExpectingException = $false\n\n    if($SBSData[0].Length -gt 0)\n    {\n        #Security boundary safe data is now always passed in to our script on rerun or elevation\n        #We use the \""flags\"" field to determine whether it's a rerun or elevation  -- if the flag doesn't match the current privilege, we elevated\n        \""SBS Data Retrieved: \"" + $SBSData  | convertto-xml | Update-DiagReport -id SecurityBoundarySafe -name \""Security Boundary Safe\"" -verbosity Debug\n\n        $script:isRerun = $true\n        $admin = IsAdmin\n        SplitSBSData $SBSData[0] ([ref]$prevIncidentID) ([ref]$prevFlags)\n        if([System.Int32]($prevFlags) -eq [System.Int32]($admin))\n        {\n            \""Previous run's privilege level flag (\"" + $prevFlags + \"") matches our current level (IsAdmin:\"" + $admin +\""). Determining whether it's appropriate to re-run.\"" | convertto-xml | Update-DiagReport -id ReuseSession -name \""Reusing previous session\"" -verbosity Debug\n\n            #same privilege level as last run, so this is a rerun rather than elevation\n            #should not use previous incident, but should determine whether rerun is necessary\n\n            #open the previous incident\n            $Global:ndf = GetExistingNDFInstance $prevIncidentID\n            if($Global:ndf)\n            {\n                #recover the input attributes so we don't re-prompt\n                $prevHelperClass = $Global:ndf.EntryPoint\n                $prevHelperAttributes = $Global:ndf.HelperAttributes\n                $Global:incidentData = @{\""HelperClassName\"" = $prevHelperClass; \""HelperAttributes\"" =$prevHelperAttributes}\n\n                #check whether re-diagnosis occurred during verification, if so open use the follow up session\n                $ndfRerun = $null\n                $followupIncidentID = $Global:ndf.FollowUpSession\n                if($followupIncidentID)\n                {\n                    #if follow up incident is available, we should always reuse and return this data as the diagnostics result of this rerun\n                    $ndfRerun = GetExistingNDFInstance $followupIncidentID\n                    if($ndfRerun)\n                    {\n                        $Global:previousNdf = $Global:ndf #keep a handle to the previous NDF\n                        $Global:ndf = $ndfRerun;\n\n                    }\n                    else\n                    {\n                        throw \""Could not open re-run incident.\""\n                    }\n                }\n                else\n                {\n                    #don't have a rerun available so lets make sure it's appropriate to rerun\n                    #Only necessary when the last action was a failed validation\n                    $sessionStatus = $Global:ndf.SessionStatus\n                    if(!($sessionStatus -eq $NDF_STOP_STATUS_FAILEDVALIDATE))\n                    {\n                        #rerun not necessary\n                        if($sessionStatus -eq $NDF_STOP_STATUS_SUCCESSVALIDATE)\n                        {\n                            \""Skipping rerun, previous session succeeded in resolving the problem.\"" | convertto-xml | Update-DiagReport -id SkipRerun -name \""Skip Rerun\"" -verbosity Debug\n                            $script:skipRerun = $true\n                        }\n                    "

















"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394375"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""27016"",""ThreadID"":""9244"",""TimeCreated"":""1709746625702"",""UserId"":""CNTR\\adm-GG.Kornev""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""{\n        $script:ExpectingException = $true\n        $script:IT_EntryPoint = Get-DiagInput -ID \""IT_EntryPoint\""\n        $script:ExpectingException = $false\n        if($script:IT_EntryPoint[0].Length -eq 0)\n        {\n            \""No entry point specified. Using default connectivity diagnose experience\"" | convertto-xml | Update-DiagReport -id EntryPoint -name \""Entry Point\"" -description \""Selected entry point.\"" -verbosity Debug\n            $script:IT_EntryPoint = \""DefaultConnectivity\""\n        }\n        else\n        {\n            $script:IT_EntryPoint | convertto-xml | Update-DiagReport -id EntryPoint -name \""Entry Point\"" -description \""Selected entry point.\"" -verbosity Debug\n        }\n    }"",""ScriptBlockId"":""a98c01df-9741-41dd-a27a-6831e7ee0324"",""Path"":""C:\\Users\\adm-gg.kornev\\AppData\\Local\\Temp\\1283\\SDIAG_4cb23b5b-6735-4702-888a-47c823bfc245\\NetworkDiagnosticsTroubleshoot.ps1""}}"

"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394376"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""27016"",""ThreadID"":""9244"",""TimeCreated"":""1709746625730"",""UserId"":""CNTR\\adm-GG.Kornev""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function InContextEntry()\n{\n    $IT_HelperClassName = Get-DiagInput -ID \""IT_HelperClassName\""\n    if($IT_HelperClassName -eq $null   -or  $IT_HelperClassName[0].Length -eq 0) {\n      #Failed retriving HelperClassName from In-Context answer file\n      return $null\n    }\n\n    #get input attributes\n    $IT_HelperAttributes = Get-DiagInput -ID \""IT_HelperAttributes\""\n    if($IT_HelperAttributes -eq $null) {\n      #Failed retriving HelperAttributes from In-Context answer file\n      return $null\n    }\n\n    return @{\""HelperClassName\"" = $IT_HelperClassName; \""HelperAttributes\"" = $IT_HelperAttributes}\n}"",""ScriptBlockId"":""c1fb9826-2234-4fa8-8f55-d45190a7c0e5"",""Path"":""C:\\Users\\adm-gg.kornev\\AppData\\Local\\Temp\\1283\\SDIAG_4cb23b5b-6735-4702-888a-47c823bfc245\\UtilityFunctions.ps1""}}"
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394377"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""27016"",""ThreadID"":""9244"",""TimeCreated"":""1709746625912"",""UserId"":""CNTR\\adm-GG.Kornev""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""function WaitWithProgress($ActivityNoDetails, $WaitHandle, $Ndf)\n{\n    $lastProgress = $null\n    do {\n        $progress = $Ndf.Progress\n        if(($progress -ne $null) -and ($progress.Length -gt 0) -and !($progress -eq $lastProgress))\n        {\n           Write-DiagProgress -activity $progress\n            $lastProgress = $progress\n        }\n        elseif(($progress.Length -eq 0) -and !($ActivityNoDetails -eq $lastProgress))\n        {\n            #clear the last progress string, use alternate description of operation\n            Write-DiagProgress -activity $ActivityNoDetails\n            $lastProgress = $ActivityNoDetails\n        }\n\n        &{\n            $WaitHandle.Wait($ProgressUpdateDelay)\n            break\n        }\n        trap [Exception]\n        {\n            #timed out, continue waiting\n            continue\n        }\n    } while($true)\n}"",""ScriptBlockId"":""9c4e8183-9b72-4343-8b86-402f3c4ca8f5"",""Path"":""C:\\Users\\adm-gg.kornev\\AppData\\Local\\Temp\\1283\\SDIAG_4cb23b5b-6735-4702-888a-47c823bfc245\\UtilityFunctions.ps1""}}"

Raw Event
"{""System"":{""EventId"":""4104"",""Version"":""1"",""Channel"":""Microsoft-Windows-PowerShell/Operational"",""ProviderName"":""Microsoft-Windows-PowerShell"",""Computer"":""C1P1-ADM01.GAZPROM.LOC"",""EventRecordID"":""48394378"",""Keywords"":""None"",""Level"":""Verbose"",""Opcode"":""15"",""Task"":""2"",""ProcessID"":""27016"",""ThreadID"":""9244"",""TimeCreated"":""1709746625929"",""UserId"":""CNTR\\adm-GG.Kornev""},""EventData"":{""MessageNumber"":""1"",""MessageTotal"":""1"",""ScriptBlockText"":""{\n            $WaitHandle.Wait($ProgressUpdateDelay)\n            break\n        }"",""ScriptBlockId"":""e3e812a4-ed81-487e-b4d8-baa8567c0080"",""Path"":""C:\\Users\\adm-gg.kornev\\AppData\\Local\\Temp\\1283\\SDIAG_4cb23b5b-6735-4702-888a-47c823bfc245\\UtilityFunctions.ps1""}}"
