***********************************************************
****************** Процессы в Linux ***********************
***********************************************************

****************** Жизненый цикл процесса *****************
В Linux процусс создается путем копирования уже существующего процесса (fork)
fork()
Системный вызов, создающий новый процесс
Создает полную копию процесса
Стартует в одном процесс, завершается в двух

exec()
Системный вызов, заменяющий исполняемый код в процессе
В качестве параметров принимает имя исполняемого файла и параметры к нему
Как правило именно после этого системного вызова мы получаем нужный процесс

exit()
Завершает процесс
Освобождает память, которую использовал процесс
Закрывает дескрипторы файлов
Сообщает код возврата 

wait()
Вызывается из процесса, который сделал вызов fork()
Считывает код возврата процесса
После того, как у процесса считали код возврата процесс полностью исчезает из системы


********************** PID, PPID ******************************
PID - уникальный номер процесса в ОС
В ОС Linux PID хранится в переменной типа (int целочисленная)
По умолчанию максимальное значение 32768

PPID - уникальный номер (идентификатор) процесса родителя
Каждый процесс имеет PID и PPID
Исключение - процессы init (PID 1, PPID 0) и kthreadd (PID 2, PPID 0)
init - самый первый процесс, запуск со стартом системы

Процесс зомби zombi - всего лишь строчка, не процесс
Плохо когда начинают плодится процессы зомби
В многопользовательской системе можно ограничитьь пользователю количество процессов, например 100
Показывает, что:
Система высоко нагружена - время между системными вызовами exit() и wait() достаточно что бы процесс зомби мог отражатся в выводе утилиты top
Есть процесс который не следит за своими потомками - от него создаются новые процессы, но при завершении работы пользователей процесс родитель не посылает запрос для выхода, их код возврата никто не считывает. А код возврата может считать только процесс родитель! Необходимо найти данный процесс родитель

Процесс сирота - процесс который остался без родителя
За процессами сиротами следит ядро и оно не дает этим процессам долго существовать
Передает его процессу init()

Как убить процесс зомби:
1. сделать этот процесс сиротой
2. его заберет процесс init()
3. считает код возврата

******************** Владелец процесса *******************
Каталог /proc/<pid> содержит все процессы
В Linux все процессы ведны всем
Управлять процессом может только root и владелец процесса

Владелец процесса:
Пользователь, от имени которого был запущен процесс
Сменить владельца процесса в Linux невозможно
Владелец процесса - владелец каталога /proc/<pid> (так можно узнать владельца процесса)

****************** Демон Daemon *************************
программа в системах UNIX, которая запускается самой системой и работающая в фоновом режиме без прямого взаимодействия с пользователем
Демон:
Процесс, который не имеет управляющего терминала 
С демоном нельзя взаимодействовать с помощью комбинаций клавиш клавиатуры
Взаимодействие с демоном происходит с помощью сигналов ОС

Примеры демонов:
apache, nginx, ssh, ftp
Будут работать пока их не остановишь

d - daemon (sshd, httpd, ntpd, proftpd - символ d в конце имени означает демона)


*************************** kill ******************************











