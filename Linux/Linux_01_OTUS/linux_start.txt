********* Идентификация пользователя UID  *****************************
USERS
максимальная длинна 23 символа
может содержать любые символы (кроме двоеточия и символа новой строки)
это всего лишь псевдоним

UID  - число от 0 до 2^32 -1


*********** root и все остальные *****************
root (UID 0)
Все остальные (UID не 0)
Делятся на два типа: служебные и обычные (люди)
служебные обычно UID от 1 до 500 (или 1000)? Deamon демоны, программы в системе работающая фоном

***************** /etc/passwd ****************************
root:x:0:0:root:/root:/usr/bin/zsh
:x: - давно хранился пароль пользователя - сейчас храится в /etc/shadow в виде хэша
:0: - UID номер пользователя (root:x:0:)
:0: - GID номер группы (root:x:0:0:)
:root: - коментарий (root:x:0:0:root:)
:/root: - рабочий каталог (root:x:0:0:root:/root:)
:/usr/bin/zsh - командная оболочка

**************** /etc/group ******************************
root:x:0:
adm:x:4:vit81
adm: - имя группы
:x: - 
:4: - GID номер группы 
:vit81 - кто входит в группу

Вывод данных о пользователе:
id user_name
id vit81
uid=1000(vit81) gid=1000(vit81) groups=1000(vit81),4(adm),20(dialout),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),100(users),106(netdev),117(wireshark),120(bluetooth),130(scanner),141(kaboxer),142(docker)

Добавление пользователя в группу (делается только от root):
sudo usermod -aG groupe_name user_name
-aG - ключи, где a - добавить, G - группу
groupe_name - имя группы
user_name - имя пользователя

******************************** /etc/shadow **************************
sudo cat /etc/shadow

тут хранятся - хранятся хэш пароля
SHA256 - алгоритм шифрования. Независимо какой объем мы дадим на вход, на выходе мы всегда получим 256 байт
Security Hash Algoritm 
Hash функция не имеет обратного преобразования! (это важно)
аутентификация пользователя - проверка наличия пользователя в системе
авторизация - проверка наличия прав на доступ к ресурсам. После ввода логин/пароль проверяется имеете ли вы доступ к системе

******************************* права на файлы в Linux ***************
три типа прав: чтение (r), запись (w), на исполнение (x)
r - readable
w - writeable
x - executable

три типа доступа: для владельца файла, для группы владельца файла, для всех остальных
Пример1:
-rw-r--r--  1 vit81 vit81      2503 Jul 21  2023  learn.txt

d - признак того, что это директория
- - признау того, что файл объявляется обычным файлом
дулятся на три части: rw-; r--; r--;
Владелец файла vit81 группа владельца vit81
rw- - означает что vit81 имеет право читать и записывать; r-- - группа vit81 может только читать, r-- остальные могут только читать. Право x на этот файл не установлено, запускать его никто не может

Пример2:
-rwxr-xr-x 1 root root 72752 Jan  7 10:44 /usr/bin/rm
Владелец файла root, группа владельца root
rwx - владелец может читать, изменять и исполнять 
r-x - все кто входят в группу root могут читать и исполнять
r-x - остальные могут читать и исполнять
/usr/bin/rm - является исполняемым файлом

Пример3:
drwxr-xr-x 13 vit81 vit81      4096 Mar 25 11:27  Documents
Директория, тот же файл
rwx 
r - дает читать, то есть смотреть список файлов в дириктории
x - дает возможность зайти в дирикторию

Под права файла в системе отведено 9 бит
4 - read
2 - write
1 - execute

rw-rw-r-- аналогично 664
110110100 - 664 (000 - 0; 001 - 1; 010 - 2; 011 - 3; 100 - 4; 101 -5; 110 - 6; 111 - 7)

********************* chmod (change mode) *******************
chmod команда для изменения прав
убрать права записи у владельца Owner (file_name это имя файла):
chmod u-w file_name 

добавить права записи владельцу Owner (file_name это имя файла):
chmod u+w file_name 

убрать права записи у группы Group (file_name это имя файла):
chmod g-w file_name

добавить права записи группе Group (file_name это имя файла):
chmod g+w file_name 

добавить права записи всем остальным Other (file_name это имя файла):
chmod o+w file_name 

Пример (дать полные права владельцу (+rwx), группе убрать права на исполнение (-x) и добавить чтение и запись (+rw), всем остальным убрать все права (-rwx))
chmod u+rwx,g-x+rw,o-rwx file_name
─$ chmod g+w file_new
-rwxrw---- 1 vit81 vit81    0 Mar 20 18:32 file_new

Пример2 - предоставление всем всех прав (file_name это имя файла):
chmod a+rwx file_name

chmod работает с директорией только как с файлом, он не меняет права на то что находится в самой директории (dir_name имя директории)
chmod a+rwx dir_name/

Пример3: Для изменения прав на содержимое директории добавить ключ -R потом указать нужные права:
chmod -R a+rwx dir_name/

********************** Файловые системы и inode *************************
inode - индексовая систма хранения данных о файле
Пример1:
Команда вывода информации о файле stat (file - имя файла, можно любое):
└─$ stat file 
  File: file
  Size: 0               Blocks: 0          IO Block: 4096   regular empty file
Device: 259,4   Inode: 9703040     Links: 1
Access: (0777/-rwxrwxrwx)  Uid: ( 1000/   vit81)   Gid: ( 1000/   vit81)
Access: 2024-03-20 18:35:20.305836893 +0300
Modify: 2024-03-20 18:32:26.646942442 +0300
Change: 2024-03-25 13:49:45.695016074 +0300
 Birth: 2024-03-20 18:32:26.646942442 +0300

Пример2:
Вывод номеров inode в команде ls:
└─$ ls -li
total 4
9703039 drwxrwxrwx 2 vit81 vit81 4096 Mar 20 18:32 dir2
9703040 -rwxrwxrwx 1 vit81 vit81    0 Mar 20 18:32 file
                                                         
Пример3:
Вывести общие число inode командой df -i:
└─$ df -i  
Filesystem       Inodes   IUsed    IFree IUse% Mounted on
udev            1998433     554  1997879    1% /dev
tmpfs           2008969    1100  2007869    1% /run
/dev/nvme0n1p4 12034048 1140229 10893819   10% /
tmpfs           2008969      16  2008953    1% /dev/shm
tmpfs           2008969       3  2008966    1% /run/lock
efivarfs              0       0        0     - /sys/firmware/efi/efivars
/dev/nvme0n1p1        0       0        0     - /boot/efi
tmpfs            401793     146   401647    1% /run/user/1000


**************************** каталоги и для чего они нужны **************
В Linux все есть файлы
Каталог это специальный тип файлов, который хранит в себе имена других файлов или каталогов
Каталог неотемлемая часть файловой системы
└─$ ls -ld /
drwxr-xr-x 19 root root 4096 Mar  9 12:45 /

******************** HardLink и SoftLink **********************
9703039 drwxrwxrwx 2 vit81 vit81 4096 Mar 20 18:32 dir2
9703040 -rwxrwxrwx 1 vit81 vit81    0 Mar 20 18:32 file
цифра после inode и прав доступа (в нашем случае это 2 и 1) это hardlink 

HardLink 
Пример1 - с помощью команды ln сделать hardlink:
Было:
┌──(vit81㉿kali)-[~/test/dir]
└─$ ls      
dir2  file
                                                                                                       
┌──(vit81㉿kali)-[~/test/dir]
└─$ ln file file_new
                                                                                                       
┌──(vit81㉿kali)-[~/test/dir]
└─$ ls -li          
total 4
9703039 drwxrwxrwx 2 vit81 vit81 4096 Mar 20 18:32 dir2
9703040 -rwxrwxrwx 2 vit81 vit81    0 Mar 20 18:32 file
9703040 -rwxrwxrwx 2 vit81 vit81    0 Mar 20 18:32 file_new

Появился hardlink файла file на файл file_new. Inode и права доступа одинаковые! Это еще одна запись на файл. Пока есть хоть один hardlink файл не будет удален из файловой системы!
Если мы изменим права доступа на hardlink, то изменятся права доступа на файл и на остальные hardlink файла!
Все hardlink файла равны между собой.

Важно:
Hardlink нельзя создать на каталоги 
Hardlink можно создать только в пределах одной файловой системы (inode уникальны у каждой ФС)
 
SoftLink
Это аналоги ярлыков windows
Команда  ln -s file file_ls (file_ls будет слинкованым на файл file):
└─$ ls -l           
total 8
drwxrwxrwx 2 vit81 vit81 4096 Mar 20 18:32 dir2
drwxr-xr-x 2 vit81 vit81 4096 Mar 25 15:22 dirnew
-rwxrwxrwx 2 vit81 vit81    0 Mar 20 18:32 file
-rwxrwxrwx 2 vit81 vit81    0 Mar 20 18:32 file_new
                                                  
┌──(vit81㉿kali)-[~/test/dir]
└─$ ln -s file file_ls
                                                                                                       
┌──(vit81㉿kali)-[~/test/dir]
└─$ ls -l             
total 8
drwxrwxrwx 2 vit81 vit81 4096 Mar 20 18:32 dir2
drwxr-xr-x 2 vit81 vit81 4096 Mar 25 15:22 dirnew
-rwxrwxrwx 2 vit81 vit81    0 Mar 20 18:32 file
lrwxrwxrwx 1 vit81 vit81    4 Mar 25 15:39 file_ls -> file
-rwxrwxrwx 2 vit81 vit81    0 Mar 20 18:32 file_new

Итог:
lrwxrwxrwx 1 vit81 vit81    4 Mar 25 15:39 file_ls -> file
l - означает линк
имеет теже права, что и оригинальный файл (file)
SoftLink занимает inode, в отличие от HardLink, так как SoftLink это новый файл ссылающийся на существующий файл
SoftLink можно создавать на каталоги
SoftLink можно создавать между разными файловыми системами

